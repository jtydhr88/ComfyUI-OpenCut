{"version":3,"file":"static/chunks/24-b828a3eaa905d033.js","mappings":"kXCeM,EAAa,QAGb,CAAC,EAAoB,EAAgB,CAAI,OAAkB,CAAC,GAG5D,CAAC,CAHoC,CAGrB,EAAe,CAAI,CAHmC,CAGG,GAUzE,EAAc,KAViB,OAUjB,CAClB,CAAC,EAAgC,KAC/B,GAAM,CACJ,oBACA,UACA,GAAU,EACV,oBACA,QACA,EAAQ,aACR,OACA,EACA,GAAG,EACL,CAAI,EACE,CAAC,EAAQ,EAAS,CAAU,MAAV,IAAU,CAAmC,IAAI,EACnE,EAAe,OAAe,CAAC,EAAc,GAAU,EAAU,IAAI,CAAC,CAC7B,SAAO,IAEhD,CAFqD,EAErC,GAAS,GAAQ,CAAC,CAAC,EAAO,QAAQ,MAAM,EAE9D,EAFkE,IAGhE,WAAC,GAAc,MAAO,UAAc,WAAkB,EACpD,oBAAC,IAAS,CAAC,OAAV,CACC,KAAK,SACL,KAAK,QACL,eAAc,EACd,aAAY,EAAS,GACrB,IAD4B,YACb,EAAW,GAAK,gBAC/B,QACA,EACC,GAAG,EACJ,IAAK,EACL,QAAS,OAAoB,CAAC,EAAM,QAAU,IAExC,GAAU,aACV,IACF,EAAiC,QAAU,CAD1B,CACgC,qBAAqB,EAIlE,EAAkC,QAAS,GAAM,gBAAgB,EAEzE,CAAC,IAEF,GACC,UAAC,GACC,CADF,OACW,EACT,QAAS,CAAC,EAAiC,aAC3C,QACA,UACA,EACA,oBACA,OACA,EAIA,MAAO,CAAE,UAAW,mBAAoB,IAC1C,CAEJ,CAEJ,GAGF,EAAM,YAAc,EAMpB,IAAM,EAAiB,iBAYjB,EAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,cAAE,aAAc,EAAY,GAAG,EAAe,CAAI,EAClD,EAAU,EAAgB,EAAgB,GAChD,CAFoD,KAGlD,GAF0D,EAE1D,KAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAAQ,QACvC,mBAAC,IAAS,CAAC,KAAV,CACC,aAAY,EAAS,EAAQ,OAAO,EACpC,gBAAe,EAAQ,SAAW,GAAK,OACtC,GAAG,EACJ,IAAK,GACP,CACF,CAEJ,GAGF,EAAe,YAAc,EAe7B,IAAM,EAAyB,aAC7B,GAQE,QAPA,cACE,UACA,UACA,EACA,WAAU,EACV,GAAG,EACL,GAGM,EAAY,SAAyB,IAAI,EACzC,EAAe,OAAe,CAAC,EAAK,GACpC,EAAc,OADkC,CACtB,GAC1B,EAAc,EADmB,CACnB,IAAO,CAAC,GAoB5B,IApBmC,GAG7B,YAAU,KACd,IAAM,EAAQ,EAAI,QAClB,GAAI,CAAC,EAAO,OAOZ,IAAM,EAJa,OAAO,yBADP,OAAO,iBAAiB,UAGzC,WAE4B,IAC9B,GAAI,IAAgB,GAAW,EAAY,CACzC,IAAM,EAAQ,IAAI,MAAM,QAAS,SAAE,CAAQ,CAAC,EAC5C,EAAW,KAAK,EAAO,GACvB,EAAM,EADwB,WACxB,CAAc,EACtB,CACF,EAF6B,CAEzB,EAAa,EAAS,EAAQ,EAGhC,GAH+B,EAG/B,KAAC,IAAS,CAAC,MAAV,CACC,KAAK,QACL,cAAW,GACX,eAAgB,EACf,GAAG,EACJ,SAAU,GACV,IAAK,EACL,MAAO,CACL,GAAG,EAAM,MACT,GAAG,EACH,SAAU,WACV,cAAe,OACf,QAAS,EACT,OAAQ,CACV,GAGN,GAOF,SAAS,EAAS,GAAkB,OAC3B,EAAU,UAAY,WAC/B,CANA,EAAiB,YAhES,EAgEK,iBD3L/B,IAAM,EAAa,CAAC,UAAW,YAAa,YAAa,YAAY,EAK/D,EAAmB,aAGnB,CAAC,EAAyB,EAAqB,CAAIA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAC,CAAmB,EAAkB,CAC5F,IAA2B,CAC3B,EAFmD,EAI/C,EAA2B,QAA2B,CAAC,EACvD,EAAgB,IAUhB,CAAC,EAAoB,EAAoB,CAC7C,EAAgD,GAiB5C,EA5BiC,EA4Bd,QAlBsB,CACmB,CAiBzC,CACvB,CAAC,EAAqC,KACpC,GAAM,CACJ,yBACA,eACA,EACA,MAAO,WACP,GAAW,WACX,GAAW,cACX,MACA,OACA,GAAO,EACP,gBACA,GAAG,EACL,CAAI,EACE,EAAwB,EAAyB,GACjD,EAAY,QAAY,CAAC,GAAG,CAC3B,EAAO,EAAQ,CAAI,KAAJ,CAAI,CAAoB,CAAC,CAC7C,KAAM,EACN,oBAAa,EAAgB,KAC7B,SAAU,EACV,OAAQ,CACV,CAAC,EAED,MACEC,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAC,GACC,MAAO,EACP,OACA,oBACA,QACA,EACA,cAAe,EAEf,SAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAkB,KAAjB,CACC,SAAO,EACN,GAAG,cACJ,EACA,IAAK,OACL,EAEA,SAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAACC,EAAAA,EAAAC,CAAU,IAAV,CACC,KAAK,aACL,gBAAe,EACf,mBAAkB,EAClB,gBAAe,EAAW,GAAK,OAC/B,IAAK,EACJ,GAAG,EACJ,IAAK,GACP,EACF,EAGN,GAGF,EAAW,YAAc,EAMzB,IAAM,EAAY,iBAQZ,EAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,mBAAE,WAAmB,EAAU,GAAG,EAAU,CAAI,EAChD,EAAU,EAAqB,CADa,CACF,GAC1C,EAAa,EAAQ,UADsC,EAE3D,EAAwB,EAAyB,GACjD,EAAa,EAAc,GAC3B,EAAY,KAFsD,GAEtD,CAAyC,GADT,CACa,EACzD,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,CAAAC,CAAgB,EAAc,GAAG,EACtC,EAAQ,QAAU,EAAU,MACtC,EAA6B,UAAO,GAiB1C,EAjB+C,KAEzC,YAAU,KACd,IAAM,EAAgB,IAChB,EAAW,SAAS,EAAM,GAAG,GAAG,CAClC,EAAqB,SAAU,EAEnC,EACM,EAAc,IAAO,EAAqB,QAAU,GAG1D,OAFA,SAAS,iBAAiB,UAAW,GACrC,SAAS,CADyC,eACzC,CAAiB,QAAS,GAC5B,KACL,GAF4C,MAEnC,oBAAoB,UAAW,GACxC,SAAS,CAD4C,kBAC5C,CAAoB,QAAS,EACxC,CACF,EAAG,CAAC,CAAC,EAGHJ,CAAAA,CALmD,CAKnDA,EAAAA,GAAAA,CAAAA,CAAkB,KAAjB,CACC,SAAO,EACN,GAAG,EACJ,UAAW,CAAC,EACZ,OAAQ,EAER,SAAAA,CAAAA,EAAAA,EAAAA,GAAAA,CAAAA,CAAC,GACC,SAAU,EACV,SAAU,EAAQ,SAClB,UACC,GAAG,EACH,GAAG,EACJ,KAAM,EAAQ,KACd,IAAK,EACL,QAAS,IAAM,EAAQ,cAAc,EAAU,KAAK,EACpD,UAAW,OAAAK,CAAqB,IAEZ,QAAS,EAAvB,EAAM,KAAiB,EAAM,eAAe,CAClD,CAAC,EACD,QAAS,OAAAA,CAAqB,EAAU,QAAS,SAMb,EAA9B,EAAqB,QAAS,aAAI,UAAJ,EAAa,OAAM,CACvD,CADoC,CACnC,EACH,EAGN,GAGF,EAAe,YAAc,EAY7B,IAAM,EAA4B,aAChC,CAAC,EAA8C,KAC7C,GAAM,mBAAE,EAAmB,GAAG,EAAe,CAAI,EAC3C,EAAa,EAAc,GACjC,GAF6C,GAEtCL,CAAA,EAAAA,EAAAA,GAD2C,CAC3CA,CAAC,GAAgB,GAAG,EAAa,GAAG,EAAgB,IAAK,EAAc,CAChF,GAGF,EAAoB,YAdG,EAcWF,oBAIlC,IAAMG,EAAO,EACPE,EAAO,EACP,EAAY,keEpMZ,EAAY,cAGZ,CAAC,EAA0B,EAAsB,CAAI,OAAkB,CAAC,EAAW,CACvF,QADqD,WACpC,CAClB,EACK,EAAiB,uBAAiB,CAAC,EAKnC,EAA2C,IAC/C,GAAM,oBAAE,EAAoB,GAAG,EAAiB,CAAI,EAC9C,EAAc,EAAe,GACnC,KAFgD,CAEzC,SAD8C,CAC7B,OAAhB,CAAsB,GAAG,EAAc,GAAG,EAAkB,OAAO,EAAM,CACnF,CAEA,GAAY,YAAc,EAW1B,IAAM,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,oBAAE,EAAoB,GAAG,EAAa,CAAI,EAC1C,EAAc,EAAe,GACnC,CAF4C,KAErC,SAD8C,CAC7B,UAAhB,CAAyB,GAAG,EAAc,GAAG,EAAc,IAAK,EAAc,CACxF,EAGF,GAAmB,YAdE,EAcY,mBAWjC,IAAM,EAAsD,IAG1D,GAAM,oBAAE,EAAoB,GAAG,EAAY,CAAI,EACzC,EAAc,EAAe,GACnC,MAAO,SAD8C,CAC7B,SAAhB,CAAwB,GAAG,EAAc,GAAG,EAAa,CACnE,EAEA,EAAkB,YAbE,EAaY,kBAYhC,IAAM,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,CAAE,qBAAoB,GAAG,EAAa,CAAI,EAC1C,EAAc,EAAe,GACnC,CAF4C,KAErC,SAD8C,CAC7B,UAAhB,CAAyB,GAAG,EAAc,GAAG,EAAc,IAAK,EAAc,CACxF,GAGF,EAAmB,YAdE,EAcY,mBAMjC,IAAM,EAAe,qBAMf,CAAC,EAA4B,EAA4B,CAC7D,EAAyD,GAOrD,EAAY,QAAe,CAAC,SAR6B,WAQT,EAEhD,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,oBAAE,WAAoB,EAAU,GAAG,EAAa,CAAI,EACpD,EAAc,EAAe,GAC7B,CAFgD,CAE7B,SAAkC,IADN,EAE/C,EAAe,OAAe,CAAC,EAAc,GAC7C,EAAkB,KADqC,GACrC,CAAwC,IAAI,EAEpE,MACE,UAAiB,kBAAhB,CACC,YAAa,EACb,UAAW,EACX,SAAS,eAET,mBAAC,GAA2B,MAAO,YAAoB,EACrD,oBAAiB,UAAhB,CACC,KAAK,cACJ,GAAG,EACH,GAAG,EACJ,IAAK,EACL,gBAAiB,OAAoB,CAAC,EAAa,gBAAiB,QAElE,EADA,EAAM,eAAe,SACrB,IAAU,UAAV,EAAmB,MAAM,CAAE,EAA3B,aAA0C,CAAK,CAAC,CAClD,CAAC,EACD,qBAAsB,GAAW,EAAM,eAAe,EACtD,kBAAmB,GAAW,EAAM,eAAe,EAQnD,oBAAC,YAAW,EAAS,EAEnB,UAAC,GAAmB,aAAwB,IAEhD,CACF,GAGN,GAGF,EAAmB,YAAc,EAMjC,IAAM,EAAa,mBAMb,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,GAAM,oBAAE,EAAoB,GAAG,EAAW,CAAI,EACxC,EAAc,EAAe,EADO,CAE1C,MAAO,SAD8C,CAC7B,QAAhB,CAAuB,GAAG,EAAc,GAAG,EAAY,IAAK,EAAc,CACpF,EAGF,GAAiB,YAAc,EAM/B,IAAM,EAAmB,yBAMnB,EAA+B,aAGnC,CAAC,EAAiD,KAClD,GAAM,oBAAE,EAAoB,GAAG,EAAiB,CAAI,EAC9C,EAAc,EAAe,GACnC,KAFgD,CAEzC,SAD8C,CAC7B,cAAhB,CAA6B,GAAG,EAAc,GAAG,EAAkB,IAAK,EAAc,CAChG,CAAC,EAED,EAAuB,YAAc,EAYrC,IAAM,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,oBAAE,EAAoB,GAAG,EAAY,CAAI,EACzC,EAAc,EAAe,GACnC,MAAO,SAD8C,CAC7B,QAAhB,CAAuB,GAAG,EAAc,GAAG,EAAa,IAAK,EAAc,CACrF,GAGF,EAAkB,YAdE,EAcY,kBAMhC,IAAM,EAAc,oBAKd,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,oBAAE,EAAoB,GAAG,EAAY,CAAI,EACzC,OADqC,IACnC,EAAU,CAAI,EAA6B,EAAa,GAC1D,EAAc,EAAe,GAC7B,EAAM,OAAe,CAAC,EAAc,GAC1C,MADmD,CAC5C,SAAiB,QAAhB,CAAuB,GAAG,EAAc,GAAG,MAAa,EAAU,CAC5E,GAGF,EAAkB,YAAc,EAQhC,IAAM,EAAwD,OAAC,YAAE,EAAW,GAAM,EAChE,IAEmB,OAFd,EAAY,GAEc,OAFd,6HAEc,2BAAqB,EAAgB,+PAEkF,OAAZ,EAAY,8QAWtK,OAPM,YAAU,WACS,SAAS,sBAC9B,IAAW,kBAAS,aAAa,kBAAkB,EAGvD,EAAG,CAAC,EAAS,EAAW,EAEjB,IACT,EAEMF,EAAO,EACPK,EAAU,EACVC,EAAS,EACTC,EAAU,EACVC,EAAU,EACV,EAAS,EACT,EAAS,EACTC,EAAQ,EACRC,EAAc,6RChQd,EAAmB,cAGnB,CAAC,EAA0B,EAAsB,CAAI,OAAkB,CAAC,GASxE,CAAC,EAAqB,EAAqB,CAC/C,EAAkD,GAW9C,EArBwF,EAqBpE,SAZuB,CAYvB,CACxB,CAAC,EAAsC,KACrC,GAAM,oBACJ,EACA,KAAM,cACN,WACA,eACA,EACA,GAAG,EACL,CAAI,EAEE,CAAC,EAAM,EAAO,CAAI,IAAJ,CAAI,EAAoB,CAAC,CAC3C,KAAM,EACN,qBAAa,EACb,SAAU,EACV,CAF4B,MAEpB,CAFK,CAGd,EAED,MACE,UAAC,GACC,MAAO,EACP,WACA,UAAW,OAAK,CAAC,OACjB,EACA,aAAoB,cAAY,IAAM,EAAS,GAAa,CAAC,GAAW,CAAC,EAAQ,EAEjF,GAFgF,MAEhF,UAAC,IAAS,CAAC,IAAV,CACC,aAAY,EAAS,GACrB,CADyB,eACV,EAAW,GAAK,OAC9B,GAAG,EACJ,IAAK,GACP,EAGN,GAGF,EAAY,YAAc,EAM1B,IAAM,EAAe,qBAMf,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,CAAE,qBAAoB,GAAG,EAAa,CAAI,EAC1C,EAAU,EAAsB,EAAc,EADR,CAE5C,MACE,SAFoE,CAEnE,IAAS,CAAC,OAAV,CACC,KAAK,SACL,gBAAe,EAAQ,UACvB,gBAAe,EAAQ,OAAQ,EAC/B,aAAY,EAAS,EAAQ,IAAI,EACjC,gBAAe,EAAQ,SAAW,GAAK,OACvC,SAAU,EAAQ,SACjB,GAAG,EACJ,IAAK,EACL,QAAS,OAAoB,CAAC,EAAM,QAAS,EAAQ,YAAY,GAGvE,GAGF,EAAmB,YAAc,EAMjC,IAAM,EAAe,qBAWf,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,YAAE,EAAY,GAAG,EAAa,CAAI,EAClC,EAAU,EAAsB,EAAc,EAAM,kBAAkB,EAC5E,MACE,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAAQ,KACtC,gBAAC,CAAE,UAAQ,SACV,UAAC,GAAwB,GAAG,EAAc,IAAK,UAAc,EAAkB,GAEnF,CAEJ,GAGF,EAAmB,YAAc,EASjC,IAAM,EAA+B,aAGnC,CAAC,EAAiD,KAClD,GAAM,oBAAE,UAAoB,WAAS,EAAU,GAAG,EAAa,CAAI,EAC7D,EAAU,EAAsB,EAAc,EADW,CAEzD,CAAC,EAAW,EAAY,CAAU,SAD8B,CAC9B,CAAS,GAC3C,EAAY,EADsC,MACtC,CAAsC,IAAI,EACtD,EAAe,OAAe,CAAC,EAAc,GAAG,EAC9B,SAA2B,CAAC,EAC9C,EAAS,EAAU,QACnB,EAAiB,SAA2B,CAAC,EAC7C,EAAQ,EAAS,QAGjB,EAAS,EAAQ,MAAQ,EACzB,EAAqC,SAAO,GAC5C,EAA0B,CADwB,CACxB,OAA+B,MAAS,EAuCxE,OArCM,YAAU,KACd,IAAM,EAAM,sBAAsB,IAAO,EAA6B,SAAU,GAChF,EADsF,IAC/E,IAAM,qBAAqB,EACpC,CADuC,CACpC,CAAC,CAAC,EAEL,OAAe,CAAC,KACd,IAAM,EAAO,EAAI,QACjB,GAAI,EAAM,CACR,EAAkB,QAAU,EAAkB,SAAW,CACvD,mBAAoB,EAAK,MAAM,mBAC/B,cAAe,EAAK,MAAM,eAG5B,EAAK,MAAM,mBAAqB,KAChC,EAAK,MAAM,cAAgB,OAG3B,IAAM,EAAO,EAAK,sBAAsB,EACxC,EAAU,QAAU,EAAK,OACzB,EAAS,QAAU,EAAK,MAGnB,EAA6B,SAAS,CACzC,EAAK,MAAM,mBAAqB,EAAkB,QAAQ,mBAC1D,EAAK,MAAM,cAAgB,EAAkB,QAAQ,eAGvD,EAAa,EACf,CAOF,EAAG,CAAC,CARoB,CAQZ,KAAM,EAAQ,EAGxB,GAHuB,EAGvB,KAAC,IAAS,CAAC,IAAV,CACC,aAAY,EAAS,EAAQ,IAAI,EACjC,gBAAe,EAAQ,SAAW,GAAK,OACvC,GAAI,EAAQ,UACZ,OAAQ,CAAC,EACR,GAAG,EACJ,IAAK,EACL,MAAO,CACJ,mCAA2C,EAAG,EAAS,GAAS,OAAN,EAAM,MAAO,OACvE,kCAA0C,EAAG,EAAQ,GAAQ,OAAL,EAAK,MAAO,OACrE,GAAG,EAAM,OAGV,YAAU,GAGjB,CAAC,EAID,SAAS,EAAS,GAAgB,OACzB,EAAO,OAAS,QACzB,CAEA,IAAM,EAAO,EACP,EAAU,EACV,EAAU,+WC5NV,EAA6B,sBAqB7B,CAAC,EAAgC,CAAI,OAAkB,CAAC,GACxD,CAAC,EAA6B,EAA6B,CAC/D,EAAkE,GAgB9D,EAA0C,CAC9C,IAnBqC,KAAiD,OAmBtE,EAChB,EAlB4F,aAkB5E,KAChB,aAAc,IAChB,EAEM,EAA0D,OAAC,CAC/D,6BACA,GAAG,EACL,GAA6C,EAC5B,OAAK,CAAC,EAAM,EAAE,EACvB,EAAiB,GAAS,OAAN,EAAM,UAC1B,CAAC,EAAc,EAAe,CAAU,WAAwB,CAAlC,EAC9B,UAAU,CADoE,CACpD,EAC1B,EAAoB,cACxB,GACE,EAA8B,MAAd,EAAqB,OAAO,GAAc,IAAI,EAChE,CADwD,CACvD,EAGG,CAAE,QAAS,iBAAa,oBAAgB,WAAmB,EAAS,CAAI,EACxE,CAAC,EAAU,GAAO,EAAU,CAAI,OAAoB,CAAC,CACzD,OAAQ,EACR,KAAM,EACN,qBAAa,EACb,SAAU,CACZ,CAAC,EAEK,EAJ2B,EAIV,OAAgC,IAAI,EACrD,EAAmB,SAA2B,GAEpD,MACE,UAHqE,EAGpE,CACC,MAAO,UACP,WACA,aACA,cACA,UACA,aACA,WAEC,GAGP,EACA,EAAoB,YAAc,EAMlC,IAAM,EAAmC,EAA6B,QAchE,EAAiC,aACrC,GASE,QARA,4BACE,EACA,eAAe,mBACf,iBAAiB,iBACjB,GAAa,EACb,GAAI,EACJ,GAAG,EACL,GAGM,SAAE,WAAS,UAAU,cAAS,aAAa,aAAY,EAAW,CACtE,EAA8B,EAAkC,GAE5D,YAAU,KACd,EAAY,EACd,EAJ4F,CAIxF,CADgB,CACR,EAAY,EAUxB,IAAM,EAAc,CAVG,EAUH,IAAc,CAAC,GAgCnC,OACE,EAhCI,UAAU,KACd,IAAM,EAAe,EAAS,QACxB,iBAAO,EAAc,KAC3B,GAAI,CAAC,EACH,IADS,GAIX,IAAM,EAAa,IAAI,gBAAgB,OACvC,EAAK,iBACH,QACA,IACM,EAAO,kBAAkB,GACf,EAEhB,EACA,CAHqB,OAGX,EAAW,SAEvB,EAAK,iBACH,SACA,KAGE,GAAY,EACd,EACA,CAAE,OAAQ,EAAW,SAEhB,KACL,EAAW,MAAM,CACnB,CACF,EAAG,CAAC,EAAU,EAAY,EAGxB,OAHuB,CAGvB,EAAC,IAAS,CAAC,MAAV,CACE,GAAG,EACJ,WAAI,EAAU,iBACd,EACA,eACA,IAAK,OAAe,CAAC,EAAc,QAAQ,MAC3C,EACA,KAAM,EAAU,OAAS,WACzB,OAAQ,OAAoB,CAAC,EAAM,OAAQ,IAEzC,GAAM,gBAAE,eAAgB,EAAa,CAAI,EAAM,cAC/C,EAAW,QAAQ,eAAiB,EACpC,EAAW,QAAQ,aAAe,CACpC,CAAC,GAGP,GAEF,EAAyB,YAAc,EAMvC,IAAM,EAAoC,EAA6B,SAMjE,EAAkC,aAItC,GAeE,QAdA,4BACE,UACA,gBACA,kBACA,cACA,UACA,EACA,WACA,aAAc,EACd,gBAAiB,EACjB,cAAe,WACf,EACA,GAAG,EACL,GAGM,YAAE,UAAY,WAAS,UAAU,EAAS,aAAW,CAAI,EAC7D,EACA,GAEI,CAAC,EAAmB,EAAoB,CAAU,WAA6B,MAAvC,EACxC,EAAmB,SAA0B,IAAI,EACjD,EAAM,OAAe,CAAC,EAAc,GACpC,EAAa,KADiC,CACjC,CAAa,CAAC,EAE3B,YAAU,KACd,IAAM,EAAU,EAAW,QAC3B,GAAI,CAAC,GAAW,EAAe,YAC7B,EAAqB,MAAS,EAIhC,IAAM,EAAqB,EAAU,gBAAkB,gBAEvD,SAAS,EAAuB,GAAwC,EACzD,EAEe,OAAY,EAC1C,CAEA,EAL6B,EAKE,WAH6B,CAFjB,CAO3C,IAAM,EAAW,IAAI,iBAAiB,IACpC,IAAI,EACJ,QAAW,KAAS,EACC,MADQ,WACS,CAAhC,EAAM,MACJ,EAAQ,aAAa,GACT,EAAQ,aAI5B,EAAuB,EACzB,CAAC,EAED,MAHoC,CAEpC,EAAS,QAAQ,EAAS,CAAE,eAAe,EAAM,SAAS,CAAK,CAAC,EACzD,KACL,EAAS,WAAW,CACtB,CACF,EAAG,CAAC,EAAS,EAAc,EAE3B,IAAM,EAAY,GAAiB,EAyBnC,OACE,EAhBA,YAAiB,UAHjB,OAAe,SACf,MAAa,KAKT,YAAU,SAEM,IADpB,IAAI,EAAU,KAAO,CAAD,CACd,cAAyB,qBAAS,wBAAe,cAAe,OAChE,EAAQ,IAAO,EAAW,QAAQ,gBAAiB,EACnD,EAAkB,IAAO,EAAU,SA4KtC,CACPC,CACA,EACA,GACY,GACPA,EAAe,oBAAqB,CACvC,IAAMC,EAAKD,EAAO,oBAAoB,UACtC,MAAO,CADgD,IAErDA,EAAO,mBAAmBC,EAC5B,CAD8B,CAGhC,IAAM,EAAQ,KAAK,IAAI,EACjB,EAAKD,EAAO,WAAW,KAE3B,EAAS,CAAE,YAAY,EAAO,cADR,IAAM,KAAK,IAAI,EAAG,IAAM,KAAK,IAAI,EAAI,GACf,CADqB,CAEnE,EAAG,CAAC,EACJ,MAAO,KACLA,EAAO,aAAa,EAAE,CAE1B,EA/LmE,EAAa,GAE1E,EAF+E,KAC/E,EAAY,iBAAiB,YAAa,GACnC,KACL,IACA,EAAY,CAH2C,CAE/C,iBACI,CAAoB,YAAa,EAC/C,CACF,EAAG,CAAC,EAAW,EAGb,KAL8D,CAElD,EAGZ,EAAC,IAAS,CAAC,OAAV,CACC,gBAAe,EACf,cAAa,EACb,aAAY,MACZ,EACA,GAAI,EACH,GAAG,EACJ,cAAe,OAAoB,CAAC,EAAe,KACjD,EAAW,QAAQ,gBAAiB,CACtC,CAAC,EACD,gBAAiB,UAIf,KAAkB,GAClB,EADuB,OACZ,CAAU,CACvB,EAIA,QAAS,IAEP,SADA,KAAU,GACN,EADW,gBACL,CAAkB,CAC1B,EAAW,QAAU,EACrB,MACF,CAKA,GAHA,eAAS,CAAC,KACR,EAAW,GAAO,CAAC,CAAC,CACtB,CAAC,EACG,EAAW,QAAQ,eAAgB,CACrC,IAAM,EAAQ,EAAS,QACvB,GAAI,EAAO,CACT,GAAM,gBAAE,eAAgB,EAAa,CAAI,EAAW,QACpD,EAAM,MAAM,GACR,UAA4C,OAAjB,CAAiB,GAAM,sBAE9B,KAGhB,EAAM,cAAc,gBAAkB,IACxC,EAAM,CADyC,aACzC,CAAiB,EACvB,EAAM,aAAe,EAEzB,CAAC,CAEL,CACF,CACA,EAAW,QAAU,CACvB,EACA,YAAa,UACX,KAAc,GAId,EAJmB,SAIR,KACT,EAAW,QAAU,CACvB,EAAG,EAAE,CACP,EACA,KAAK,kBAEJ,GAGP,GAEF,EAA0B,YAAc,EAMxC,IAAM,EAAkC,EAA6B,OAe/D,EAAkE,OAAC,4BACvE,EACA,GAAG,EACL,GACQ,SAAE,EAAQ,CAAI,EAClB,EACA,GAGF,MAAO,WAAY,EAEf,EAAM,OAAO,SAAE,CAAQ,CAAC,EACxB,EACE,EAAM,QACN,EAAM,QAEd,EAAwB,YAAc,EAMtC,IAAM,EAAkC,EAA6B,OAS/D,EAAgC,aACpC,GAOE,QANA,4BACE,WAEA,EACA,GAAG,EACL,GAGM,SAAE,EAAQ,CAAI,EAClB,EACA,GAEI,CAAE,QAAS,EAAa,OAAQ,EAAY,GAAG,EAAS,CAAI,EAClE,IAD8D,EAE5D,UAAC,IAAS,CAAC,IAAV,CAAe,GAAG,EAAU,IAAK,EAAc,eAAW,EAAC,SAAO,EAChE,WAAU,EAAc,EAC3B,CAEJ,GAEF,EAAwB,YAAc,yNCrahC,EAAoB,cAGpB,CAAC,EAA0B,EAAsB,CAAI,OAAkB,CAAC,EAAmB,CAC/F,IAA2B,CAC5B,EACK,CAHiD,CAGtB,QAA2B,CAAC,EAUvD,EAAc,YAAM,CAGxB,CAAC,EAAO,KACR,GAAM,MAAE,EAAM,GAAG,EAAiB,CAAI,EAEtC,GAAa,SAFqB,CAEX,CAAnB,EAEF,MAAO,UAAC,GADY,IACW,CAAgB,EAAb,EAAkB,EAAc,EAGpE,GAAa,YAAY,CAArB,EAEF,MAAO,UAAC,GADc,IACW,CAAkB,EAAf,EAAoB,EAAc,CAGxE,OAAM,MAAU,oCAAwD,GAAI,IAArB,EAAiB,KAC1E,CAAC,EAED,EAAY,KAH8D,MAG9D,CAAc,EAW1B,GAAM,CAAC,EAA0B,EAA0B,CACzD,EAAuD,GAmBnD,EAAwB,YAnB4C,CAsBxE,CAAC,EAAgD,KACjD,GAAM,CACJ,MAAO,eACP,EACA,gBAAgB,KAAO,CAAD,CACtB,GAAG,EACL,CAAI,EAEE,CAAC,EAAO,EAAQ,CAAI,OAAoB,CAAC,CAC7C,KAAM,EACN,oBAAa,EAAgB,GAC7B,SAAU,EACV,CAFa,MAEL,CACV,CAAC,EAED,MACE,UAAC,GACC,MAAO,EAAM,mBACb,KAAK,SACL,MAAO,SAAM,CAAQ,IAAO,EAAQ,CAAC,EAAK,CAAI,CAAC,CAAL,CAAS,CAAC,EAAM,EAC1D,CADyD,cACzC,EAChB,iBAAkB,aAAM,CAAY,IAAM,EAAS,EAAE,EAAG,CAAC,EAAS,EAElE,IAFiE,KAEjE,UAAC,GAAiB,GAAG,EAAwB,IAAK,EAAc,GAGtE,CAAC,EAmBK,EAA0B,YAAM,CAGpC,CAAC,EAAkD,KACnD,GAAM,CACJ,MAAO,eACP,gBACA,EAAgB,KAAO,CAAD,CACtB,GAAG,EACL,CAAI,EAEE,CAAC,EAAO,EAAQ,CAAI,KAAJ,CAAI,CAAoB,CAAC,CAC7C,KAAM,EACN,oBAAa,EAAgB,CAAC,EAC9B,SAAU,EACV,OAAQ,CACV,CAAC,EAEK,EAAuB,aAAM,CACjC,GAAuB,EAAS,eAAC,yDAAY,CAAC,QAAM,CAAC,GAAG,EAAW,EAAU,GAC7E,CAAC,EAAQ,CADmE,CAIxE,EAAyB,aAAM,CACnC,GACE,EAAS,eAAC,yDAAY,CAAC,SAAM,EAAU,OAAO,GAAWE,IAAU,KACrE,CAAC,EAAQ,CADqE,CAAC,IACtE,EAIT,UAAC,GACC,MAAO,EAAM,mBACb,KAAK,iBACL,EACA,eAAgB,EAChB,iBAAkB,EAElB,mBAAC,GAAiB,GAAG,EAA0B,IAAK,EAAc,GAGxE,CAAC,EAED,EAAY,YAAc,EAM1B,GAAM,CAAC,EAAoB,EAAqB,CAC9C,EAAkD,GAqB9C,EAAkB,WAtBwB,CACqB,CAsBnE,CAAC,EAA0C,KACzC,GAAM,oBACJ,EACA,YAAW,cACX,GAAc,cACd,MACA,EACA,QAAO,EACP,GAAG,EACL,CAAI,EACE,EAAwB,EAAyB,GACjD,EAAY,QAAY,CAAC,GAAG,CADuC,CAErD,CAAE,KAAM,QAAS,IAAK,EAAW,GAAG,GACxD,MACE,UAAC,GAAmB,MAAO,cAAoB,WAA0B,EACtE,WACC,UAAkB,KAAjB,CACC,SAAO,EACN,GAAG,cACJ,EACA,IAAK,OACL,EAEA,mBAAC,IAAS,CAAC,IAAV,CAAe,GAAG,EAAa,IAAK,EAAc,IAGrD,UAAC,IAAS,CAAC,IAAV,CAAe,GAAG,EAAa,IAAK,EAAc,EAEvD,CAEJ,GAOI,EAAY,kBAKZ,EAAkB,YAAM,CAC5B,CAAC,EAA0C,KACzC,IAAM,EAAe,EAA2B,EAAW,EAAM,kBAAkB,EAC7E,EAAU,EAAsB,EAAW,EAAM,kBAAkB,EACnE,EAAwB,EAAyB,EAAM,kBAAkB,EACzE,EAAU,EAAa,MAAM,SAAS,EAAM,KAAK,EACjD,EAAW,EAAQ,UAAY,EAAM,SACrC,EAAc,CAAE,GAAG,UAAO,WAAS,CAAS,EAC5C,EAAM,QAAM,CAAuB,IAAI,EAC7C,OAAO,EAAQ,YACb,UAAkB,KAAjB,CACC,SAAO,EACN,GAAG,EACJ,UAAW,CAAC,EACZ,OAAQ,MACR,EAEA,mBAAC,GAAqB,GAAG,EAAa,IAAK,EAAc,IAG3D,UAAC,GAAqB,GAAG,EAAa,IAAK,EAAc,CAE7D,GAGF,EAAgB,YAAc,EAa9B,IAAM,EAAsB,YAAM,CAChC,CAAC,EAA8C,KAC7C,GAAM,oBAAE,QAAoB,EAAO,GAAG,EAAU,CAAI,EAC9C,EAAe,EAA2B,CADA,CACW,GACrD,EAAc,CAAE,KAAM,OADiD,CACxC,eAAgB,EAAM,QAAS,eAAgB,MAAU,EACxF,EAAkC,WAAtB,EAAa,KAAoB,EAAc,OACjE,MACE,UAAC,QAAM,CAAN,CACE,GAAG,EACH,GAAG,EACJ,IAAK,EACL,gBAAiB,IACX,EACF,EAAa,KADF,SACE,CAAe,GAE5B,EAFiC,gBAEpB,CAAiB,EAElC,GAFuC,GAUzCb,EAAO,EACPE,EAAO,mBC/SX,kBAA6E,+DCA/E,EAA0B,iBAAK,GAAL,iBAAK,mBAC/B,EAA8B,iBAAK,OAAL,iBAAK,mBACnC,cACA,wBACA,YAEA,MAAc,QAAY,MAC1B,4DACA,CAAG,EAUH,MATA,qBACA,OACA,WACA,CAAK,EAED,OAAe,MACnB,WACA,CAAK,EAEI,SAAa,kCACtB,ocCDM,EAAgB,gBAEhB,CAAC,EAAY,EAAe,EAAqB,CAAI,OAAgB,CAAe,OAAO,EAkB3F,CAAC,EAAoB,EAAgB,CAAI,OAAkB,CAAC,KAAvB,GAAgC,CAAC,EAAsB,EAC5F,CAAC,EAAuB,EAAuB,CACnD,EAA8C,GA2B1C,EAA8C,IAClD,GAAM,CACJ,KA9BiD,SA8BjD,CACA,QAAQ,eACR,WAAW,mBACX,EAAiB,uBACjB,EAAiB,YACjB,EACF,CAAI,EACE,CAAC,EAAU,EAAW,CAAU,QAAV,EAAU,CAAsC,IAAI,EAC1E,CAAC,EAAY,EAAa,CAAU,UAAV,CAAmB,CAAC,EAC9C,EAAuC,SAAO,IAC9C,CADmD,CAC1B,UAAO,GAQtC,EAR2C,IAEvC,CAOF,EAPS,KAAK,EAOd,UAAC,EAAW,SAAX,CAAoB,MAAO,EAC1B,mBAAC,GACC,MAAO,QACP,WACA,iBACA,iBACA,aACA,WACA,EACA,iBAAkB,EAClB,WAAkB,cAAY,IAAM,EAAc,GAAe,EAAY,CAAC,EAAG,CAAC,CAAC,EACnF,cAAqB,cAAY,IAAM,EAAc,GAAe,EAAY,CAAC,EAAG,CAAC,CAAC,EACtF,iCACA,4BAEC,GACH,CACF,CAEJ,EAEA,EAAc,YAAc,EAM5B,IAAM,EAAgB,gBAChB,EAA0B,CAAC,IAAI,EAC/B,EAAiB,sBACjB,EAAkB,uBAkBlB,EAAsB,aAC1B,CAAC,EAAwC,KACvC,GAAM,CACJ,sBACA,EAAS,QACT,EAAQ,2BACR,GAAG,EACL,CAAI,EACE,EAAU,EAAwB,EAAe,GACjD,EAAW,EAAc,GACzB,EAAmB,OADkB,CAClB,CAAuB,IAAI,EAC9C,EAA0B,SAA0B,IAAI,EACxD,EAA0B,SAA0B,IAAI,EACxD,EAAY,SAA6B,IAAI,EAC7C,EAAe,OAAe,CAAC,EAAc,EAAK,EAAQ,gBAAgB,EAC1E,EAAc,EAAO,KAAK,GAAG,EAAE,QAAQ,OAAQ,EAAE,EAAE,QAAQ,SAAU,EAAE,EACvE,EAAY,EAAQ,WAAa,EAEjC,YAAU,KACd,IAAM,EAAgB,QAKC,CAAjB,CADgB,IAAlB,EAAO,QAAgB,CACJ,CADW,MAAM,GAAU,EAAc,EAAG,EAAK,EAAM,OAAS,GAAG,CACnE,YAAI,UAAJ,EAAa,OAAM,CAC1C,CADuB,CAGvB,OADA,SAAS,iBAAiB,UAAW,GAC9B,IAAM,MADqC,GAC5B,oBAAoB,UAAW,EACvD,EAAG,CAAC,EAAO,EAEL,EAFI,EAD0D,OAG9D,CAAU,KACd,IAAM,EAAU,EAAW,QACrB,EAAW,EAAI,QACrB,GAAI,GAAa,GAAW,EAAU,CACpC,IAAM,EAAc,KAClB,GAAI,CAAC,EAAQ,iBAAiB,QAAS,CACrC,IAAM,EAAa,IAAI,YAAY,GACnC,EAAS,SADwC,IACxC,CAAc,GACvB,EAAQ,KADyB,WACzB,CAAiB,SAAU,CACrC,CACF,EAEM,EAAe,KACnB,GAAI,EAAQ,iBAAiB,QAAS,CACpC,IAAM,EAAc,IAAI,YAAY,GACpC,EAAS,UAD0C,GAC1C,CAAc,GACvB,EAAQ,MAD0B,UAC1B,CAAiB,QAAU,EACrC,CACF,EAEM,EAAuB,IACG,EAAQ,SAAS,EAAM,QAC3B,KADuD,GACvD,GAC5B,EAEM,EAA2B,KACT,CACjB,CADyB,SAAS,IACnB,KAD4B,aAAa,GACzC,GACtB,EASA,OANA,CAJmC,CAI3B,iBAAiB,UAAW,GACpC,EAAQ,MADuC,UACvC,CAAiB,WAAY,GACrC,EAAQ,eADiD,CACjD,CAAiB,cAAe,GACxC,EAAQ,MAD2C,UAC3C,CAAiB,eAAgB,GACzC,OAAO,cAD0D,EAC1D,CAAiB,OAAQ,GAChC,OAAO,CADoC,eACpC,CAAiB,QAAS,GAC1B,KACL,EAAQ,EAFmC,iBAEnC,CAAoB,UAAW,GACvC,EAAQ,MAD0C,aAC1C,CAAoB,WAAY,GACxC,EAAQ,eADoD,IACpD,CAAoB,cAAe,GAC3C,EAAQ,MAD8C,aAC9C,CAAoB,eAAgB,GAC5C,OAAO,cAD6D,KAC7D,CAAoB,OAAQ,GACnC,OAAO,CADuC,kBACvC,CAAoB,QAAS,EACtC,CACF,CACF,EAAG,CAAC,EAAW,EAAQ,CAH+B,eAGf,CAAC,EAExC,IAAM,EAAoC,cACxC,OAAC,kBAAE,EAAiB,GAAsD,EACrD,IACmB,IAAI,CADd,GAE1B,IAAM,EAAY,EAAU,IAAI,QAC1B,EAA0B,CAAC,KAAc,SA8rBhD,CAAsB,EAAwB,IAC/C,EAAuB,CAAC,EACxB,EAAS,SAAS,iBAAiB,EAAW,WAAW,aAAc,CAC3E,WAAY,IACV,IAAM,EAAiC,UAAjB,EAAK,SAAqC,WAAd,EAAK,YACvD,EAAS,UAAY,EAAK,QAAU,EAAsB,WAAW,CAAlB,UAAkB,CAI9D,EAAK,UAAY,EAAI,WAAW,cAAgB,WAAW,YAEtE,CAAC,EACD,KAAO,EAAO,SAAS,GAAG,EAAM,KAAK,EAAO,WAA0B,EAGtE,OAAO,CACT,EA9sB+E,GAAU,CAC/E,KAD8E,CAAC,aACxE,EACH,EACA,EAAwB,QAAQ,CACtC,CAAC,EACD,OACuB,eAAa,EAAmB,QAAQ,EAAI,GACjE,KAAK,CACT,EACA,CAAC,EAAQ,EA+CX,IA/CW,GAgDT,EA7CI,UAAU,KACd,IAAM,EAAW,EAAI,QAIrB,GAAI,EAAU,CACZ,IAAM,EAAgB,IACpB,IAAM,EAAY,EAAM,QAAU,EAAM,SAAW,EAAM,QAGzD,GAF+B,CAE3B,OAFa,EAAM,KAAiB,CAAC,EAE3B,KAQV,EAcI,EACA,EAtBN,IAAM,EAAiB,SAAS,cAC1B,EAAqB,EAAM,SAKjC,GAAI,EAJ2B,SAAW,GAIlB,EAAoB,QAC1C,IAAkB,UAAlB,EAA2B,MAAM,EACjC,CADA,KAEF,CAGA,IAAM,EAAmB,EAA4B,CAAE,iBAD9B,EAAqB,YAAc,UACY,CAAC,EACnE,EAAQ,EAAiB,UAAU,GAAe,IAAc,GAClE,EAAW,EAAiB,MAAM,CAD8C,CACtC,CAAC,CAAC,EAC9C,CADiD,CAC3C,eAAe,EAKrB,aACsB,YAAS,MAAM,aACf,YAAS,MAAM,CAEzC,CACF,EAIA,OADA,EAAS,iBAAiB,UAAW,GAC9B,IAAM,EAAS,IAD4B,eAC5B,CAAoB,UAAW,EACvD,CACF,EAAG,CAAC,EAAU,EAA4B,EAGxC,CALoE,EAKpE,QAAkB,KAAjB,CACC,IAAK,EAJgC,KAKhC,SACL,aAAY,EAAM,QAAQ,WAAY,GAEtC,QAFiD,CAEvC,GAGV,MAAO,CAAE,cAAe,EAAY,OAAY,MAAO,EAEtD,aACC,YAAC,CACC,IAAK,EACL,2BAA4B,KAI1B,EAH2B,EAA4B,CACrD,MAES,WAFS,OAES,GAD7B,CAAC,EAEH,IAOJ,UAAC,EAAW,KAAX,CAAgB,MAAO,EACtB,mBAAC,IAAS,CAAC,GAAV,CAAa,SAAU,GAAK,GAAG,EAAe,IAAK,EAAc,EACpE,EACC,GACC,YAAC,CACC,IAAK,EACL,2BAA4B,KAI1B,EAH2B,EAA4B,CACrD,MAES,WAFS,OAES,IAD7B,CAAC,EAEH,IACF,EAIR,GAGF,EAAc,YAAc,EAI5B,IAAM,EAAmB,kBAQnB,EAAmB,aACvB,CAAC,EAAO,KACN,GAAM,cAAE,6BAAc,EAA4B,GAAG,EAAW,CAAI,EAC9D,EAAU,EAAwB,EADwB,GAGhE,MACE,GAHoE,EAGpE,KAAC,IAAc,CAAd,CACC,eAAW,EACX,SAAU,EACT,GAAG,EACJ,IAAK,EAEL,MAAO,CAAE,SAAU,OAAQ,EAC3B,QAAS,UACP,IAAM,EAAqB,EAAM,cACE,YAAS,cACZ,CADY,EAAR,EAAkB,SAAS,EAAkB,GACjD,GAClC,GAGN,GAGF,EAAW,YAAc,EAMzB,EAbqE,EAa/D,EAAa,QAkBb,EAAc,aAClB,CAAC,EAAgC,KAC/B,GAAM,YAAE,EAAY,KAAM,cAAU,eAAa,EAAc,GAAG,EAAW,CAAI,EAC3E,CAAC,EAAM,EAAO,CAAI,IAAJ,CAAI,EAAoB,CAAC,CAC3C,KAAM,EACN,kBAAa,KACb,SAAU,EACV,CAF4B,MAEpB,CACV,CAAC,EACD,MACE,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAC/B,mBAAC,QACC,EACC,GAAG,EACJ,IAAK,EACL,QAAS,IAAM,EAAQ,IACvB,CAD4B,OACnB,OAAc,CAAC,EAAM,OAAO,EACrC,SAAU,OAAc,CAAC,EAAM,QAAQ,EACvC,aAAc,OAAoB,CAAC,EAAM,aAAc,IACrD,EAAM,cAAc,aAAa,aAAc,OAAO,CACxD,CAAC,EACD,YAAa,OAAoB,CAAC,EAAM,YAAa,IACnD,GAAM,GAAE,IAAG,EAAE,CAAI,EAAM,OAAO,MAC9B,EAAM,cAAc,aAAa,aAAc,MAAM,EACrD,EAAM,cAAc,MAAM,YAAY,6BAA8B,GAAI,OAAD,CAAC,IAAI,IAC5E,EAAM,cAAc,MAAM,YAAY,6BAA8B,GAAI,OAAD,CAAC,IAAI,GAC9E,CAAC,EACD,cAAe,OAAoB,CAAC,EAAM,cAAe,IACvD,EAAM,cAAc,aAAa,aAAc,QAAQ,EACvD,EAAM,cAAc,MAAM,eAAe,4BAA4B,EACrE,EAAM,cAAc,MAAM,eAAe,4BAA4B,EACrE,EAAM,cAAc,MAAM,eAAe,2BAA2B,EACpE,EAAM,cAAc,MAAM,eAAe,2BAA2B,CACtE,CAAC,EACD,WAAY,OAAoB,CAAC,EAAM,WAAY,IACjD,GAAM,GAAE,IAAG,EAAE,CAAI,EAAM,OAAO,MAC9B,EAAM,cAAc,aAAa,aAAc,KAAK,EACpD,EAAM,cAAc,MAAM,eAAe,4BAA4B,EACrE,EAAM,cAAc,MAAM,eAAe,4BAA4B,EACrE,EAAM,cAAc,MAAM,YAAY,4BAA6B,GAAI,GAAI,IAAL,CAAC,QACvE,EAAM,cAAc,MAAM,YAAY,4BAA6B,GAAI,OAAD,CAAC,IAAI,IAC3E,GAAQ,EACV,CAAC,EADc,CAEjB,CACF,CAEJ,GAGF,EAAM,YAAc,EASpB,GAAM,CAAC,EAA0B,EAA0B,CAAI,EAAmB,EAAY,CAC5F,UAAU,CACZ,CAAC,EAsBK,EAAkB,aACtB,CAAC,EAAoC,KACnC,GAAM,cACJ,EACA,OAAO,aACP,SAAU,OACV,EACA,0BACA,UACA,WACA,eACA,EACA,4BACA,aACA,EACA,GAAG,EACL,CAAI,EACE,EAAU,EAAwB,EAAY,GAC9C,CAAC,EAAM,EAAO,CAAU,GADkC,CAC5C,MAAU,CAAkC,IAAI,EAC9D,EAAe,OAAe,CAAC,EAAc,GAAU,EAAQY,IAC/D,CADmE,CAAC,EAC5C,OAAwC,IAAI,EACpE,EAAsB,SAAwC,IAAI,EAClE,EAAW,GAAgB,EAAQ,SACnC,EAA+B,SAAO,CAAC,EACvC,EAAmC,SAAO,GAC1C,EAAsB,GAD4B,KAC5B,CAAO,CAAC,EAC9B,YAAE,gBAAY,EAAc,CAAI,EAChC,EAAc,OAAc,CAAC,SAIb,CAAhB,CADE,gBAAiB,EAAM,SAAS,SAAS,cAAa,GACxC,YAAQ,WAAR,EAAkB,OAAM,EAAxB,GAEtB,CAAC,EAEK,EAHI,EAGe,YACvB,IACOC,GAAYA,IAAa,MAC9B,GADwC,IACjC,aAAa,EAAc,OAAO,EACzC,EAAuB,QAAU,IAAI,KAAK,EAAE,IAAX,GAAW,CAAQ,EACpD,EAAc,QAAU,OAAO,WAAW,EAAaA,GACzD,EACA,CAAC,EAAW,CAFqD,CAK7D,OAHQ,IAGR,CAAU,KACd,IAAM,EAAW,EAAQ,SACzB,GAAI,EAAU,CACZ,IAAM,EAAe,KACnB,EAAW,EAA2B,OAAO,QAC7C,MACF,EACM,EAAc,IAFP,CAGX,IAAM,EAAc,IAAI,KAAK,EAAE,QAAQ,EAAI,EAAuB,EAA9C,KAA8C,CAClE,EAA2B,QAAU,EAA2B,QAAU,EAC1E,OAAO,aAAa,EAAc,OAAO,QACzC,MACF,EAGA,KAJY,EAEZ,EAAS,iBAAiB,EAAgB,GAC1C,EAAS,MAD4C,UAC5C,CAAiB,EAAiB,GACpC,KACL,EAAS,EAF4C,iBAE5C,CAAoB,EAAgB,GAC7C,EAAS,MAD+C,aAC/C,CAAoB,EAAiB,EAChD,CACF,CACF,EAAG,CAAC,EAAQ,GAHoD,KAGpD,CAAU,EAAU,EAAS,EAAU,EAAW,EAKxD,MALuD,KAKvD,CAAU,KACV,GAAQ,CAAC,EAAQ,iBAAiB,QAAS,GAAW,EAC5D,EAAG,CAAC,EAAM,CAD0D,CAChD,EAAQ,iBAAkB,EAAW,EAEnD,MAFkD,KAElD,CAAU,KACd,IACO,IAAM,GADF,EAEV,CAAC,EAAY,EAAc,EAE9B,EAH6B,EAGvB,EAA4B,GAFL,MAEK,CAAQ,IACjC,EAAO,SAkSX,EAAuB,GAAwB,IAChD,EAAwB,CAAC,EAsB/B,OAnBA,MAFyB,KAAK,EAAU,UAAU,EAEvC,QAAQ,UAEjB,GADI,CACA,CADK,WAAa,EAAK,WAAa,EAAK,YAAa,GAAY,KAAK,EAAK,WAAW,EAwEtF,CADc,EAtED,GAuER,CAvEY,OAuEZ,GAAa,EAAK,aAvEH,CACvB,IAAM,EAAW,EAAK,YAAc,EAAK,QAAiC,SAAvB,EAAK,MAAM,QACxD,EAAwD,OAAtC,QAAQ,0BAEhC,GAAI,CAAC,EACH,GAAI,EAAY,CACd,EAFW,EAEL,EAAU,EAAK,QAAQ,sBACzB,GAAS,EAAY,GAAZ,CAAY,CAAK,EAChC,KADuC,CAErC,CADK,CACO,KAAK,GAAG,EAAuB,GAGjD,CAHqD,CAAC,EAQjD,CACT,EA1T2C,GAAQ,CAAJ,IACxC,CAAC,EAAK,EAAD,OAEH,EAAQ,EAAT,MAAS,CAAU,CAGrB,sBACG,aACC,UAAC,UAAD,MACE,EAEA,KAAK,SACL,YAAoB,eAAT,EAAwB,YAAc,SACjD,cAAW,GAEV,aAIL,UAAC,GAAyB,MAAO,EAAc,QAAS,EACrD,SAAS,eACR,UAAC,EAAW,SAAX,CAAoB,MAAO,EAC1B,mBAAkB,KAAjB,CACC,SAAO,EACP,gBAAiB,OAAoB,CAAC,EAAiB,KACjD,EAAS,+BAA+B,QAAS,KACrD,EAAQ,MADyD,wBACzD,CAA+B,SAAU,CACnD,CAAC,EAED,mBAAC,IAAS,CAAC,GAAV,CAEC,KAAK,SACL,YAAU,MACV,eAAW,EACX,SAAU,EACV,aAAY,EAAO,OAAS,SAC5B,uBAAsB,EAAQ,eAC7B,GAAG,EACJ,IAAK,EACL,MAAO,CAAE,WAAY,OAAQ,YAAa,OAAQ,GAAG,EAAM,OAC3D,UAAW,OAAoB,CAAC,EAAM,UAAW,IAC7B,SAAU,EAAxB,EAAM,YACV,KAAkB,EAAM,WAAW,EAC9B,EAAM,YAAY,kBAAkB,CACvC,EAAQ,+BAA+B,SAAU,EACjD,KAEJ,CAAC,EACD,IAHgB,UAGD,OAAoB,CAAC,EAAM,cAAe,IAClC,EAAG,EAApB,EAAM,SACV,EAAgB,QAAU,CAAE,EAAG,EAAM,QAAS,EAAG,EAAM,QAAQ,CACjE,CAAC,EACD,cAAe,OAAoB,CAAC,EAAM,cAAe,IACvD,GAAI,CAAC,EAAgB,QAAS,OAC9B,IAAM,EAAI,EAAM,QAAU,EAAgB,QAAQ,EAC5C,EAAI,EAAM,QAAU,EAAgB,QAAQ,EAC5C,GAAsB,CAAQ,EAAc,OAAO,CACnD,EAAoB,CAAC,OAAQ,OAAO,EAAE,SAAS,EAAQ,cAAc,EACrE,EAAQ,CAAC,OAAQ,IAAI,EAAE,SAAS,EAAQ,cAAc,EACxD,KAAK,IACL,KAAK,IACH,EAAW,EAAoB,EAAM,EAAG,CAAC,EAAI,EAC7C,EAAW,EAAmC,EAAd,EAAM,EAAG,CAAC,EAC1C,EAAwC,UAAtB,EAAM,YAA0B,GAAK,EACvD,EAAQ,CAAE,EAAG,EAAU,EAAG,CAAS,EACnC,EAAc,CAAE,cAAe,QAAO,CAAM,EAC9C,GACF,EAAc,QAAU,EACxB,EAtPG,IAoPoB,cAEwB,EAAa,EAAa,CACvE,IAD2B,MACjB,CACZ,CAAC,GACQ,EAAmB,EAAO,EAAQ,eAAgB,IAC3D,EAAc,QAAU,CADkD,CAE1E,EAF6E,mBAE7B,EAAc,EAAa,CACzE,GAD2B,OACjB,CACZ,CAAC,EACA,EAAM,OAAuB,kBAAkB,EAAM,SAAS,IACtD,KAAK,IAAI,CAAC,EAAI,GAAmB,KAAK,IAAI,CAAC,EAAI,IAAiB,CAGzE,EAAgB,QAAU,KAE9B,CAAC,EACD,YAAa,OAAoB,CAAC,EAAM,YAAa,IACnD,IAAM,EAAQ,EAAc,QACtB,EAAS,EAAM,OAMrB,GALI,EAAO,kBAAkB,EAAM,SAAS,GAAG,EACtC,sBAAsB,EAAM,SAAS,EAE9C,EAAc,QAAU,KACxB,EAAgB,QAAU,KACtB,EAAO,CACT,IAAM,EAAQ,EAAM,cACd,EAAc,CAAE,cAAe,QAAO,CAAM,EAEhD,EAAmB,EAAO,EAAQ,eAAgB,EAAQ,cAAc,EAExE,CADA,CAhRA,iBAiR8C,EAAY,EAAa,CACrE,KAD2B,IACjB,EACZ,CAAC,EAED,EAtRG,oBAwRD,EACA,EACA,CACE,EAJF,QAIY,CACZ,GAKJ,EAAM,iBAAiB,QAAS,GAAWC,EAAM,eAAe,EAAG,CACjE,MAAM,CACR,CAAC,CACH,CACF,CAAC,GACH,EACF,CACF,EACA,EAAQ,SACV,CACF,GACF,EAxH4B,IA0HhC,GASI,EAA8C,IAClD,GAAM,cAAE,WAAc,EAAU,GAAG,EAAc,CAAI,EAC/C,EAAU,EAAwB,EAAY,GADH,CAE1C,EAAoB,EAAqB,CAAU,GADM,OACN,EAAS,GAC7D,CAAC,CADiE,CACpD,EAAc,CAAU,WAAV,CAAmB,GAWrD,EAX0D,KAG1D,SAoNO,QAAa,uDAAW,KAAO,CAAD,CAC/B,EAAK,OAAc,CAAC,GAC1B,KADkC,CAClC,CAAe,CAAC,KACd,IAAI,EAAO,EACP,EAAO,EAEX,OADA,EAAO,OAAO,sBAAsB,IAAO,EAAO,OAAO,sBAAsB,EAAE,CAAE,CAC5E,KACL,OAAO,qBAAqB,GAC5B,CADgC,MACzB,qBAAqB,EAC9B,CACF,CAFoC,CAEjC,CAAC,EAAE,CACR,EA/Ne,IAAM,GAAsB,IAAI,CAAC,CAGxC,UAAU,KACd,IAAM,EAAQ,OAAO,WAAW,IAAM,GAAe,GAAO,CAAH,EAAO,EAChE,MAAO,IAAM,OAAO,aAAa,EACnC,EAAG,CADqC,CACnC,EAEE,EAAc,KACnB,UAAC,QAAM,CAAN,CAAO,SAAO,EACb,mBAAC,IAAc,CAAd,CAAgB,GAAG,EACjB,YACC,uBACG,YAAQ,MAAM,IAAE,GACnB,EAEJ,EACF,CAEJ,EAYM,EAAmB,aACvB,CAAC,EAAqC,KACpC,GAAM,cAAE,EAAc,GAAG,EAAW,CAAI,EACxC,MAAO,UAAC,IAAS,CAAC,IAAV,CAAe,GAAG,EAAY,IAAK,EAAc,CAC3D,EAGF,GAAW,YAbQ,EAaM,WAWzB,IAAM,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,GAAM,cAAE,EAAc,GAAG,EAAiB,CAAI,EAC9C,MAAO,MADmC,EACnC,EAAC,IAAS,CAAC,IAAV,CAAe,GAAG,EAAkB,IAAK,EAAc,CACjE,GAGF,EAAiB,YAZQ,EAYM,iBAmB/B,IAAM,EAAoB,aACxB,CAAC,EAAsC,KACrC,GAAM,SAAE,EAAS,GAAG,EAAY,CAAI,SAAJ,EAEnB,EAAT,EAAS,CAAK,EAQhB,CARmB,EAQnB,OAAC,WAAqB,EAAkB,SAAO,EAC7C,mBAAC,GAAY,GAAG,EAAa,IAAK,EAAc,EAClD,EANO,IAQX,GAGF,EAAY,YAhCQ,EAgCM,YAM1B,IAAM,EAAa,aAMb,EAAmB,aACvB,CAAC,EAAqC,KACpC,GAAM,cAAE,EAAc,GAAG,EAAW,CAAI,EAClC,EAAqB,EAA2B,EAAY,GAElE,MACE,GAH4E,EAG5E,KAAC,GAAqB,SAAO,EAC3B,mBAAC,IAAS,CAAC,OAAV,CACC,KAAK,SACJ,GAAG,EACJ,IAAK,EACL,QAAS,OAAoB,CAAC,EAAM,QAAS,EAAmB,OAAO,GACzE,CACF,CAEJ,GAGF,EAAW,YAAc,EASzB,IAAM,EAA6B,aAGjC,CAAC,EAA+C,KAChD,GAAM,cAAE,UAAc,EAAS,GAAG,EAAqB,CAAI,EAE3D,MACE,UAHqD,EAGpD,EAAS,CAAC,IAAV,CACC,oCAAkC,GAClC,gCAA+B,GAAW,OACzC,GAAG,EACJ,IAAK,GAGX,CAAC,EA8BD,SAAS,EAIP,EACA,EACA,GACW,eAAT,EAAS,CAAX,CACA,CACM,EAAgB,EAAO,cAAc,cACrC,EAAQ,IAAI,YAAY,EAAM,CAAE,SAAS,EAAM,YAAY,SAAM,CAAO,CAAC,EAC3E,GAAS,EAAc,GAAd,aAAc,CAAiB,EAAM,EAA0B,CAAE,MAAM,CAAK,CAAC,EAEtF,EACF,QADY,CACgB,EAAe,GAE3C,EAFgD,aAElC,CAAc,EAEhC,CAEA,EAJqC,EAI/B,EAAqB,SACzB,EACA,OACA,yDAAY,EAEN,EAAS,KAAK,IAAI,EAAM,CAAC,EACzB,EAAS,KAAK,IAAI,EAAM,CAAC,EACzB,EAAW,EAAS,QAC1B,SAAI,GAAsC,SAAS,CAAvB,EACnB,GAAY,EAAS,EAErB,CAAC,GAAY,EAAS,CAEjC,EA+CA,SAAS,EAAW,GAA2B,IACvC,EAA2B,SAAS,cAC1C,OAAO,EAAW,KAAK,GAErB,IAAkB,IAClB,EAAU,MAAM,EACT,SAAS,EAF4B,QAAO,GAEnC,GAAkB,GAEtC,CAEA,IAAM,EAAW,EACX,EAAW,EACXhB,EAAO,EACP,EAAQ,EACR,EAAc,EACd,GAAS,EACT,GAAQ,0UC56BR,EAAuB,CAC3B,QAAS,CACP,KAAM,UACN,OAAQ,SACR,QAAS,SACT,UAAW,SACb,EACA,MAAO,CACL,KAAM,QACN,OAAQ,aACR,QAAS,cACT,UAAW,MACb,EACA,aAAc,CACZ,KAAM,eACN,OAAQ,gBACR,QAAS,iBACT,UAAW,MACb,EACA,KAAM,IACR,EA4BM,EAA+B,uBAC/B,CAAC,EAAY,eAAE,wBAAe,oBAAuB,EAAkB,CAAC,CAC5E,OAAgB,CAAmB,GAC/B,CAAC,EAAiC,CAAI,OAAkB,CAAC,EAA8B,CAC3F,EACA,IAA2B,CAC5B,EACK,CAL2D,CAKhC,QAA2B,CAAC,EAEvD,CAAC,EAA6B,EAA8B,CAChE,EAAoE,GAuHhE,EAA6B,aACjC,OAzHgE,EAyHvD,CAwBP,CACA,GACA,IAkKmB,kCA1LjB,eACA,EACA,MAAO,gBACP,aACA,GAAa,WACb,UACA,eACA,EACA,YAAW,WACX,GAAW,eACX,EAAe,0BACf,GAAY,OACZ,OACA,EACA,mBACA,EAAO,mBAEP,EAAc,iBACd,iBACA,EAAiB,UACjB,cAAe,EACf,GAAG,EACL,CAvBA,EA0BM,EAAwB,EAAyB,GACjD,EAAY,QAAY,CAAC,GAAG,EACV,IAClB,CAAC,EAAU,CAHiE,EAK5E,EAAa,EAAqB,CAFvB,CAEqC,CAClD,EAAqB,EAAuC,CAC5D,KAEE,CAJgD,CAI1B,IAHoC,SAGpC,CAC1B,IAOE,GALEa,EADE,MAAM,QAAQA,GACRA,EAAM,CADO,EACP,CAAI,GAAkB,KAAK,EAAE,EAEnC,EAAiBA,EAFS,CAKhC,EAAY,CAHgB,IAKxB,EAAS,IAAI,OAAO,EAAW,MAAM,EAC3CA,EAAQA,EAAM,QAAQ,EAAQ,EAAE,CAClC,MAAW,IACTA,EAAQ,EAAkBA,EAAK,EAGjC,OAJ8B,EAIjB,MAAM,EAAE,CACvB,EACA,CAAC,EAAY,EAAiB,EAG1B,EAAwB,UAAQ,CAHN,GAIvB,QAAoB,EAAc,GAAa,MAAJ,CACjD,CAAC,EAAW,EAAc,EAEvB,CAAC,EAAO,EAAQ,CAAI,GAFE,EAEN,CAAI,CAAoB,CAAC,CAC7C,OAAQ,uBACR,KAAM,EACN,YAA6B,QAAO,EAAc,GAAgB,CAAC,EACnE,MAD8D,GAC9C,cACd,GAACA,MAAAA,EAAAA,KAAAA,EAAoB,EAAgBA,EAAM,KAAK,EAAE,CAAC,EACnD,CAAC,EAAa,CAElB,CAAC,EAGK,EAAW,OAAc,CAAa,QAIhB,EAmCF,IARY,MA2BE,EAkBrB,IA3EjB,OAAQ,EAAO,MAAM,IACd,WAAY,CACf,GAAM,OAAE,OAAO,EAAK,CAAI,EAClB,aAA2B,GAAG,EAAK,WAAG,QAC5C,GAAI,EAAM,EAAK,KAAY,YAEzB,EADa,SACF,CADE,KAA4B,KAAK,EAAe,EAAC,SAAhC,EAAmC,UAMnE,GAAa,IAAI,CAAb,EACF,OAGF,GAAI,EAAY,CACd,IAAM,EAAS,IAAI,OAAO,EAAW,MAAM,EAE3C,GADc,EAAK,QAAQ,EAAQ,EAAE,IACvB,EAEZ,IAFkB,EAItB,CAGA,GAAI,EAAM,QAAU,EAAW,KAAM,CAEnC,IAAMI,EAAW,CAAC,GAAG,EAAK,CAC1BA,CAAAA,CAD0B,EACZ,CAAI,EAClB,eAAS,CAAC,IAAM,EAASA,IAEzB,EADa,GADoB,CAAC,KAEvB,CADE,KAA4B,KAAK,EAAe,EAAC,WAAG,UAEjE,MACF,CAEA,IAAM,EAAW,CAAC,GAAG,EAAK,CAC1B,EAD0B,EACZ,CAAI,EAAJ,IAER,aAAyB,GAAG,GAAE,WAAG,QACvC,eAAS,CAAC,IAAM,EAAS,IACrB,IAD6B,CAAC,CAGhC,EADa,SADoB,CACpB,GACE,EAD0B,KAAK,EAAe,EAAC,SAAhC,EAAmC,gBAGjE,KAAe,OAAO,EAExB,MACF,CAEA,IAAK,aAAc,CACjB,GAAM,OAAE,SAAO,EAAO,CAAI,EAC1B,GAAI,CAAC,EAAM,EAAK,CACd,CADiB,CAAH,KAIhB,IAAM,EAAW,EAAM,OAAO,CAAC,EAAG,IAAM,IAAM,GACxC,EAD6C,MAC7C,KAA2B,GAAG,EAAK,SAAnB,EAAsB,QACtC,EAAW,eAA4B,KAAK,EAAe,GAAE,WAAG,SAEtE,eAAS,CAAC,IAAM,EAAS,IACV,IADkB,CAAC,QACN,CAAxB,EACF,EAAW,IACS,IADD,OACV,GAAkC,YAC3C,EAAW,GAEb,MACF,CAEA,GAL4B,CAKvB,QACH,GAAqB,GAAG,CAApB,EAAM,OACR,OAGoB,cAAlB,EAAO,QAA0B,UAA4B,GAArB,QAC1C,eAAS,CAAC,IAAM,EAAS,CAAC,CAAC,CAAC,EAC5B,aAAsB,GAAG,EAAC,WAAG,OAAO,GAEpC,EAAS,CAAC,CAAC,EAEb,MAGF,KAAK,QAAS,CACZ,GAAM,CAAE,MAAO,EAAY,CAAI,EACzBJ,EAAQ,EAAc,GAC5B,GAAI,CAACA,EACH,EAFqC,IAC3B,CAIZ,eAAS,CAAC,IAAM,EAASA,IACzB,EAD8B,CAAC,KAC/B,KAAsB,GAAGA,EAAM,OAAS,EAAC,SAA9B,EAAiC,OAAO,EACnD,MACF,CACF,CACF,CAAC,EAGK,EAA0B,SAAO,GACjC,OAD2C,IAC3C,CAAU,SAKV,EAJC,GAIL,SAJiB,CAIjB,EAAsB,kBAAS,QAAS,EAAW,MAAM,CACvD,EAAkB,QAAU,EAC5B,EAAS,EAAc,EAAM,KAAK,EAAE,CAAC,CAAC,EAE1C,EAAG,CAAC,EAAe,EAAU,EAAY,EAAM,EAE/C,CAF8C,GAExC,EAAuB,SAAyB,IAAI,EAEpD,GAAsB,SAAqC,IAAI,EAC/D,GAAgB,SAA8B,IAAI,EAClD,GAAe,OAAe,CAAC,EAAc,IAE7C,GAFoD,MAEpD,KAAwB,GAAG,EAAC,WAAG,QAC/B,GAAmB,cAAY,KACnC,IAAI,EACJ,GAAI,EAAM,OACmB,IAA3B,IAAM,wBAA6B,kBAAS,iBAAiB,UAAU,eAAe,EAClF,CA4fV,CA7fgG,OA4f3E,EA3fG,GA4fxB,IADsF,CACtF,EAAO,EAAS,KA5fyB,EA4fzB,CA5f4B,GA4fhB,SA3fpB,EAAc,EAElB,MAAW,EAAe,QACxB,CADiC,CACnB,EAAe,QAAQ,KAC5B,KACT,EAAc,GAAW,EADJ,EACI,EAG3B,eAAO,EAAe,IACxB,EAAG,CAAC,EAAM,GAAW,EAEf,GAAsB,EAFR,WAEQ,CAAY,KACtC,IAAM,EAAc,IACpB,OAD+B,GAC/B,EAAa,cAAc,CAC7B,EAAG,CAAC,GAAW,EAET,KAFQ,MAER,CAAU,KACd,IAAMK,EAAO,KACb,GAAIA,EAAM,CADc,IAEhB,EAAQ,IAAM,EAAS,CAAE,KAAM,QAAS,OAAQ,OAAQ,CAAC,EAE/D,OADAA,EAAK,iBAAiB,QAAS,GACxB,EAD6B,EACvBA,EAAK,oBAAoB,QAAS,EACjD,CACF,EAAG,CAAC,EAAU,GAAW,EAEzB,IAAM,CAFkB,EAEH,EAAM,KAAK,EAAE,EAC5B,GAAiB,SAAO,IACxB,GAAS,EAAW,GADgB,CAChB,CACpB,YAAU,KACd,IAAM,EAAgB,GAAS,QAC/B,GAAS,QAAU,GACf,IAAkB,IAIlB,GAAc,EAAM,KAJY,CAIN,GAAmB,EAAE,GAAX,IAAgB,EAAM,SAAW,QAAQ,GAC/E,KAAe,EAAM,KAAK,EAAE,CAAC,EAC7B,KAEJ,EAAG,CAAC,GAAe,EAAY,CAFb,EAE2B,GAAQ,EAAc,EAAM,EACzE,CADwE,GAClE,GAAa,OAAa,CAAC,EAEjC,MACE,UAAC,GACC,MAAO,QACP,gBACA,GACA,oBACA,eACA,EACA,iBACA,OACA,cACA,OACA,iBACA,gBACA,YACA,iBACA,cACA,EACA,4BACA,EAEA,mBAAC,EAAW,SAAX,CAAoB,MAAO,EAA6B,MAAO,EAC9D,mBAAC,EAAW,KAAX,CAAgB,MAAO,EACtB,mBAAkB,KAAjB,CACC,SAAO,EACN,GAAG,cACJ,EACA,IAAK,EAEL,mBAAW,KAAK,IAAf,CACE,GAAG,EACJ,KAAK,QACL,IAAK,GACL,QAAS,OAAoB,CAC3B,EACA,IACE,EAAM,eAAe,EAErB,EAAS,CAAE,KAAM,QAAS,MADN,CACa,CADP,cAAc,QAAQ,MAAM,CACT,CAAC,CAChD,YAGD,GACH,EACF,CACF,EACF,GAGN,GAoBI,EAAwC,aAG5C,SAASC,CAC+B,CACxC,GACA,gCAFE,EAA6B,GAAG,EAAM,CAAxC,EAGM,CAHkC,MAGhC,iBAAO,OAAgB,EAAK,CAAI,EACtC,kCACA,GAEI,EAAM,OAAe,CAAC,EAAgB,GAC5C,MACE,GAFsD,EAEtD,KAAC,SACC,WACA,EACA,MAAO,EAAM,KAAK,EAAE,EAAE,KAAK,EAC3B,aAAa,MACb,WAAW,EACX,eAAe,MACf,YAAY,MACZ,SAAS,MACT,YAAY,EACX,GAAG,EACJ,KAAK,SACL,UAAQ,GAGd,CAAC,EAgCK,EAAkC,aAGtC,SAASC,CAMT,CACA,GACA,UA6BI,+BAnCF,kBACA,EACA,MAAO,EACP,GAAG,EACL,CALA,EASM,CACJ,MAAO,EACP,aAAc,EACd,SAAU,EACV,SAAU,EACV,aAAc,EACd,UAAW,EACX,KAAM,EACN,KAAM,EACN,YAAa,EACb,KAAM,EACN,GAAG,EACL,CAAI,EAEE,EAAU,EACd,4BACA,GAEI,UAAE,gBAAU,iBAAe,aAAgB,EAAW,CAAI,EAC1D,EAAa,EAAc,GAC3B,EAAwB,EAAyB,GAEjD,EAAiB,SAAyB,IAAI,EAC9C,CAAC,EAAS,EAAU,CAAU,CAH8C,CAG9C,KAAV,GAAU,CAAkC,IAAI,EAEpE,UAAQ,EAAc,EAAU,EAAW,QAAQ,GAAW,EAGhE,EAH4D,MACtC,GAAqB,IAEtB,EAAQ,aAAwC,GAAG,CAA5B,EAAQ,MAAM,SAG5D,EAAc,EAAQ,YAAY,EAAK,EAGzC,IAAM,EAAmB,OAAe,CAAC,EAAc,EAAU,GAC3D,OADqE,CACrE,GAAO,EAAQ,MAAM,EAAK,IAAK,GAE/B,EAAiC,SAAsB,IAAI,EAC3D,YAAU,IACP,KACL,OAAO,aAAa,EAAyB,OAAQ,CACvD,EACC,CAAC,CAAC,EAEL,IAAM,EAAa,EAAQ,MAAM,KAAK,EAAE,EAAE,KAAK,EACzC,EAAsB,OAAK,CAAC,EAAW,OAAQ,CAAC,EAAG,EAAW,KAAO,CAAC,CAAC,EACvE,EAAc,GAAS,EAEvB,EACJ,KAAkB,EACd,EAAqB,EAAuC,CAC5D,OAEN,IAHkE,EAIhE,UAAC,EAAW,SAAX,CAAoB,MAAO,EAC1B,mBAAkB,KAAjB,CACE,GAAG,EACJ,SAAO,EACP,UAAW,CAAC,EAAQ,UAAY,EAChC,OAAQ,IAAU,EAEjB,gBAAC,YAAE,mBAAY,EAAiB,GACzB,EAAuB,EAAa,EAA6B,IAAV,EAC7D,MACE,UAAW,KAAK,MAAf,CACC,IAAK,EACL,KAAM,EAAQ,KACd,aAAY,oBAAa,EAAQ,CAAC,SAAsB,OAAf,EAAW,IAAI,EACxD,aAAc,EAAuB,EAAQ,aAAe,MAC5D,iBAAgB,EAAuB,OAAY,OACnD,gBAAe,EAAuB,OAAY,OAClD,yBAAwB,EAAuB,OAAY,OAC3D,gBAAe,EAAuB,OAAY,OAClD,gBAAW,WAAY,UACvB,UAAW,EACX,uBAAS,EAAY,QACrB,SAAU,EAAQ,SAClB,MAAO,EACP,cACA,uBAAqB,GACrB,mBAAkB,EACjB,GAAG,EACJ,QAAS,OAAoB,CAAC,EAAM,QAAU,IAC5C,EAAM,cAAc,OAAO,CAC7B,CAAC,EACD,MAAO,OAAoB,CAAC,EAAM,MAAO,IAElB,IAAI,CADJ,EAAM,cAAc,QAOvC,EAAc,QAAU,CACtB,KAAM,KACR,EAGA,EAAyB,QAAU,OAAO,WAAW,KACnD,EAAc,QAAU,IAC1B,EAAG,EAAE,EAET,CAAC,EACD,QAAS,OAAoB,CAAC,EAAM,QAAS,IAC3C,IAAM,EAAQ,EAAM,cAAc,MAC9B,EAAM,OAAS,GAAG,CAKpB,EAAM,eAAe,EACrB,EAAS,CAAE,KAAM,cAAS,CAAM,CAAC,EAErC,CAAC,EACD,SAAU,OAAoB,CAAC,EAAM,SAAU,IAC7C,IAAM,EAAQ,EAAM,OAAO,MAC3B,EAAM,eAAe,EACrB,IAAM,EAAS,EAAc,QAG7B,GAFA,EAAc,QAAU,KAEpB,EACF,MADU,CACF,EAAO,MAAM,IACd,MAIH,EAAS,CAAE,KAAM,mBAAc,EAAO,OAAQ,KAAM,CAAC,EACrD,MACF,KAAK,UAAW,CACd,GAAmB,QAAQ,CAAvB,EAAO,IAGT,OAGF,IAAM,EACW,cAAf,EAAO,MAAwB,EAAO,SAAW,EAAO,SACvC,UAAf,EAAO,KAAmB,EAC5B,EAAS,CAAE,KAAM,EADuB,MACd,OAAQ,WAAY,CAAC,EAE/C,EAAS,CAAE,KAAM,mBAAc,EAAO,OAAQ,EAAO,IAAK,EAE5D,MACF,CACA,QACE,MACJ,CAIF,GAAI,EAAM,OAAO,SAAS,MACxB,CAD+B,EACjB,KAAV,EAAc,CAChB,IAAI,EAAyC,YAC7C,GA+LX,CA/Le,SAAa,EAAM,WAAW,CA+LvC,KA/L0C,CACnC,IAAM,EAAY,EAAM,YAAY,UAClB,yBAAyB,CAAvC,EACF,EAAS,YACc,eAAe,CAA7B,IACT,EAAS,MAEb,CACA,EAAS,CAAE,KAAM,mBAAc,SAAO,CAAO,CAAC,CAChD,MACE,CADK,CACI,CAAE,KAAM,WAAY,KAAM,EAAO,cAAO,CAAM,CAAC,MAErD,CACL,IAAMC,EAAU,EAAM,aACtB,KAAkBA,EAAQ,KAAK,EAC/B,sBAAsB,KAChBA,EAAQ,cAAc,gBAAkBA,GAC1CA,EAAQ,KAD2C,CAC3C,CAAO,CAEnB,CAAC,CACH,CACF,CAAC,EACD,UAAW,OAAoB,CAAC,EAAM,UAAW,IAC/C,OAAQ,EAAM,KAAK,IACZ,QACL,IAAK,SACL,IAAK,YAGH,GAAI,KAFiB,EAAM,cAAc,MAEhB,CAEvB,GAAkB,SAAU,EAAxB,EAAM,IAAkB,OAG5B,GADiC,CAC7B,SADe,EAAM,CACT,EADS,EAAmB,EAAM,SAAW,EAAM,QAEjE,EAAS,CAAE,KAAM,QAAS,OAAQ,WAAY,CAAC,MAC1C,CACL,IAAMA,EAAU,EAAM,cACtB,sBAAsB,WACpB,SAAW,IAAW,KAAKA,EAAS,GAAE,WAAG,OAAO,CAClD,CAAC,CACH,CACF,MAOE,CAPK,CAOS,QAAU,CACtB,KAAM,UACN,IAAK,EAAM,IACX,QAAS,EAAM,QACf,QAAS,EAAM,SAIjB,EAAyB,QAAU,OAAO,WAAW,KACnD,EAAc,QAAU,IAC1B,EAAG,EAAE,EAGP,MAEF,KAAK,QACH,EAAM,eAAe,EACrB,EAAQ,cAAc,EACtB,MAEF,KAAK,YACL,IAAK,UACyB,cAAc,CAAtC,EAAQ,aAGV,EAAM,eAAe,EAEvB,MAGF,aAMe,IAqBS,EA1BtB,GAAI,EAAM,cAAc,QAAU,EAAM,IAAK,CAG3C,IAAMA,EAAU,EAAM,cACtB,EAAM,eAAe,EACrB,aAAsB,KAAKA,EAAS,EAAC,WAAG,OAAO,EAC/C,MACF,IAEE,EAAM,cAAc,OAEpB,EACyC,IAAvC,EAAM,cAAc,gBACgB,MAApC,EAAM,cAAc,cACpB,EAAM,cAAc,eAAe,CAErC,CACA,IAAM,EAAiB,EAAM,IAC7B,GAAI,EAAM,IAAI,OAAS,GAAmB,KAAK,CAAnB,EAAM,IAEhC,MACK,EAIL,IAAM,aAAuB,KAAK,EAAM,cAAe,EAAC,SAAtC,EAAyC,QACrD,aAAuB,GAAG,GAAE,WAAG,QACjC,IAAc,GAAa,EAAM,gBAAkB,IAIV,GAAG,CAA1C,EAAM,CAJsD,YAItD,CAAc,eACtB,EAAS,CAAE,KAAM,WAAY,KAAM,EAAgB,cAAO,CAAM,CAAC,EAEjE,EAAS,CACP,KAAM,WACN,KAAM,EACN,MAAO,EAAQ,QACf,CACF,CAAC,EAGH,EAAc,QAAU,CACtB,KAAM,UACN,IAAK,OACL,QAAS,EAAM,QACf,QAAS,EAAM,SAEjB,EAAyB,QAAU,OAAO,WAAW,KACnD,EAAc,QAAU,IAC1B,EAAG,EAAE,EAET,CACF,CAEJ,CACF,CAAC,EACD,cAAe,OAAoB,CAAC,EAAM,cAAe,QAGvC,EAFhB,EAAM,eAAe,EACrB,IAAM,EAAe,KAAK,IAAI,EAAO,GAErC,EADMA,MAAAA,CAAAA,EAAAA,EAAqB,GAD6B,EACd,CACxB,CADwB,SAAG,QAE/C,CAAC,GAGP,GACF,CACF,CAEJ,CAAC,EAwBD,SAAS,EAAiB,GACxB,OAAO,EAAM,QAAQ,MAAO,EAAE,CAChC,CAEA,SAAS,EAAW,GACb,IACD,EAAQ,EADE,WACF,CAAc,gBAAkB,EAG1C,OAHmD,qBAG5C,CAAsB,SAC3B,aAAQ,SAAR,SACF,CAAC,CADC,CAGF,EAAQ,MAAM,EAElB,+WCt3BM,EAAmB,aAGnB,CAAC,EAAyB,EAAqB,CAAI,OAAkB,CAAC,GAuBtE,CAAC,EAAoB,EAAoB,CAC7C,CAxBmD,CAwBH,GAU5C,EAAmB,UAXsB,CACmB,CAUzC,CACvB,CAAC,EAAqC,KACpC,GAAM,mBACJ,OACA,EAAO,YACP,kBACA,EAAkB,IAClB,GAAG,EACL,CAAI,EACE,CAAC,EAAY,EAAa,CAAU,UAAV,CAA6C,IAAI,EAC3E,CAAC,EAAU,EAAW,CAAU,QAAV,EAAU,CAA2C,IAAI,EAC/E,CAAC,EAAS,EAAU,CAAU,OAAV,GAAU,CAAgC,IAAI,EAClE,CAAC,EAAY,EAAa,CAAU,UAAV,CAAsD,IAAI,EACpF,CAAC,EAAY,EAAa,CAAU,UAAV,CAAsD,IAAI,EACpF,CAAC,EAAa,EAAc,CAAU,WAAV,CAAoB,EAChD,CAAC,EAAc,EAAe,CAAU,WAAS,CAAnB,EAC9B,CAAC,EAAmB,EAAoB,CAAU,YAAS,GAC3D,CAAC,CAD+D,CAC5C,EAAoB,CAAU,WAAS,IAC3D,CADgE,CAAxB,CACzB,MAAe,CAAC,EAAc,GAAU,EAAc,IAAI,CAAC,CAC9D,QAAY,CAAC,GAAG,MAGhC,UAAC,GACC,MAAO,OACP,EACA,IAAK,EACL,6BACA,EACA,WACA,iBAAkB,UAClB,EACA,gBAAiB,aACjB,EACA,mBAAoB,oBACpB,EACA,0BAA2B,aAC3B,EACA,mBAAoB,oBACpB,EACA,0BAA2B,EAC3B,oBAAqB,EACrB,qBAAsB,EAEtB,mBAAC,IAAS,CAAC,IAAV,CACC,IAAK,EACJ,GAAG,EACJ,IAAK,EACL,MAAO,CACL,SAAU,WAET,kCAAyC,CAAG,EAAc,KAC1D,mCAA0C,CAAG,EAAe,KAC7D,GAAG,EAAM,MACX,EACF,EAGN,GAGF,EAAW,YAAc,EAMzB,IAAM,EAAgB,qBAOhB,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,mBAAE,WAAmB,QAAU,EAAO,GAAG,EAAc,CAAI,EAC3D,EAAU,EAAqB,EAAe,GADS,EAE3C,SAAkC,GADiB,CACb,EAClD,EAAe,OAAe,CAAC,EAAc,EAAK,EAAQ,gBAAgB,EAChF,MACE,uBAEE,oBAAC,SACC,wBAAyB,CACvB,OAAQ,qLACV,EACA,UAEF,UAAC,IAAS,CAAC,IAAV,CACC,kCAAgC,GAC/B,GAAG,EACJ,IAAK,EACL,MAAO,CAYL,UAAW,EAAQ,kBAAoB,SAAW,SAClD,UAAW,EAAQ,kBAAoB,SAAW,SAClD,GAAG,EAAM,KACX,EASA,mBAAC,OAAI,IAAK,EAAQ,gBAAiB,MAAO,CAAE,SAAU,OAAQ,QAAS,OAAQ,WAC5E,EACH,IACF,CACF,CAEJ,GAGF,EAAmB,YAAc,EAMjC,IAAM,EAAiB,sBAOjB,EAA4B,aAChC,CAAC,EAA8C,KAC7C,GAAM,YAAE,EAAY,GAAG,EAAe,CAAI,EACpC,EAAU,EAAqB,EAAgB,EAAM,EADrB,eACsC,EACtE,2BAAE,4BAA2B,EAA0B,CAAI,EAC3D,EAAqC,eAAtB,EAAM,YAS3B,OAPM,YAAU,KACd,EAAe,EAA0B,IAAQ,GAA0B,GACpE,CADwE,IAE7E,EAAe,EAA0B,IAAS,CAAJ,EAA8B,EAC9E,GADmF,CAEjF,EAAc,EAA2B,EAA0B,EAE/C,UACtB,EADa,KACb,IAHoE,CAGpE,KAAC,GAA0B,GAAG,EAAgB,IAAK,aAAc,EAAwB,EACvF,WACF,EADU,KACV,UAAC,GAA2B,GAAG,EAAgB,IAAK,aAAc,EAAwB,EACvE,SAAjB,EAAQ,KACV,UAAC,GAAyB,GAAG,EAAgB,IAAK,aAAc,EAAwB,EACrE,WAAjB,EAAQ,KACV,UAAC,GAA4B,GAAG,EAAgB,IAAK,EAAc,EACjE,IACN,GAGF,EAAoB,YAAc,EASlC,IAAM,EAAiC,aAGrC,CAAC,EAAmD,KACpD,GAAM,YAAE,EAAY,GAAG,EAAe,CAAI,EACpC,EAAU,EAAqB,EAAgB,EAAM,EADrB,eACsC,EACtE,CAAC,EAAS,EAAU,CAAU,OAAV,GAAU,EAAS,GAuB7C,EAvBkD,KAE5C,YAAU,KACd,IAAM,EAAa,EAAQ,WACvB,EAAY,EAChB,GAAI,EAAY,CACd,IAAM,EAAqB,KACzB,OAAO,aAAa,GACpB,GAAW,EACb,CAF+B,CACd,EAEU,KACzB,EAAY,OAAO,WAAW,IAAM,GAAW,GAAQ,EAAQ,eAAe,CAChF,EAGA,OAFA,EAAW,iBAAiB,eAAgB,GAC5C,EAAW,aADmD,GACnD,CAAiB,eAAgB,GACrC,KACL,OAAO,GAFqD,SAErD,CAAa,GACpB,EAAW,IADkB,eAClB,CAAoB,eAAgB,GAC/C,EAAW,aADsD,MACtD,CAAoB,eAAgB,EACjD,CACF,CACF,EAAG,CAAC,EAAQ,SAH2D,CAG3D,CAAY,EAAQ,eAAe,CAAC,EAG9C,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAC/B,mBAAC,GACC,aAAY,EAAU,UAAY,SACjC,GAAG,EACJ,IAAK,GACP,CACF,CAEJ,CAAC,EAOK,EAAkC,aAGtC,CAAC,EAAoD,WACrD,GAAM,YAAE,EAAY,GAAG,EAAe,CAAI,EACpC,EAAU,EAAqB,EAAgB,EAAM,EADrB,eACsC,EACtE,EAAqC,eAAtB,EAAM,YACrB,EAAoB,EAAoB,IAAM,EAAK,YAAY,EAAG,GAAG,EACrE,CAAC,EAAO,EAAI,ECvRlB,CDuRsB,CAA0B,CAC9C,MCvRF,CDuRU,CACN,OAAQ,WACV,EACA,UAAW,CACT,WAAY,OACZ,cAAe,aACjB,EACA,YAAa,CACX,OAAQ,cACR,cAAe,MACjB,EACA,KAAM,CACJ,KAAM,SACN,OAAQ,YACR,cAAe,aACjB,CACF,CAAC,CCtSY,aAAW,CAAC,EAAwB,KAC/C,IAAM,EAAa,EAAQ,EAAK,CAAU,EAAK,CAC/C,EAD+C,KAC/C,QAAO,EAAa,CACtB,EDkRsC,CClRnC,UDgUH,EChUe,KDiUb,EA5BI,UAAU,KACd,GAAI,WAAkB,CACpB,IAAM,EAAY,OAAO,WAAW,IAAM,EAAK,MAAM,EAAG,EAAQ,eAAe,EAC/E,MAAO,IAAM,OAAO,aAAa,EACnC,CACF,EAAG,CAAC,EAAO,CAFmC,CAE3B,gBAAiB,EAAK,EAAD,EAElC,UAAU,KACd,IAAM,EAAW,EAAQ,SACnB,EAAkB,EAAe,aAAe,YAEtD,GAAI,EAAU,CACZ,IAAI,EAAgB,EAAS,EAAe,CACtC,EAAe,KACnB,IAAM,CAFoC,CAExB,EAAS,EAAe,CACN,IAAkB,IAEpD,EAAK,EAHmC,MAG3B,EACb,KAEF,EAAgB,CAClB,EAEA,OADA,CAJsB,CAIb,iBAAiB,SAAU,GAC7B,IAAM,EAAS,GAD0B,gBAC1B,CAAoB,SAAU,EACtD,CACF,EAAG,CAAC,EAAQ,IAFwD,IAExD,CAAU,EAAc,EAAM,EAAkB,EAG1D,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAwB,WAAV,EAC/B,mBAAC,GACC,aAAsB,WAAV,EAAqB,SAAW,UAC3C,GAAG,EACJ,IAAK,EACL,eAAgB,OAAoB,CAAC,EAAM,eAAgB,IAAM,EAAK,eAAe,CAAC,EACtF,eAAgB,OAAoB,CAAC,EAAM,eAAgB,IAAM,EAAK,eAAe,CAAC,GACxF,CACF,CAEJ,CAAC,EAOK,EAAgC,aAGpC,CAAC,EAAkD,KACnD,IAAM,EAAU,EAAqB,EAAgB,EAAM,iBAAiB,EACtE,YAAE,EAAY,GAAG,EAAe,CAAI,EACpC,CAAC,EAAS,EAAU,CAAU,IADE,GACZ,GAAU,EAAS,GACvC,EAAqC,eAAtB,EAAM,YACrB,EAAe,EAAoB,KACvC,GAAI,EAAQ,SAAU,CACpB,IAAM,EAAc,EAAQ,SAAS,YAAc,EAAQ,SAAS,YAC9D,EAAc,EAAQ,SAAS,aAAe,EAAQ,SAAS,aACrE,EAAW,EAAe,EAAc,EAC1C,CACF,EAAG,EAAE,EAKL,EAPuD,KAIvD,EAAkB,EAAQ,SAAU,GACpC,EAAkB,EAAQ,KADsB,EACtB,CAAS,GAGjC,SAH6C,CAG5C,GAAQ,CAAR,CAAS,QAAS,GAAc,EAC/B,mBAAC,GACC,aAAY,EAAU,UAAY,SACjC,GAAG,EACJ,IAAK,GACP,CACF,CAEJ,CAAC,EAUK,EAAmC,aAGvC,CAAC,EAAqD,KACtD,GAAM,aAAE,EAAc,WAAY,GAAG,EAAe,CAAI,EAClD,EAAU,EAAqB,EAAgB,EAAM,EADP,eACwB,EACtE,EAAiB,SAAsC,IAAI,EAC3D,EAAyB,SAAO,CAAC,EACjC,CAAC,EAAO,EAAQ,CAAU,KAAV,KAAU,CAAgB,CAC9C,QAAS,EACT,SAAU,EACV,UAAW,CAAE,KAAM,EAAG,aAAc,EAAG,WAAY,CAAE,CACvD,CAAC,EACK,EAAa,EAAc,EAAM,SAAU,EAAM,OAAO,EAGxD,EAAwE,CAC5E,GAAG,QACH,EACA,cAAe,EACf,UAAU,EAAQ,EAAa,GAAK,GAAa,CAAC,CAClD,cAAgB,GAAW,EAAS,QAAU,EAC9C,iBAAkB,IAAO,EAAiB,QAAU,EACpD,mBAAoB,GAAiB,EAAiB,QAAU,CAClE,EAEA,SAAS,EAAkB,EAAoB,GAAiB,OACvD,SA8eF,CACP,CACA,EACA,SACA,uDAAiB,MAEX,EAAc,EAAa,GAE3B,EAAS,GADK,EAAc,EAG5B,EAAgB,EAAM,MAFI,GAEJ,CAAU,aAAe,EAC/C,EAAgB,EAAM,UAAU,KAAO,EAAM,UAAU,WAFlC,EAE+C,CAFjC,GAGnC,EAAe,EAAM,QAAU,EAAM,SAG3C,OADoB,EAAY,CAAC,EAAe,EAAa,CADjC,CACoC,OAD5C,EAAgB,CAAC,CAC0D,CADvD,EAAY,CAAI,CAAgB,GAAf,EAAmB,CAAC,EAAzB,CAEjC,EACrB,EA9fwC,EAAY,EAAiB,EA6ftC,KA7fsC,CAAS,EAAO,EACnF,CADsF,MAGtF,cAAkC,GAE9B,UAAC,GACE,GAAG,EACJ,IAAK,EACL,sBAAuB,KACrB,GAAI,EAAQ,UAAY,EAAS,QAAS,CAExC,IAAM,EAAS,EADG,EAAQ,SAAS,WACgB,CAAX,CAAkB,EAAQ,GAAG,EACrE,EAAS,QAAQ,MAAM,UAAY,eAAqB,OAAN,EAAM,YAC1D,CACF,EACA,cAAgB,IACV,EAAQ,SAAU,IAAQ,SAAS,WAAa,EACtD,EACA,aAAc,IACR,EAAQ,UAAU,CACpB,EAAQ,SAAS,WAAa,EAAkB,EAAY,EAAQ,IAAG,CAE3E,IAKc,YAAY,CAA5B,EAEA,UAAC,GACE,GAAG,EACJ,IAAK,EACL,sBAAuB,KACrB,GAAI,EAAQ,UAAY,EAAS,QAAS,CAExC,IAAM,EAAS,EADG,EAAQ,SAAS,UACgB,EAAX,CACxC,EAAS,QAAQ,MAAM,UAAY,kBAAwB,OAAN,EAAM,SAC7D,CACF,EACA,cAAe,IACT,EAAQ,SAAU,IAAQ,SAAS,UAAY,EACrD,EACA,aAAc,IACR,EAAQ,SAAU,IAAQ,SAAS,UAAY,EAAkB,EAAU,CACjF,IAKC,IACT,CAAC,EAqBK,EAA6B,aAGjC,CAAC,EAAkD,KACnD,GAAM,OAAE,gBAAO,EAAe,GAAG,EAAe,CAAI,EAC9C,EAAU,EAAqB,EAAgB,EAAM,EADX,eAC4B,EACtE,CAAC,EAAe,EAAgB,CAAU,WAA8B,EACxE,EAAY,SAAuC,IAAI,EACvD,EAAc,OAAe,CAAC,EAAc,EAAK,EAAQ,kBAAkB,EAMjF,OACE,EALI,UAAU,KACV,EAAI,QAAS,GAAiB,iBAAiB,EAAI,OAAO,CAAC,CACjE,EAAG,CAAC,EAAI,CAAD,CAGL,UAAC,GACC,mBAAiB,aAChB,GAAG,EACJ,IAAK,QACL,EACA,MAAO,CACL,OAAQ,EACR,KAAsB,QAAhB,EAAQ,IAAgB,wCAA0C,EACxE,MAAO,UAAQ,IAAgB,wCAA0C,EACxE,iCAAwC,CAAG,EAAa,GAAS,EAAJ,GAC9D,GAAG,EAAM,OAEX,mBAAoB,GAAgB,EAAM,mBAAmB,EAAW,CAAC,EACzE,aAAc,GAAgB,EAAM,aAAa,EAAW,CAAC,EAC7D,cAAe,CAAC,EAAO,KACrB,GAAI,EAAQ,SAAU,CACpB,IAAM,EAAY,EAAQ,SAAS,WAAa,EAAM,OACtD,EAAM,cAAc,GAEhB,MAFyB,GA8a9B,CAAiC,EAAmB,EAAsB,iBA5apC,EAAW,IAC9C,EAAM,MADoD,GAAG,KACvD,CAAe,CAEzB,CACF,EACA,SAAU,KACJ,EAAI,SAAW,EAAQ,UAAY,GACrC,EAAc,CACZ,QAAS,CAFyC,CAEjC,SAAS,YAC1B,SAAU,EAAQ,SAAS,YAC3B,UAAW,CACT,KAAM,EAAI,QAAQ,YAClB,aAAc,EAAM,EAAc,WAAW,EAC7C,WAAY,EAAM,EAAc,YAAY,CAC9C,CACF,CAAC,CAEL,GAGN,CAAC,EAEK,EAA6B,aAGjC,CAAC,EAAkD,KACnD,GAAM,OAAE,gBAAO,EAAe,GAAG,EAAe,CAAI,EAC9C,EAAU,EAAqB,EAAgB,EAAM,EADX,eAC4B,EACtE,CAAC,EAAe,EAAgB,CAAU,WAA8B,EACxE,EAAY,SAAuC,IAAI,EACvD,EAAc,OAAe,CAAC,EAAc,EAAK,EAAQ,kBAAkB,EAMjF,OACE,EALI,UAAU,KACV,EAAI,QAAS,GAAiB,iBAAiB,EAAI,OAAO,CAAC,CACjE,EAAG,CAAC,EAAI,CAAD,CAGL,UAAC,GACC,mBAAiB,WAChB,GAAG,EACJ,IAAK,QACL,EACA,MAAO,CACL,IAAK,EACL,MAAuB,QAAhB,EAAQ,IAAgB,EAAI,OACnC,KAAsB,QAAhB,EAAQ,IAAgB,EAAI,OAClC,OAAQ,yCACP,kCAAyC,CAAG,EAAa,GAAS,EAAJ,GAC/D,GAAG,EAAM,OAEX,mBAAoB,GAAgB,EAAM,mBAAmB,EAAW,CAAC,EACzE,aAAc,GAAgB,EAAM,aAAa,EAAW,CAAC,EAC7D,cAAe,CAAC,EAAO,KACrB,GAAI,EAAQ,SAAU,CACpB,IAAM,EAAY,EAAQ,SAAS,UAAY,EAAM,OACrD,EAAM,cAAc,GAEhB,MAFyB,IAqXG,CAAmB,UACpD,EAAY,GAAK,EAAY,CACtC,EArX+C,EAAW,IAC9C,EAAM,MADoD,GAAG,KACvD,CAAe,CAEzB,CACF,EACA,SAAU,KACJ,EAAI,SAAW,EAAQ,UAAY,GACrC,EAAc,CACZ,QAAS,CAFyC,CAEjC,SAAS,aAC1B,SAAU,EAAQ,SAAS,aAC3B,UAAW,CACT,KAAM,EAAI,QAAQ,aAClB,aAAc,EAAM,EAAc,UAAU,EAC5C,WAAY,EAAM,EAAc,aAAa,CAC/C,CACF,CAAC,CAEL,GAGN,CAAC,EAaK,CAAC,EAAmB,EAAmB,CAC3C,EAA0C,GAkBtC,EAAgC,SAnBO,GAmBP,CAGpC,CAAC,EAAkD,KACnD,GAAM,mBACJ,QACA,WACA,EACA,iCACA,qBACA,wBACA,eACA,gBACA,WACA,EACA,GAAG,EACL,CAAI,EACE,EAAU,EAAqB,EAAgB,GAC/C,CAAC,EAAW,EAAY,CAAU,QAD8B,CACxC,CAAU,CAA4C,IAAI,EAClF,EAAc,OAAe,CAAC,EAAc,GAAU,EAAa,IAAI,CAAC,CACxD,SAAuB,IAAI,EAC3C,EAAgC,SAAe,EAAE,EACjD,EAAW,EAAQ,SACnB,EAAe,EAAM,QAAU,EAAM,SACrC,EAAoB,OAAc,CAAC,GACnC,EAA4B,OAAc,CADM,GAEhD,EAAe,EAAoB,EAAU,EAAE,EAErD,QAHsE,CAG7D,EAAiB,GAAwC,EACpD,SAAS,EAGN,CAAE,EAFL,EAAM,QAAU,EAAQ,QAAQ,KAExB,EADR,EAAM,QAAU,EAAQ,QAAQ,IACrB,CAEzB,CAwBA,OACE,EAnBI,UAAU,KACd,IAAM,EAAc,IAClB,IAAM,EAAU,EAAM,cACG,WAAW,SAAS,EAAO,GAC9B,EAAkB,EAAO,EACjD,EAEA,OADA,CAF6D,QAEpD,iBAAiB,QAAS,EAAa,CAAE,SAAS,CAAM,CAAC,EAC3D,IAAM,SAAS,oBAAoB,QAAS,EAAa,CAAE,SAAS,CAAM,CAAQ,CAC3F,EAAG,CAAC,EAAU,EAAW,EAAc,EAAkB,EAKnD,YAAU,CALwC,CAKb,CAAC,EAAO,EAA0B,EAE7E,EAAkB,EAAW,GAC7B,EAAkB,EAAQ,KADe,EACf,CAAS,EAHyC,CAM1E,SAH6C,CAG5C,GACC,MAAO,YACP,WACA,EACA,cAAe,OAAc,CAAC,GAC9B,UAD2C,OACzB,OAAc,CAAC,GACjC,aADiD,SAC1B,EACvB,mBAAoB,OAAc,CAAC,GAEnC,eAFqD,EAErD,EAAC,IAAS,CAAC,IAAV,CACE,GAAG,EACJ,IAAK,EACL,MAAO,CAAE,SAAU,WAAY,GAAG,EAAe,OACjD,cAAe,OAAoB,CAAC,EAAM,cAAe,IACnC,IAChB,EAAM,SACQ,EADG,MACG,CACd,MAFwB,WAExB,CAAkB,EAAM,SAAS,EACzC,EAAQ,QAAU,EAAW,sBAAsB,EAGnD,EAAwB,QAAU,SAAS,KAAK,MAAM,iBACtD,SAAS,KAAK,MAAM,iBAAmB,OACnC,EAAQ,SAAU,IAAQ,SAAS,MAAM,eAAiB,QAC9D,EAAiB,GAErB,CAAC,CAFyB,CAG1B,cAAe,OAAoB,CAAC,EAAM,cAAe,GACzD,YAAa,CAD4D,EAC5D,IAAoB,CAAC,EAAM,YAAa,IACnD,IAAM,EAAU,EAAM,OAClB,EAAQ,kBAAkB,EAAM,SAAS,GAAG,EACtC,sBAAsB,EAAM,SAAS,EAE/C,SAAS,KAAK,MAAM,iBAAmB,EAAwB,QAC3D,EAAQ,SAAU,IAAQ,SAAS,MAAM,eAAiB,IAC9D,EAAQ,QAAU,IACpB,CAAC,GACH,EAGN,CAAC,EAMK,EAAa,kBAWb,EAAwB,aAC5B,CAAC,EAA0C,KACzC,GAAM,YAAE,EAAY,GAAG,EAAW,CAAI,EAChC,EAAmB,EAAoB,EADX,EAC6B,iBAAiB,EAChF,MACE,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAAiB,SAChD,mBAAC,GAAoB,IAAK,EAAe,GAAG,EAAY,EAC1D,CAEJ,GAMI,EAA4B,aAChC,CAAC,EAA8C,KAC7C,GAAM,mBAAE,QAAmB,EAAO,GAAG,EAAW,CAAI,EAC9C,EAAoB,EAAqB,EADC,GAE1C,EAAmB,EAAoB,EAAY,GACnD,KAFsE,SACF,SAClE,EAAsB,CAAI,EAC5B,EAAc,OAAe,CAAC,EAAc,GAChD,EAAiB,cAAc,IAAI,EAES,SAAmB,MAAS,EACpE,EAAoB,EAAoB,KACxC,EAAgC,SAAS,CAC3C,EAAgC,QAAQ,EACxC,EAAgC,QAAU,OAE9C,EAAG,GAAG,EA0BN,OAxBM,YAAU,KACd,IAAM,EAAW,EAAkB,SACnC,GAAI,EAAU,CAQZ,IAAM,EAAe,KACnB,IACK,EAAgC,SAAS,CAE5C,EAHgB,OAGgB,CADf,EACyB,EADW,GAErD,IAEJ,EAGA,OAFA,IACA,CAN8E,CAMrE,GAJiB,aAGJ,CACI,SAAU,GAC7B,IAAM,EAAS,GAD0B,gBAC1B,CAAoB,SAAU,EACtD,CACF,EAAG,CAAC,EAAkB,IAF8C,IAE9C,CAAU,EAAmB,EAAsB,EAGvE,UAAC,IAAS,CAAC,EAH2D,CAG3D,CAAV,CACC,aAAY,EAAiB,SAAW,UAAY,SACnD,GAAG,EACJ,IAAK,EACL,MAAO,CACL,MAAO,uCACP,OAAQ,wCACR,GAAG,GAEL,qBAAsB,OAAoB,CAAC,EAAM,qBAAsB,IAErE,IAAM,EADQ,EAAM,OACI,sBAAsB,EACxC,EAAI,EAAM,QAAU,EAAU,KAC9B,EAAI,EAAM,QAAU,EAAU,IACpC,EAAiB,mBAAmB,GAAE,IAAG,CAAE,CAAC,CAC9C,CAAC,EACD,YAAa,OAAoB,CAAC,EAAM,YAAa,EAAiB,gBAAgB,GAG5F,GAGF,EAAgB,YAAc,EAM9B,IAAM,EAAc,mBAKd,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,IAAM,EAAU,EAAqB,EAAa,EAAM,iBAAiB,EACnE,GAA2B,EAAQ,EAAQ,YAAc,EAAQ,YAEvE,MAAO,WADW,CACC,CADO,MAAqB,EAC5B,UAAC,GAAsB,GAAG,EAAO,IAAK,EAAc,EAAK,IAC9E,GAGF,EAAiB,YAAc,EAO/B,IAAM,EAA6B,aAGjC,CAAC,EAA+C,KAChD,GAAM,mBAAE,EAAmB,GAAG,EAAY,CAAI,EACxC,EAAU,EAAqB,EAAa,CADR,EAEpC,CAAC,EAAO,EAAQ,CAAU,KAAV,GAD6C,EACnC,CAAS,CAAC,EACpC,CAAC,EAAQ,EAAS,CAAU,MAAV,IAAU,CAAS,CAAC,EACtC,GAAU,EAAQ,GAAS,EAAM,CAcvC,OAZA,EAAkB,EAAQ,WAAY,WACpC,IAAMC,EAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAiB,mBAAR,EAAoB,eAAgB,EACnD,EAAQ,qBAAqBA,GAC7B,EAAUA,EADyB,CAEpC,EAED,EAHkB,EAGQ,WAAY,WACpC,IAAMC,EAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAgB,mBAAR,EAAoB,cAAe,EACjD,EAAQ,oBAAoBA,GAC5B,EAASA,CADwB,CAEnC,CAAC,EAEM,CAHS,CAId,UAAC,IAAS,CAAC,IAAV,CACE,GAAG,EACJ,IAAK,EACL,MAAO,CACL,eACA,EACA,SAAU,WACV,MAAuB,QAAhB,EAAQ,IAAgB,EAAI,OACnC,KAAsB,QAAhB,EAAQ,IAAgB,EAAI,OAClC,OAAQ,EACR,GAAG,EAAM,KACX,IAEA,IACN,CAAC,EAID,SAAS,EAAM,GAAgB,OACtB,EAAQ,SAAS,EAAO,EAAE,EAAI,CACvC,CAEA,SAAS,EAAc,EAAsB,GAAqB,IAC1D,EAAQ,EAAe,EAC7B,OAAO,MAAM,GAAS,EAAJ,CACpB,CAEA,SAAS,EAAa,GAAc,IAC5B,EAAQ,EAAc,EAAM,SAAU,EAAM,OAAO,EACnD,EAAmB,EAAM,UAAU,aAAe,EAAM,UAAU,WAGxE,OAAO,KAAK,IAAI,CAFG,EAAM,UAAU,KAAO,GAAoB,EAEnC,EAAE,CAC/B,CAoBA,SAAS,EAAyB,EAAmB,SAAc,uDAAiB,MAC5E,EAAc,EAAa,GAC3B,EADgC,EACP,UAAU,aAAe,EAAM,UAAU,WAClE,EAAY,EAAM,UAAU,KAAO,EACnC,EAAe,EAAM,QAAU,EAAM,SAGrC,EAAwB,OAAK,CAAC,EADH,QAAR,CACsB,CADN,CAAC,EAAG,EAAY,CAAI,CAAgB,GAAf,EAAmB,CAAC,EACC,CAEnF,OAAO,EADyB,CAAC,EAAG,EAAY,CAAG,CAAC,EAHhC,EAAY,EAGmC,EAChD,EACrB,CAGA,SAAS,EAAY,EAAkC,GAAmC,EAJhD,KAKjC,IACL,GAAI,EAAM,CAAC,IAAM,EAAM,CAAC,GAAK,EAAO,CAAC,IAAM,EAAO,CAAC,EAAG,OAAO,EAAO,CAAC,EACrE,IAAM,GAAS,EAAO,CAAC,EAAI,EAAO,KAAO,EAAM,CAAC,EAAI,EAAM,IAC1D,OAAO,EAAO,CAAC,EAAI,GAAS,EAAQ,EAAM,EAAC,CAC7C,CACF,CAQA,IAAM,EAA4B,SAAC,OAAmB,yDAAU,KAAO,CAAD,CAChE,EAAe,CAAE,KAAM,EAAK,WAAY,IAAK,EAAK,WAClD,EAAM,EASV,OARC,SAAS,IACR,GADe,CACT,EAAW,CAAE,KAAM,EAAK,WAAY,IAAK,EAAK,WAC9C,EAAqB,EAAa,OAAS,EAAS,KACpD,EAAmB,EAAa,MAAQ,EAAS,QAC7B,GAAkB,KAC5C,EAAe,EADqC,EAE9C,OAAO,sBAAsB,GACrC,CADyC,EAElC,IAAM,OAAO,qBAAqB,EAC3C,CAD8C,CAG9C,SAAS,EAAoB,EAAsB,GAAe,IAC1D,EAAiB,OAAc,CAAC,GAChC,EAAyB,GADe,KACf,CAAO,CAAC,EAEvC,OADM,YAAU,IAAM,IAAM,OAAO,aAAa,EAAiB,OAAO,EAAG,CAAC,CAAC,EAChE,cAAY,KACvB,OAAO,aAAa,EAAiB,OAAO,EAC5C,EAAiB,QAAU,OAAO,WAAW,EAAgB,EAC/D,EAAG,CADiE,EAChD,EAAM,CAC5B,CAEA,CAH2B,QAGlB,EAAkB,EAA6B,GAAsB,IACtE,EAAe,OAAc,CAAC,GACpC,KAD4C,CAC5C,CAAe,CAAC,KACd,IAAI,EAAM,EACV,GAAI,EAAS,CAQX,IAAM,EAAiB,IAAI,eAAe,KACxC,qBAAqB,GAAG,EAClB,OAAO,sBAAsB,EACrC,CAAC,EAED,OAHiD,EAElC,QAAQ,GAChB,IADuB,CAE5B,OAAO,qBAAqB,GAAG,EAChB,UAAU,EAC3B,CACF,CACF,EAAG,CAHmC,EAGzB,EAAa,CAC5B,CAIA,IAAM,EAAO,EACP,EAAW,EACX,EAAY,EACZ,EAAQ,EACR,EAAS,oXEt+BT,EAAe,UAGf,CAAC,EAAsB,EAAkB,CAAI,OAAkB,CAAC,EAAc,CAClF,IAD6C,CAE7C,wBAAsB,CACvB,EACK,EAA2B,QAA2B,CAAC,EACvD,EAAsB,4BAAsB,CAAC,EAO7C,CAAC,EAAiB,EAAiB,CACvC,EAA0C,GAUtC,EAAgB,OAVkC,KAUlC,CACpB,CAAC,EAAkC,KACjC,GAAM,gBAAE,EAAgB,cAAc,iBAAc,OAAK,GAAO,EAAM,GAAG,EAAa,CAAI,EACpF,EAAwB,EAAyB,GACjD,CAFgF,CAEpE,QAAY,CAAC,GAAG,MAEhC,UAAC,GAAgB,MAAO,cAAgB,EAA0B,IAAK,EACrE,mBAAkB,KAAjB,CACC,SAAO,EACN,GAAG,cACJ,EACA,IAAK,OACL,EAEA,mBAAC,IAAS,CAAC,IAAV,CACC,KAAK,UACL,mBAAkB,EAClB,IAAK,EACJ,GAAG,EACJ,IAAK,GACP,EACF,CACF,CAEJ,EAGF,GAAQ,YAAc,EAMtB,IAAM,EAAiB,mBAMjB,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,GAAM,gBAAE,EAAgB,GAAG,EAAe,CAAI,EACxC,EAAU,EAAkB,EAAgB,GAClD,CAF0C,KAGxC,KAF8D,GAE9D,EAAoB,IAAnB,CACC,YAAa,iBAAQ,YAA+B,WAAa,aAChE,GAAG,EACJ,IAAK,GAGX,GAGF,EAAiB,YAAc,EAY/B,IAAM,EAAsB,aAC1B,CAAC,EAAwC,KACvC,GAAM,gBAAE,EAAgB,GAAG,EAAY,CAAI,EACrC,EAAwB,EAAyB,GADhB,MAGrC,KAFmE,GAEnE,EAAkB,KAAjB,CAAsB,SAAO,EAAE,GAAG,EAAuB,UAAW,CAAC,EAAM,SAC1E,mBAAC,IAAS,CAAC,OAAV,CAAiB,KAAK,SAAU,GAAG,EAAa,IAAK,EAAc,EACtE,CAEJ,GAGF,EAAc,YAlBM,EAkBQ,cAY5B,IAAM,EAAoB,aACxB,CAAC,EAAsC,KACrC,GAAM,gBAAE,EAAgB,GAAG,EAAU,CAAI,EACnC,EAAwB,EAAyB,CADlB,EAErC,MACE,KAFmE,GAEnE,EAAkB,KAAjB,CAAsB,SAAO,EAAE,GAAG,EAAuB,WAAS,EACjE,mBAAC,IAAS,CAAC,EAAV,CACE,GAAG,EACJ,IAAK,EACL,UAAW,OAAoB,CAAC,EAAM,UAAW,IAC7B,IAAK,EAAnB,EAAM,KAAa,EAAM,cAAc,MAAM,CACnD,CAAC,GACH,CACF,CAEJ,GAGF,EAAY,YAxBM,EAwBQ,YAM1B,IAAM,EAAoB,qBAOpB,EAA2B,aAI/B,CACE,EACA,KAEA,GAAM,gBAAE,EAAgB,GAAG,EAAiB,CAAI,EAC1C,EAAU,EAAkB,EAAmB,GAC/C,EAAmB,CAFmB,CAEC,GAC7C,IAFmE,EAGjE,KAFyD,GAEzD,EAAsB,OAArB,CACC,mBAAkB,EAAQ,YAC1B,IAAK,EAAQ,IACZ,GAAG,EACH,GAAG,EACJ,IAAK,EACL,aAAa,GAGnB,GAGF,EAAmB,YAAc,EAYjC,IAAM,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,gBAAE,EAAgB,GAAG,EAAgB,CAAI,EACzC,EAAmB,EAAoB,GACvC,EAAQ,CAAE,CAF2B,OACgB,OAC3B,EAAM,gBAEtC,MACE,UAAC,GAAc,SAAO,EAAE,GAAG,EACzB,mBAAsB,OAArB,CAA2B,GAAG,EAAmB,GAAG,EAAiB,IAAK,EAAc,EAC3F,CAEJ,GAGF,EAAkB,YApBO,EAoBO,kBAIhC,IAAMvB,EAAO,EACP,EAAY,EACZ,EAAS,EACT,EAAO,EACP,EAAc,EACd,EAAa,sHCrNb,EAAO,SAqBP,EAAe,aAAuC,CAAC,EAAO,KAClE,GAAM,CAAE,QAAS,iBAAa,kBAAgB,EAAiB,GAAG,EAAY,CAAI,EAE5E,CAAC,EAAS,EAAU,CAAI,OAAoB,CAAC,CACjD,KAAM,EACN,SAAU,EACV,qBAAa,EACb,OAAQ,CACV,CAAC,EAED,IAJiC,EAK/B,UAAC,IAAS,CAAC,OAAV,CACC,KAAK,SACL,eAAc,EACd,aAAY,EAAU,KAAO,MAC7B,gBAAe,EAAM,SAAW,GAAK,OACpC,GAAG,EACJ,IAAK,EACL,QAAS,OAAoB,CAAC,EAAM,QAAS,KACtC,EAAM,UAAU,EACR,CAAC,EAEhB,CAAC,GAGP,CAL6B,EAO7B,EAAO,YAAc,EAIrB,IAAM,EAAO,sOChDP,EAAc,SAGd,CAAC,EAAqB,EAAiB,CAAI,OAAkB,CAAC,GAS9D,CAAC,EATsC,EASN,CAAI,EAAwC,GAM7E,EAAe,MANyE,MAMzE,CACnB,CAAC,EAAiC,KAChC,GAAM,eAAE,EAAe,GAAG,EAAY,CAAI,EACpC,CAAC,EAAoB,EAAqB,CAAU,CADpB,CACoB,SAA6B,MAAM,CAA7C,CAChD,MACE,UAAC,GACC,MAAO,qBACP,EACA,2BAA4B,EAE5B,mBAAC,IAAS,CAAC,KAAV,CAAgB,GAAG,EAAa,IAAK,EAAc,GAG1D,GAGF,EAAO,YAAc,EAMrB,IAAM,EAAa,cAQb,EAAoB,aACxB,CAAC,EAAsC,KACrC,GAAM,eAAE,MAAe,wBAAK,EAAwB,KAAO,CAAD,CAAI,GAAG,EAAW,CAAI,EAC1E,EAAU,EAAiB,EAAY,GACvC,EAAqB,QAD+B,CAoErD,CACP,EAC8B,qBAA5B,cAAgB,EAAY,CAA9B,CACA,CACM,EAAa,OAAa,CAAC,EAC3B,EAAiB,SAAgC,IAAI,EACrD,EACJ,GACK,CADD,CACU,EAFD,IACI,CACH,EAAS,CACrB,EAAS,QAAU,IAAI,OAAO,OAEzB,EAAS,SAJQ,KAOpB,CAAC,EAAe,EAAgB,CAAU,WAA6B,EAAvC,EACpC,EAAqB,EAAO,GAAG,CA+BjC,MA5BA,OAAe,CAAC,KACd,EAAiB,EAAqB,EAAO,GAAG,CAAC,CAChD,CAAC,EAAO,EAAI,CAAD,CAEd,OAAe,CAAC,KACd,IAAM,EAAe,GAAgC,KACnD,EAAiB,EACnB,EAEA,EAHyB,CAGrB,CAAC,EAAO,OAEZ,IAAM,EAAa,EAAa,QAAQ,EAClC,EAAc,EAAa,OAAO,EAUxC,OATA,EAAM,iBAAiB,OAAQ,GAC/B,EAAM,KADmC,WACnC,CAAiB,QAAS,GAC5B,IACF,EAAM,EAFmC,QACvB,IACZ,CAAiB,GAErB,UAAiC,OAA1B,IACT,EAAM,YAAc,GAGf,KACL,EAAM,oBAAoB,OAAQ,GAClC,EAAM,KADsC,cACtC,CAAoB,QAAS,EACrC,CACF,EAAG,CAAC,EAAO,EAAa,CAF0B,CAEX,EAEhC,CACT,EAlHqD,EAAK,GAChD,EAA4B,KAD8B,CAC9B,CAAc,CAAC,IAC/C,EAAsB,GACtB,EAAQ,CADoB,yBACpB,CAA2B,EACrC,CAAC,EAQD,CAT2C,KAG3C,OAAe,CAAC,KACa,QAAQ,CAA/B,GACF,EAA0B,EAE9B,EAAG,CAAC,EAAoB,EAA0B,EAEpB,OAJkB,IAIzC,EACL,UAAC,IAAS,CAAC,IAAV,CAAe,GAAG,EAAY,IAAK,MAAc,EAAU,EAC1D,IACN,GAGF,EAAY,YAAc,EAM1B,IAAM,EAAgB,iBAOhB,EAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,eAAE,UAAe,EAAS,GAAG,EAAc,CAAI,EAC/C,EAAU,EAAiB,EAAe,GAC1C,CAAC,EAAW,EAAY,CAAU,IADqB,KAC/B,CAAU,CAAqB,MAAS,GAArB,GASjD,OAPM,YAAU,KACd,GAAgB,SAAZ,EAAuB,CACzB,IAAM,EAAU,OAAO,WAAW,IAAM,GAAa,GAAO,CAAH,EACzD,IADmE,EAC5D,IAAM,OAAO,aAAa,EACnC,CACF,EAAG,CAAC,CAFwC,CAEhC,EAEL,GAFI,WAES,EAAQ,mBAC1B,UAAC,IAAS,CAAC,KAAV,CAAgB,GAAG,EAAe,IAAK,EAAc,EACpD,IACN,GAOF,SAAS,EAAqB,EAAgC,GAAkC,OAC9F,EAGK,EAHD,CAMA,EANQ,GAMF,GAAQ,IAChB,CADqB,CACf,IAAM,GAEP,EAAM,UAAY,EAAM,aAAe,EAAI,SAAW,WALpD,QAHA,MASX,CAfA,EAAe,YAAc,EAkE7B,IAAM,EAAO,EACP,EAAQ,EACR,EAAW,umBC7JX,EAAuB,iBAEvB,CAAC,EAAY,EAAe,EAAqB,CAAI,OAAgB,CAGzE,GAEI,CAAC,EAAsB,EAAyB,EALC,CAMrD,OAAgB,CAA4B,CAHxB,EAMhB,CAAC,EAA6B,EAAyB,CAAI,OAAkB,CACjF,EACA,CANmF,EAM3D,EAA+B,EA6BnD,CAAC,EAA4B,EAAwB,CACzD,EAAwD,GAEpD,CAAC,EAAyB,EAAyB,CAAI,EAE1D,GAwBG,EAAuB,GA1D4B,CA8BqB,QA4BjD,CAC3B,CAAC,CAzBoB,CAyBqB,KACxC,GAAM,uBACJ,EACA,MAAO,gBACP,eACA,gBACA,EAAgB,sBAChB,EAAoB,IACpB,cAAc,iBACd,EACA,GAAG,EACL,CAAI,EACE,CAAC,EAAgB,EAAiB,CAAU,WAAuC,GAAjD,CAAqD,EACvF,EAAc,OAAe,CAAC,EAAc,GAAU,EAAkB,IAAI,CAAC,CACjE,QAAY,CAAC,GAAG,EACP,SAAO,CAAC,EAC7B,EAAsB,SAAO,CAAC,EAC9B,EAA0B,SAAO,CAAC,EAClC,CAAC,EAAe,EAAgB,CAAU,YAAS,CAAnB,EAChC,CADuD,EAC/C,EAAQ,CAAI,OAAoB,CAAC,CAC7C,KAAM,EACN,SAAU,IAER,IAAM,EAAuB,EAAoB,EADxB,KAAVa,GAIb,OAAO,aAAa,EAAkB,OAAO,EACzC,GAAsB,GAAiB,KAAK,OAEzC,GAFmB,SAEnB,CAAa,EAAkB,OAAO,EAC7C,EAAkB,QAAU,OAAO,WACjC,IAAM,GAAiB,GACvB,CAD2B,SAK/B,KAAgBA,EAClB,EACA,EAFuB,UAEvB,QAAa,EAAgB,GAC7B,OAAQ,CACV,CAAC,EAEK,EAAwB,cAAY,KACxC,OAAO,aAAa,EAAc,OAAO,EACzC,EAAc,QAAU,OAAO,WAAW,IAAM,EAAS,EAAE,EAAG,GAAG,CACnE,EAAG,CAAC,EAAS,EAEP,EAAmB,cACvB,IACE,OAAO,aAAa,EAAc,OAAO,EACzC,EAAS,EACX,EACA,CAAC,EAAQ,EAFW,EAKU,cAC9B,IACqB,IAAU,EAI3B,OAAO,aAAa,EAAc,OAAO,EAEzC,EAAa,QAAU,OAAO,WAAW,KACvC,OAAO,aAAa,EAAc,OAAO,EACzC,EAAS,EACX,EAAG,EAEP,EACA,CAJwB,EAIhB,EAAU,EAAa,EAHX,OAMhB,YAAU,IACP,KACL,OAAO,aAAa,EAAa,OAAO,EACxC,OAAO,aAAa,EAAc,OAAO,EACzC,OAAO,aAAa,EAAkB,OAAO,CAC/C,EACC,CAAC,CAAC,EAGH,UAAC,GACC,MAAO,EACP,YAAY,QACZ,EACA,IAAK,cACL,EACA,mBAAoB,EACpB,eAAgB,IACd,OAAO,aAAa,EAAa,OAAO,EACpC,EAAe,EAAkB,GAChC,EAAW,EAClB,EAFgD,CAA3B,IACM,UAEX,KACd,OAAO,aAAa,EAAa,OAAO,EACxC,GACF,EACA,WAFkB,IAEF,IAAM,OAAO,aAAa,EAAc,OAAO,EAC/D,eAAgB,EAChB,aAAc,IACZ,EAAS,GAAgB,IAAc,EAAY,GAAK,EAC1D,EACA,KAFoE,SAErD,IAAM,EAAS,EAAE,EAEhC,mBAAC,IAAS,CAAC,IAAV,CACC,aAAW,OACX,mBAAkB,EAClB,IAAK,EACJ,GAAG,EACJ,IAAK,GACP,EAGN,GAGF,EAAe,YAAc,EAM7B,IAAM,EAAW,oBAaX,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,uBACJ,EACA,MAAO,gBACP,eACA,cACA,EAAc,aACd,GAAG,EACL,CAAI,EACE,EAAU,EAAyB,EAAU,GAC7C,CAAC,EAAO,EAAQ,CAAI,KAAJ,CAAI,CAAoB,CAAC,CAC7C,GAFsE,EAEhE,EACN,SAAU,EACV,oBAAa,EAAgB,GAC7B,OAAQ,CACV,CAAC,EAED,MACE,UAAC,GACC,MAAO,EACP,YAAY,QACZ,EACA,IAAK,EAAQ,gBACb,EACA,mBAAoB,EAAQ,mBAC5B,eAAiB,GAAc,EAAS,GACxC,MADiD,OACnC,GAAe,EAAS,GACtC,MAD+C,QAChC,IAAM,EAAS,EAAE,EAEhC,mBAAC,IAAS,CAAC,IAAV,CAAc,mBAAkB,EAAc,GAAG,EAAU,IAAK,EAAc,GAGrF,GAGF,EAAkB,YAAc,EAsBhC,IAAM,EACJ,IAEA,GAAM,OACJ,aACA,qBACA,MACA,cACA,WACA,QACA,EACA,eACA,+BACA,EACA,gCACA,iBACA,EACF,CAAI,EACE,CAAC,EAAU,EAAW,CAAU,QAAV,EAAU,CAA+C,IAAI,EACnF,CAAC,EAAiB,EAAkB,CAAU,WAAmC,IAA7C,IAAqD,CAAC,CACzF,EAAgB,EAAiB,CAAU,WAAgC,GAA1C,CAA8C,EAEtF,MACE,UAAC,SACC,aACA,EACA,2BACA,EACA,cAAe,OAAW,CAAC,GAC3B,EADgC,KACxB,OAAK,CAAC,MACd,cACA,EACA,WACA,iBAAkB,iBAClB,EACA,uBAAwB,EACxB,eAAgB,OAAc,CAAC,GAC/B,WAD6C,IAC7B,OAAc,CAAC,GAC/B,WAD6C,IAC7B,OAAc,CAAC,GAC/B,WAD6C,IAC7B,OAAc,CAAC,GAC/B,WAD6C,EAC/B,OAAc,CAAC,GAC7B,SADyC,KAC1B,OAAc,CAAC,GAC9B,UAD2C,cACZ,cAAY,CAAC,EAAc,KACxD,EAAmB,IACjB,EAAY,IAAI,EAAc,GACvB,IAAI,IAD8B,IAG7C,EAAG,CAAC,CAAC,EACL,CAH8B,uBAGC,cAAY,IACzC,EAAmB,GACjB,EAAiB,EAAb,CAAa,CAAI,IACrB,EAAY,MADqB,CACd,CADiB,EAE7B,IAAI,IAAI,CADgB,GADY,EAI/C,EAAG,CAAC,CAAC,CAFyB,CAI9B,mBAAC,EAAW,SAAX,CAAoB,QACnB,mBAAC,SAAwB,EAAc,MAAO,WAC3C,EACH,EACF,GAGN,EAMM,EAAY,qBAMZ,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,uBAAE,EAAuB,GAAG,EAAU,CAAI,EAC1C,EAAU,EAAyB,CADG,CACQ,GAE9C,EACJ,UAAC,IAAS,CAAC,CAH4D,CAG5D,CAAV,CAAa,mBAAkB,EAAQ,YAAc,GAAG,EAAW,IAAK,EAAc,EAGzF,MACE,UAAC,IAAS,CAAC,IAAV,CAAc,MAAO,CAAE,SAAU,UAAW,EAAG,IAAK,EAAQ,uBAC3D,mBAAC,EAAW,KAAX,CAAgB,MAAO,EACrB,WAAQ,WAAa,UAAC,IAAW,SAAO,EAAE,WAAK,EAAgB,EAClE,EACF,CAEJ,GAGF,EAAmB,YAAc,EAMjC,IAAM,EAAY,qBAgBZ,CAAC,EAAmC,EAA4B,CACpE,EAA4D,GAQxD,EAA2B,IARsC,QAQtC,CAC/B,CAAC,EAA6C,EAVsB,GAWlE,GAAM,uBAAE,EAAuB,MAAO,EAAW,GAAG,EAAU,CAAI,EAC5D,EAAY,OAAK,CAAC,EAIlB,EAAmB,SAAqC,IAAI,EAC5D,EAAmB,SAAqC,IAAI,EAC5D,EAAsB,SAA0B,IAAI,EACpD,EAAkC,SAAO,KAAO,CAAD,EAC/C,EAA0B,SAAO,IAEjC,CAFsC,CAEX,cAAY,eAAC,yDAAO,QACnD,GAAI,EAAW,QAAS,CACtB,EAA0B,QAAQ,EAClC,IAAM,EAAa,GAAsB,EAAW,OAAO,EACvD,EAAW,OAAQ,IAAoB,UAAT,EAAmB,EAAa,EAAW,QAAQ,CAAC,CACxF,CACF,EAAG,CAAC,CAAC,EAEC,EAA0B,cAAY,KAC1C,GAAI,EAAW,QAAS,CACtB,IAAM,EAAa,GAAsB,EAAW,OAAO,EACvD,EAAW,OAAQ,IAA0B,QAAU,SA0uB1D,CAAmB,EAA2B,OACrD,EAAW,QAAQ,IACjB,EAAU,QAAQ,SAAW,EAAU,aAAa,UAAU,GAAK,GACnE,EAAU,aAAa,WAAY,IAAI,CACzC,CAAC,EACM,KACL,EAAW,QAAS,IAClB,IAAM,EAAe,EAAU,QAAQ,SACvC,EAAU,aAAa,WAAY,EACrC,CAAC,CACH,CACF,EArvBsF,EAAU,CAC1F,CACF,CAgvBiD,CAhvB9C,CAAC,CAAC,EAEL,MACE,UAAC,GACC,MAAO,EACP,MAzBU,GAAa,GAAa,qCA0BpC,aACA,gBACA,EACA,oBACA,eAAgB,EAChB,kBAAmB,EACnB,mBAAoB,EACpB,sBAAuB,EAEvB,mBAAC,IAAS,CAAC,GAAV,CAAc,GAAG,EAAW,IAAK,EAAc,GAGtD,GAGF,EAAmB,YAAc,EAMjC,IAAM,EAAe,wBAMf,EAA8B,aAGlC,CAAC,EAAgD,KACjD,GAAM,uBAAE,WAAuB,EAAU,GAAG,EAAa,CAAI,EACvD,EAAU,EAAyB,EAAc,EAAM,qBAAqB,EAC5E,EAAc,EAA6B,EAAc,EAAM,qBAAqB,EACpF,EAAY,SAAqC,IAAI,EACrD,EAAe,OAAe,CAAC,EAAK,EAAY,WAAY,GAC5D,EAAY,GAAc,EAAQ,EADsC,IACtC,CAAQ,EAAY,KAAK,EAC3D,EAAY,GAAc,EAAQ,OAAQ,EAAY,KAAK,EAC3D,EAAgC,UAAO,GACvC,EAD4C,EACnB,QAAO,GAChC,EAAO,EAAY,QAAU,EAAQ,MAE3C,MACE,uBACE,oBAAC,EAAW,SAAX,CAAoB,MAAO,EAAuB,MAAO,EAAY,MACpE,mBAAC,IAAe,QAAO,GACrB,mBAAC,IAAS,CAAC,OAAV,CACC,GAAI,WACJ,EACA,gBAAe,EAAW,GAAK,OAC/B,aAAY,GAAa,GACzB,CAD6B,eACd,EACf,gBAAe,EACd,GAAG,EACJ,IAAK,EACL,eAAgB,OAAoB,CAAC,EAAM,eAAgB,KACzD,EAAiB,SAAU,EAC3B,EAAY,kBAAkB,SAAU,CAC1C,CAAC,EACD,cAAe,OAAoB,CACjC,EAAM,cACN,GAAU,KAEN,GACA,EAAiB,SACjB,EAAY,kBAAkB,SAC9B,EAAwB,SAExB,CACF,EAAQ,eAAe,EAAY,KAAK,EACxC,EAAwB,QAAU,GACpC,CAAC,GAEH,eAAgB,OAAoB,CAClC,EAAM,eACN,GAAU,KACJ,IACJ,EAAQ,GADM,WACN,CAAe,EACvB,EAAwB,SAAU,EACpC,CAAC,GAEH,QAAS,OAAoB,CAAC,EAAM,QAAS,KAC3C,EAAQ,aAAa,EAAY,KAAK,EACtC,EAAiB,QAAU,CAC7B,CAAC,EACD,UAAW,OAAoB,CAAC,EAAM,UAAW,IAE/C,IAAM,EAAW,CAAE,WAAY,YAAa,SADH,CACa,OAD7B,EAAQ,IAAgB,YAAc,YACQ,EACrE,EAAQ,WACV,EACI,GAAQ,EAAM,MAAQ,IACxB,EAAY,IADsB,UACtB,CAAe,EAE3B,EAAM,eAAe,EAEzB,CAAC,GACH,CACF,EACF,EAGC,GACC,uBACE,oBAAyB,KAAxB,CACC,cAAW,GACX,SAAU,EACV,IAAK,EAAY,cACjB,QAAS,IACP,IAAM,EAAU,EAAY,WAAW,QACjC,EAAqB,EAAM,cAC3B,EAAoB,IAAuB,EAAI,QAC/C,iBAAsB,EAAS,SAAS,IAE1C,GAAqB,CAAC,IAAqB,EACjC,IAHkD,aAGlD,CAAkB,EAAoB,QAAU,KAAK,CAErE,IAID,EAAQ,UAAY,UAAC,QAAK,YAAW,EAAW,GACnD,GAEJ,CAEJ,CAAC,EAED,EAAsB,YAAc,EAOpC,IAAM,EAAc,4BASd,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,uBAAE,SAAuB,WAAQ,EAAU,GAAG,EAAU,CAAI,EAElE,KAF8D,CAG5D,UAAC,IAAe,SAAO,EACrB,mBAAC,IAAS,CAAC,EAAV,CACC,cAAa,EAAS,GAAK,OAC3B,eAAc,EAAS,OAAS,OAC/B,GAAG,EACJ,IAAK,EACL,QAAS,OAAoB,CAC3B,EAAM,QACN,IACE,IAAM,EAAS,EAAM,OACf,EAAkB,IAAI,YAAY,EAAa,CACnD,SAAS,EACT,YAAY,CACd,CAAC,EAID,GAHA,EAAO,iBAAiB,EAAa,SAAW,WAAWG,GAAQ,CAAE,EAAL,IAAW,CAAK,CAAC,EACjF,QAA2B,CAAC,EAAQ,GAEhC,CAAC,EAAgB,SAF8B,OAE9B,EAAoB,CAAC,EAAM,QAAS,CACvD,IAAM,EAA0B,IAAI,YAAY,EAAsB,CACpE,SAAS,EACT,YAAY,CACd,CAAC,EACD,QAA2B,CAAC,EAAQ,EACtC,CACF,EACA,CAAE,iBAH6D,SAGnC,CAAM,EACpC,EACF,CACF,CAEJ,GAGF,EAAmB,YAhDD,EAgDe,mBAMjC,IAAM,EAAiB,0BAWjB,EAAgC,aAGpC,CAAC,EAAkD,KACnD,GAAM,YAAE,EAAY,GAAG,EAAe,CAAI,EACpC,EAAU,EAAyB,EAAgB,EAAM,EADzB,mBAC8C,EAC9E,GAAY,CAAQ,EAAQ,KAAK,CAEvC,OAAO,EAAQ,eACX,cAAS,CACP,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAC/B,mBAAC,GAA6B,GAAG,EAAgB,IAAK,EAAc,EACtE,EACA,EAAQ,gBAEV,IACN,CAAC,EAED,EAAwB,YAAc,EAKtC,IAAM,EAAoC,aAGxC,CAAC,EAAsD,KACvD,GAAM,uBAAE,EAAuB,GAAG,EAAe,CAAI,EAC/C,EAAU,EAAyB,EAAgB,GACnD,CAF2C,CAEhC,EAAc,GACzB,CAAC,EAAe,EAAgB,CAAU,KAF8B,KAE9B,CAC9C,CAFkD,CACd,IAGhC,CAAC,EAAU,EAAW,CAAU,QAAV,EAAU,CAAkD,IAAI,EACtF,EAAuC,eAAxB,EAAQ,YACvB,GAAY,CAAQ,EAAQ,KAAK,CAEjC,YAAU,WAEd,IAAM,WAAc,IAAM,KADH,GACkB,EAAK,QAAU,EAAQ,MAAK,WAAG,IAAI,QACxE,GAAa,EAAiB,EACpC,EAAG,CAAC,EADe,EACG,EADyB,GACpB,CAAC,EAK5B,IAAM,EAAuB,KACvB,GACF,EAAY,CACV,KAAM,EAAe,EAFN,WAEoB,CAAc,EAAc,aAC/D,OAAQ,EAAe,EAAc,WAAa,EAAc,UACjE,CAEL,EAMA,OALA,GAAkB,EAAe,GACjC,GAAkB,EAAQ,YAD2B,EAC3B,CAAgB,GAInC,EACL,UAAC,IAAS,CAAC,IAAV,CACC,eAAW,EACX,aAAY,EAAY,UAAY,SACpC,mBAAkB,EAAQ,YACzB,GAAG,EACJ,IAAK,EACL,MAAO,CACL,SAAU,WACV,GAAI,EACA,CACE,KAAM,EACN,MAAO,EAAS,KAAO,KACvB,UAAW,cAA6B,OAAf,EAAS,MAAM,OAC1C,EACA,CACE,IAAK,EACL,OAAQ,EAAS,KAAO,KACxB,UAAW,cAA6B,OAAf,EAAS,MAAM,OAC1C,EACJ,GAAG,EAAe,KACpB,IAEA,IACN,CAAC,EAMK,EAAe,wBAYf,EAA8B,aAGlC,CAAC,EAAgD,KACjD,GAAM,YAAE,EAAY,GAAG,EAAa,CAAI,EAClC,EAAU,EAAyB,EAAc,EADnB,qBAC8C,EAC5E,EAAc,EAA6B,EAAc,EAAM,qBAAqB,EACpF,EAAe,OAAe,CAAC,EAAY,WAAY,GACvD,EAAO,EAAY,KADgD,GACtC,EAAQ,MAErC,EAAc,CAClB,MAAO,EAAY,MACnB,WAAY,EAAY,WACxB,cAAe,EAAY,cAC3B,kBAAmB,EAAY,kBAC/B,sBAAuB,EAAY,sBACnC,mBAAoB,EAAY,mBAChC,GAAG,GAGL,OAAO,EAAS,SAmBd,EAlBA,CAkBA,OAAC,cAAuB,EAAyB,GAAG,EAAa,IAAK,EAAc,EAlBpF,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAC/B,mBAAC,IACC,aAAY,GAAa,GACxB,CAD4B,EACzB,EACJ,IAAK,EACL,eAAgB,OAAoB,CAAC,EAAM,eAAgB,EAAQ,cAAc,EACjF,eAAgB,OAAoB,CAClC,EAAM,eACN,GAAU,EAAQ,cAAc,GAElC,MAAO,CAEL,cAAe,CAAC,GAAQ,EAAQ,WAAa,OAAS,OACtD,GAAG,EAAY,MACjB,EACF,CACF,CAIJ,CAAC,EAED,EAAsB,YAAc,EAapC,IAAM,EAA+B,aAGnC,CAAC,EAAiD,KAElD,GAAM,yBAAE,0BAAyB,EAAwB,CADzC,EAC6C,EADN,EAAM,qBAAqB,EAelF,MAZA,OAAe,CAAC,KACd,EAAwB,EAAM,MAAO,CACnC,IAAK,EACL,GAAG,CACL,CAAC,CACH,EAAG,CAAC,EAAO,EAAc,EAAwB,EAEjD,OAAe,CAAC,IACP,IAAM,EAAwB,CAHS,CAGH,KAAK,EAC/C,CAAC,EAAM,MAAO,EAAwB,EAGlC,IACT,CAAC,EAIK,EAAuB,UARa,0BA0BpC,GAAkC,aAGtC,CAAC,EAAoD,KACrD,GAAM,CACJ,8BACA,aACA,gBACA,oBACA,qBACA,wBACA,EACA,GAAG,EACL,CAAI,EACE,EAAU,EAAyB,EAAc,GACjD,EAAY,SAAyC,IAAI,EACzD,CAFsE,CAEvD,OAAe,CAAC,EAAK,GACpC,EAAY,GAAc,EAAQ,EADc,IACd,CAAQ,GAC1C,EAD+C,GACrB,EAAQ,OAAQ,GAC1C,EAAW,EAAc,GACzB,EAA+B,SAA+B,IAAI,EAElE,CAH8C,cAG5C,EAAc,CAAI,EAEpB,YAAU,KACd,IAAM,EAAU,EAAI,QAGpB,GAAI,EAAQ,YAAc,EAAS,CACjC,IAAM,EAAc,SAG4B,EAF9C,IACA,IACI,EAAQ,IAFE,IAEF,CAAS,IADF,KACW,aAAa,EAAG,aAAW,UAAX,EAAoB,OAAM,CAC1E,CADgD,CAGhD,OADA,EAAQ,iBAAiB,EAAsB,GACxC,IAAM,EAAQ,EADqC,iBACrC,CAAoB,EAAsB,EACjE,CACF,EAAG,CAAC,EAAQ,GAFkE,OAElE,CAAY,EAAM,MAAO,EAAY,EAAe,EAAmB,EAEnF,IAAM,EAAwB,QAFoD,CAEpD,CAAQ,KAEpC,IAAM,EADQ,IACO,IAAI,CADF,EACY,EAAK,KAAK,EACzB,MAAO,EAAvB,EAAQ,KAAe,EAAO,QAAQ,EAC1C,IAAM,EAAQ,EAAO,QAAQ,EAAQ,KAAK,EACpC,EAAY,EAAO,QAAQ,EAAQ,aAAa,EAChD,EAAa,IAAU,EAAQ,MAC/B,EAAc,IAAc,EAAO,QAAQ,GAIjD,EAJsD,CAIlD,CAAC,GAAc,CAAC,EAAa,OAAO,EAAuB,CAA9B,MAA8B,CAE/D,IAAM,GAAa,KAEjB,GAAI,IAAU,EAAW,CAEvB,GAAI,GAA4B,GAAI,EAAlB,EAAkB,OAAO,EAAQ,EAAY,WAAa,aAE5E,GAAI,GAAyB,GAAI,EAAd,EAAc,OAAO,EAAQ,EAAY,WAAa,QAC3E,CAGA,OAAO,MACT,GAAG,OAEH,EAAuB,QAAU,EAC1B,CACT,EAAG,CAAC,EAAQ,cAAe,EAAQ,MAAO,EAAQ,IAAK,EAAU,EAAM,EAEvE,CAFsE,KAGpE,UAAC,IAAW,SAAO,EACjB,mBAAC,IAAgB,CAAhB,CACC,GAAI,EACJ,kBAAiB,EACjB,cAAa,EACb,mBAAkB,EAAQ,YACzB,GAAG,EACJ,IAAK,EACL,6BAA6B,EAC7B,UAAW,SAKT,EAJA,IAAM,EAA0B,IAAI,MAAM,EAAsB,CAC9D,SAAS,EACT,YAAY,CACd,CAAC,SACD,IAAI,UAAJ,EAAa,SAAb,IAAa,CAAc,EAC7B,EACA,eAAgB,IAFoC,CAEpC,EAAoB,CAAC,EAAM,eAAgB,QAIrD,EAHJ,IACA,IAAM,EAAS,EAAM,OAErB,GAHsB,IAGtB,KAAY,6BAAoB,SAAS,EAAM,EAAG,GAAM,eAAe,CACzE,CAAC,EACD,qBAAsB,OAAoB,CAAC,EAAM,qBAAsB,QAGxB,EAF7C,IAAM,EAAS,EAAM,OACf,EAAY,IAAW,KAAF,4BAAsB,IAAI,gBAAT,EAAkB,SAAS,KACjE,CADuE,CACtD,EAAQ,wBAAsB,mBAAU,SAAS,EAAM,GAC1E,GAAa,GAAkB,CAAC,EAAQ,WAAY,IAAM,eAAe,CAC/E,CAAC,EACD,UAAW,OAAoB,CAAC,EAAM,UAAW,IAC/C,IAAM,EAAY,EAAM,QAAU,EAAM,SAAW,EAAM,QAEzD,GAD+B,CAC3B,OADa,EAAM,KAAiB,CAAC,EAC3B,CACZ,IAAM,EAAa,GAAsB,EAAM,aAAa,EACtD,EAAiB,SAAS,cAC1B,EAAQ,EAAW,UAAW,GAAc,IAAc,GAMhE,GAAI,GALsB,EAAM,GAD8C,GAM/D,EALiB,CAE5B,EAAW,MAAM,EAAG,CAGK,EAHE,CAGC,CAHH,KAAE,CAAQ,EACnC,EAAW,MAAM,EAAQ,EAAG,EAAW,MAAM,GAI/C,EAAM,eAAe,MAChB,KAIL,aAAc,UAAd,EAAuB,MAAM,CAC/B,CACF,CAFI,CAGL,EACD,gBAAiB,OAAoB,CAAC,EAAM,gBAAiB,IAG3D,EAAkB,SAAU,CAC9B,CAAC,GACH,CACF,CAEJ,CAAC,EAMK,GAAgB,yBAYhB,GAA+B,aAGnC,CAAC,EAAiD,KAClD,GAAM,YAAE,EAAY,GAAG,EAAc,CAAI,EAEnC,GAAO,CADG,EAAyB,GADJ,EACyB,qBAAqB,EACtD,KAAK,CAElC,MACE,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAC/B,mBAAC,IAA4B,GAAG,EAAe,IAAK,EAAc,EACpE,CAEJ,CAAC,EAED,GAAuB,YAAc,GAOrC,IAAM,GAAmC,aAGvC,CAAC,EAAqD,KACtD,GAAM,uBAAE,WAAuB,EAAU,GAAG,EAAkB,CAAI,EAC5D,EAAU,EAAyB,GAAe,GAClD,EAAe,CAFyC,EAEzC,IAAe,CAAC,EAAc,EAAQ,IADkB,YACF,EACrE,EAAyB,EAC7B,EACA,EAAM,uBAEF,CAAC,EAAM,EAAO,CAAU,IAAV,MAAU,CAAmD,IAAI,EAC/E,CAAC,EAAS,EAAU,CAAU,OAAV,GAAU,CAA8C,IAAI,EAChF,EAAgB,kBAAO,EAAM,OAAQ,KAAO,OAC5C,EAAiB,EAAO,kBAAM,QAAS,KAAO,OAC9C,GAAO,CAAQ,EAAQ,KAAK,CAG5B,EAAqB,EAAO,EAAQ,MAAQ,EAAQ,cAa1D,OACE,GAHgB,EAHO,KACnB,EAEqB,CAFZ,EAAQ,CAAE,EAAV,IAAiB,EAAQ,IAEG,OAFH,CAAa,OAAQ,EAAQ,aAAc,CACnF,GAIE,UAAC,IAAS,CAAC,IAAV,CACC,aAAY,GAAa,GACzB,CAD6B,kBACX,EAAQ,YACzB,GAAG,EACJ,IAAK,EACL,MAAO,CAEL,cAAe,CAAC,GAAQ,EAAQ,WAAa,OAAS,OACrD,wCAA+C,CAAG,EAClD,yCAAgD,CAAG,EACpD,GAAG,EAAkB,OAEvB,eAAgB,OAAoB,CAAC,EAAM,eAAgB,EAAQ,cAAc,EACjF,eAAgB,OAAoB,CAAC,EAAM,eAAgB,GAAU,EAAQ,cAAc,CAAC,EAE3F,eAAM,KAAK,EAAuB,KAAK,EAAE,IAAI,OAAC,CAAC,EAAO,KAAE,aAAK,EAAY,GAAGQ,EAAO,IAC5E,CAD2E,CAChE,IAAuB,EACxC,MACE,UAAC,GAAQ,CAAR,CAAqB,QAAS,GAAc,EAC3C,mBAAC,IACE,GAAGA,CAAAA,CACJ,IAAK,OAAW,CAAC,EAAK,IAGhB,GAAY,GAAM,IACxB,CAAC,CADsC,EAEzC,EARa,EAWnB,CAAC,EAFG,CAKV,CAAC,EASK,GAAmB,aACvB,CAAC,EAAqC,KACpC,GAAM,uBAAE,EAAuB,GAAG,EAAW,CAAI,EAC3C,EAAU,EARK,EAOwB,WACc,GAE3D,MACE,CAHuC,EAGvC,OAAC,EAH6E,QAGxD,CAArB,CAA8B,MAAO,EACpC,mBAAC,EAAqB,KAArB,CAA0B,MAAO,EAChC,mBAAC,IAAS,CAAC,IAAV,CAAc,IAAK,EAAQ,IAAM,GAAG,EAAY,IAAK,EAAc,EACtE,EACF,CAEJ,GAKI,GAAa,CAAC,aAAc,YAAa,UAAW,WAAW,EAM/D,GAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,uBAAE,EAAuB,GAAG,EAAW,CAAI,EAC3C,EAAW,EAAwB,EADI,CAEvC,EAAU,EATU,cAQoC,GACE,GAEhE,GAFyC,GAGvC,UAAC,EAHkF,QAG7D,CAArB,CAA8B,MAAO,EACpC,mBAAC,IAAS,CAAC,OAAV,CACE,GAAG,EACJ,IAAK,EACL,UAAW,OAAoB,CAAC,EAAM,UAAW,IAE/C,GAD6B,CAAC,OAAQ,SAAU,GAAU,CAAE,MAAF,EAAE,CAAS,EAAM,GAAG,EACpD,CACxB,IAAI,EAAiB,IAAW,IAAI,CAAN,EAAgB,EAAK,IAAI,OAAQ,EAI/D,GADI,CAFgC,QAAhB,EAAQ,IAAgB,aAAe,YAC5B,UAAW,KAAK,EAClC,SAAS,EAAM,GAAG,EAAG,GAAe,QAAQ,EACrD,GAAW,SAAS,EAAM,GAAG,EAAG,CAClC,IAAM,EAAe,EAAe,QAAQ,EAAM,aAAa,EAC/D,EAAiB,EAAe,MAAM,EAAe,CAAC,CACxD,CAKA,WAAW,IAAM,GAAW,IAG5B,EAAM,QAHoC,CAAC,KAGrC,CAAe,CACvB,CACF,CAAC,GACH,CACF,CAEJ,GAaF,SAAS,GAAsB,GAAwB,IAC/C,EAAuB,CAAC,EACxB,EAAS,SAAS,iBAAiB,EAAW,WAAW,aAAc,CAC3E,WAAY,IACV,IAAM,EAAiC,UAAjB,EAAK,SAAqC,WAAd,EAAK,YACvD,EAAS,UAAY,EAAK,QAAU,EAAsB,WAAW,CAAlB,UAAkB,CAI9D,EAAK,UAAY,EAAI,WAAW,cAAgB,WAAW,WACpE,CACF,CAAC,EACD,KAAO,EAAO,SAAS,GAAG,EAAM,KAAK,EAAO,WAA0B,EAGtE,OAAO,CACT,CAEA,SAAS,GAAW,GAA2B,IACvC,EAA2B,SAAS,cAC1C,OAAO,EAAW,KAAK,GAErB,IAAkB,IAClB,EAAU,MAAM,EACT,SAAS,EAF4B,QAAO,GAEnC,GAAkB,GAEtC,CAeA,SAAS,GAAkB,EAA6B,GAAsB,IACtE,EAAe,OAAc,CAAC,GACpC,OAAe,CAAC,KACd,IAAI,EAAM,EACV,GAAI,EAAS,CAQX,IAAM,EAAiB,IAAI,eAAe,KACxC,qBAAqB,GAAG,EAClB,OAAO,sBAAsB,EACrC,CAAC,EAED,OAHiD,EAElC,QAAQ,GAChB,IADuB,CAE5B,OAAO,qBAAqB,GAAG,EAChB,UAAU,EAC3B,CACF,CACF,EAAG,CAHmC,EAGzB,EAAa,CAC5B,CAEA,QAH2B,CAGlB,GAAa,GACpB,OAAO,EAAO,OAAS,QACzB,CAEA,SAAS,GAAc,EAAgB,GACrC,MAAO,UAAG,EAAM,aAAiB,OAAL,EAC9B,CAEA,EAHmC,OAG1B,GAAc,EAAgB,GAAe,MAC7C,UAAG,EAAM,aAAiB,OAAL,EAC9B,CAEA,EAHmC,OAG1B,GAAa,GAAqE,OAClF,GAAkC,UAAtB,EAAM,YAA0B,EAAQ,GAAS,EAAJ,GAAI,CACtE,CAIA,IAAMxB,GAAO,EACP,GAAM,EACN,GAAO,EACP,GAAO,EACP,GAAU,EACV,GAAO,EACP,GAAY,EACZ,GAAU,EACV,GAAW,gLCxtCX,EAAgB,WAIhB,CAAC,EAAuB,EAAmB,CAAI,OAAkB,CAAC,GAIlE,CAAC,EAAkB,EAAkB,CACzC,EAA4C,EALuC,CAe/E,EAAiB,QAXoB,IAWpB,CACrB,CAAC,EAAmC,KAClC,GAAM,CACJ,kBACA,MAAO,EAAY,KACnB,IAAK,gBACL,EAAgB,EAChB,GAAG,EACL,CAAI,CAEJ,EAAK,GAAW,MAAY,EAAO,EAAiB,CAAlB,EAIlC,IAJ2D,EAI/C,CAJkD,CAIjC,GAAW,EAhCxB,EAgCoB,CAEhC,KAF8C,GAExB,GAAC,EAAmB,EAAW,GAAG,GAAG,CAIzD,EAAQ,EAAmB,EAAW,GAAG,EAAgB,KACzD,EAAa,EAAS,GAAS,EAAJ,EAAyB,GAAG,KAAI,EAEjE,MACE,UAAC,GAAiB,MAAO,QAAiB,MAAc,EACtD,mBAAC,IAAS,CAAC,IAAV,CACC,gBAAe,EACf,gBAAe,EACf,gBAAe,EAAS,GAAS,EAAJ,KAAY,EACzC,iBAAgB,EAChB,KAAK,cACL,aAAY,EAAiB,EAAO,GAAG,aACvC,QAAY,EAAS,OACrB,WAAU,EACT,GAAG,EACJ,IAAK,GACP,CACF,CAEJ,GAGF,EAAS,YAAc,EAMvB,IAAM,EAAiB,oBAKjB,EAA0B,aAC9B,CAAC,EAA4C,SAM3B,EALhB,GAAM,iBAAE,EAAiB,GAAG,EAAe,CAAI,EACzC,EAAU,EAAmB,EAAgB,GACnD,CAF2C,KAGzC,MAFgE,EAEhE,EAAC,IAAS,CAAC,IAAV,CACC,aAAY,EAAiB,EAAQ,MAAO,EAAQ,GAAG,EACvD,wBAAoB,SAAS,OAC7B,WAAU,EAAQ,IACjB,GAAG,EACJ,IAAK,GAGX,GAOF,SAAS,EAAqB,EAAe,GAC3C,MAAO,GAAkC,OAA/B,KAAK,MAAO,EAAQ,EAAO,GAAG,CAAC,KAC3C,CAEA,SAAS,EAAiB,EAAkC,GAAiC,OAC3E,MAAT,EAAgB,gBAAkB,IAAU,EAAW,WAAa,SAC7E,CAEA,SAAS,EAAS,GAA6B,MACrB,UAAjB,OAAO,CAChB,CAEA,SAAS,EAAiB,GAAyB,OAG/C,EAAS,GAAG,CACZ,CAAC,MAAM,GAAG,CACV,EAAM,CAEV,CAEA,SAAS,EAAmB,EAAY,GAA8B,OAGlE,EAAS,IACT,CADc,MACP,IACP,CADY,EACH,GACT,GAAS,CAEb,CAjCA,EAAkB,YAAc,EAiDhC,IAAM,EAAO,EACP,EAAY,6WCzIZ,CAAC,EAAmB,EAAe,CAAI,OAAkB,CAAC,IAAvB,EAA6B,EAMhE,EAAY,OAmBZ,CAAC,EAAoB,EAAoB,CAC7C,EAA0C,GAStC,CAAC,EAAyB,EAAyB,CATJ,EAUJ,GAQ3C,CAnByC,CAmB5B,IARuC,QAQvC,CACjB,CAAC,CAVsD,CAUvB,KAC9B,GAAM,aAAE,EAAa,sBAAsB,KAAO,CAAD,CAAI,GAAG,EAAU,CAAI,EAChE,EAAgB,GAD4C,KAC5C,CAAwB,IAAI,EAC5C,EAAkB,OAAe,CAAC,EAAc,GAGhD,CAAC,EAAa,CAHyC,CAG3B,CAAU,WAAsB,CAAC,CAAC,EAC9D,EAAqE,cACzE,GAAe,EAAY,EAAS,CACpC,CAAC,EAAW,EAER,CAHgC,CAI9B,KAHM,QAGN,CACJ,CAAC,EAAW,IACV,EAAe,gBAAsB,CACnC,GAAG,EACH,CAAC,EAAS,CAAG,CAAE,KAAL,IAAK,GAAI,EAAgB,EAAS,IAAK,CAAC,EAAI,GAAG,EAC3D,EAAE,EACJ,CAAC,GAEC,EACE,cAAY,IAChB,EAAe,GAAsB,EAAE,GAAG,EAAiB,CAAC,EAAS,CAAG,IAAnC,CAAmC,CAAH,EAAa,EAAE,EACjE,IAA0B,CAAE,GAAG,EAAqB,CAAC,EAAS,CAAG,CAAC,EAAE,EACzF,CADmF,CAChF,CAAC,CAAC,EAGD,CAAC,EAAyB,EAA0B,CAClD,WAAkC,CAAC,CAAC,EACtC,EACE,MAHkD,OAGlD,CACH,2BAAc,CAAwB,EAAS,EAAjC,EAAsC,CAAC,GACtD,CAAC,EAAuB,EAEtB,EACE,cAAY,CAAC,EAHO,KAIxB,EAA2B,QAEP,QAFyC,CAC3D,GAAG,EACH,CAAC,EAAS,CAAG,CAAC,KAAJ,QAAQ,CAA4B,EAAS,IAAK,CAAC,EAAI,EAAY,EAC7E,CACJ,EAAG,CAAC,CAAC,EACD,CAH6E,CAI3E,cAAY,CAAC,EAAW,KAC5B,EAA2B,QAEX,QAF6C,CAC3D,GAAG,EACH,CAAC,EAAS,YAAI,CAA4B,EAAS,IAAK,EAAC,EAAG,OACzD,GAAiB,EAAa,KAAO,EAE1C,EAAE,CACJ,EAAG,CAAC,CAAC,EAGD,CAAC,EAAiB,EAAkB,CAAU,WAA0B,CAAC,CAAC,EAAtC,EACyC,cACjF,wBAAe,IAAgB,EAAS,IAAK,CAAC,GAC9C,CAAC,EAAe,EAEZ,EACE,SAHU,IAGV,CAAY,CAAC,EAAW,KAC5B,EAAmB,gBAA0B,CAC3C,GAAG,EACH,CAAC,EAAS,CAAG,CAAE,KAAL,IAAK,IAAI,CAAoB,EAAS,EAA7B,EAAkC,CAAC,EAAI,GAAG,EAC/D,EAAE,CACJ,EAAG,CAAC,CAAC,EAGD,CAAC,EAAe,EAAgB,CAAU,WAAwB,CAAC,CAAC,EACpE,EACE,cAAY,CAAC,EAAW,KAC5B,EAAiB,IACf,IAAM,EAAsB,IAAI,IAAI,EAAkB,EAAU,EAAE,IAAI,CAAP,CAAS,CACxE,MAAO,CAAE,GAAG,EAAmB,CAAC,EAAS,CAAG,CAAoB,CAClE,CAAC,CACH,EAF6C,CAEzC,CAAC,EACD,EACE,cAAY,CAAC,EAAW,KAC5B,EAAiB,IACf,IAAM,EAAsB,IAAI,IAAI,EAAkB,EAAU,EAEhE,KAF+D,EAC/D,EAAoB,OAAO,EAAE,CACtB,CAAE,GAAG,EAAmB,CAAC,EAAS,CAAG,CAAoB,CAClE,CAAC,CACH,EAF6C,CAEzC,CAAC,EACD,EACE,cACH,iBAAc,MAAM,eAAK,CAAc,EAAS,EAAvB,EAA4B,CAAC,CAAC,EAAE,KAAK,GAAG,GAAK,QACvE,CAAC,EAAa,EAGlB,MACE,GAJgB,EAIhB,KAAC,GACC,MAAO,mBACP,EACA,sBAAuB,+BACvB,EACA,6BAA8B,EAC9B,gCAAiC,uBACjC,EACA,0BAA2B,EAC3B,uBAAwB,EAExB,mBAAC,GACC,MAAO,EACP,oBAAqB,EACrB,uBAAwB,sBACxB,EAEA,mBAAC,IAAS,CAAC,KAAV,CACE,GAAG,EACJ,IAAK,EAEL,UAAW,OAAoB,CAAC,EAAM,UAAW,IAC/C,IAAM,EAAsB,EAAuB,EAAM,aAAa,CAClE,KAAwB,EAAM,OAAQ,GAAoB,MAAM,EAGpE,EAAM,eAAe,CACvB,CAAC,EAED,SAAU,OAAoB,CAAC,EAAM,SAAU,EAAqB,CAClE,0BAA0B,CAC5B,CAAC,EAED,QAAS,OAAoB,CAAC,EAAM,QAAS,EAAmB,EAClE,EACF,EAGN,GAGF,EAAK,MARuE,KAQvE,CAAc,EAMnB,IAAM,EAAa,YAOb,CAAC,EAAmB,EAAmB,CAC3C,EAAyC,GASrC,EAAkB,KAT6B,IADR,GAUrB,CACtB,CAAC,EAAoC,KACnC,GAAM,CAAE,mBAAa,gBAAM,GAAgB,EAAO,GAAG,EAAW,CAAI,EAE9D,EADoB,EAAqB,EADiB,GAE7B,QADmC,QACnC,CAAiB,GAC9C,CADkD,CAC7C,OAAK,CAAC,EAEjB,MACE,UAAC,GAAkB,MAAO,KAAa,OAAQ,gBAAY,EACzD,mBAAC,IAAS,CAAC,IAAV,CACC,aAAY,EAAkB,EAAU,GACxC,UADqD,KACvC,EAAoB,EAAU,GAC3C,GAAG,EACJ,IAAK,CAFoD,EAG3D,CACF,CAEJ,GAGF,EAAU,YAAc,EAMxB,IAAM,EAAa,YAMb,EAAkB,aACtB,CAAC,EAAoC,KACnC,GAAM,aAAE,EAAa,GAAG,EAAW,CAAI,EACjC,EAAoB,EAAqB,EADZ,GAE7B,EAAe,EAAoB,EAAY,EADiB,CAEhE,EAAU,EAAW,IADqC,GACrC,EAAW,EAAa,GAC7C,EAAW,EAAkB,iBAAiB,EAAa,IAAI,EAErE,MACE,UAAC,OAAc,CAAd,CACC,aAAY,EAAkB,EAAU,EAAa,aAAa,EAClE,eAAc,EAAoB,EAAU,EAAa,aAAa,EACrE,GAAG,EACJ,IAAK,UACL,GAGN,GAGF,EAAU,YAAc,EAMxB,IAAM,EAAe,cAMf,EAAoB,aACxB,CAAC,EAAsC,KACrC,GAAM,aAAE,EAAa,GAAG,EAAa,CAAI,EAEnC,EAAoB,EAAqB,EAAc,EAFxB,CAG/B,EAAe,EAAoB,EAAc,EADiB,CAElE,EAAyB,EAA0B,EAAc,EADL,CAG5D,EAAY,MAFgE,EAEhE,CAA2B,IAAI,EAC3C,EAAc,OAAe,CAAC,EAAc,GAAG,EACxC,EAAa,MAAQ,EAAa,KACzC,EAAK,EAAa,IAAM,EAAa,GACrC,EAAuB,EAAkB,6BAA6B,GAEtE,CAF0E,uBAExE,2BAAuB,EAA2B,yBAAuB,CAC/E,EACI,EAA8B,cAClC,MAAO,IAIL,GAAI,EAAgB,EAAQ,QAAQ,EAAG,YAErC,EAAsB,EADE,EAAsB,EAAQ,QAAQ,GAQhE,IAAM,CAPuC,CAO5B,EAAQ,KAAO,IAAI,SAAS,EAAQ,IAAI,EAAI,IAAI,SAAS,EACnC,CAAC,EAAQ,MAAO,EAAQ,CAKzD,EAA0D,CAAC,EALF,EAME,CAAC,EAClE,EAAqB,QAAQ,KACvB,SAsVL,CACP,CACA,GACkC,MAClC,MAAwC,kBAAjC,CAAoD,CAA9C,MAAM,YAAY,OAOT,EAPoD,EAAM,EAO1C,GAP0C,CAQzE,EADqD,GAP2B,GAQxE,CAR4E,GAQxE,MAAa,QAPlC,EA3VwC,EAAoB,GA8VlB,QA9V6B,GAAG,EAE5B,EA4V/B,MAAM,UA5V2C,CA4V3C,CAAY,CA5VkC,GA4VlC,EA3VrB,EAAyB,KAAK,GAF9B,EAAyB,KAAK,EAIlC,CAAC,EAQD,GAVoD,CAU9C,EAAuB,OAZuB,WAYhB,CAAY,EAHE,IAAI,OAAC,CAAE,EAGO,CAHPY,CAAAA,OAAI,EAAM,GAAM,MAChE,CAACA,EAAI,KAAS,CAAH,EAAe,CAClC,GAEK,EAAsB,EAHM,CAAC,IAGA,OAAO,GAAsB,KAAK,OAAO,EAU5E,GAV8D,EAEtD,kBAAkB,EAAiB,EAA0B,EAAE,EAEvE,EAAsB,EADE,EAAsB,EAAQ,QAAQ,GAE9D,EAA0B,EADiB,GAMvC,CAAC,GAAuB,EAAyB,OAAS,EAAG,CAC/D,CANkD,GAM5C,EAAuB,EAAyB,IAAI,OAAC,CAAE,GAAAA,CAAAA,OAAI,EAAM,UACrE,KAAS,CAAH,EAAgB,KAAK,GAAP,CAAqBA,EAAI,EAAiB,IAG1D,CAHgD,CAGxB,OAAO,YAAY,MADjB,QAAQ,IAAI,IAEtC,EAAuB,OAAO,OAF4B,GAEE,KAAK,OAAO,EAE9E,EAAQ,EAFwD,eAExD,CADe,EACoB,EAA0B,EAAE,EAEvE,EAAsB,EADE,EAAsB,EAClBa,QADkC,GAE9D,EAA0B,EAAM,CADW,CAE7C,CACF,EACA,CAAC,EAAsB,EAAM,EAA2B,EAAqB,EAGzE,KANqD,MAMrD,CAAU,KACd,IAAM,EAAU,EAAI,QACpB,GAAI,EAAS,CAGX,IAAM,EAAe,IAAM,EAAsB,GAEjD,IAFwD,GACxD,EAAQ,iBAAiB,SAAU,GAC5B,IAAM,EAAQ,GAD0B,gBAC1B,CAAoB,SAAU,EACrD,CACF,EAAG,CAAC,EAAsB,EAE1B,EAJmE,EAI7D,EAA6B,WAFV,EAEU,CAAY,KAC7C,IAAM,EAAU,EAAI,QAChB,IACF,EAAQ,GADG,cACH,CAAkB,EAAE,EAC5B,EAAuB,GAE3B,CAF+B,CAE5B,CAAC,EAAM,EAAuB,EAG3B,YAAU,MAHgB,KAI9B,IAAM,aAAW,gBAAJ,EAAa,KAC1B,GAAI,EAEF,IAFQ,GACR,EAAK,iBAAiB,QAAS,GACxB,IAAM,EAAK,WADiC,QACjC,CAAoB,QAAS,EAEnD,EAAG,CAAC,EAAqB,EAGnB,WALiE,CAKvD,IAHQ,CAItB,IAAM,EAAU,EAAI,QACd,iBAAO,EAAS,QAAQ,MAAM,EACpC,GAAI,GAAQ,EAAa,cAAe,CACtC,IAAM,EAAsB,EAAuB,GAC/C,CADmD,GAC3B,GAAS,EAAoB,GAApB,EAAoB,CAAM,CACjE,CACF,EAAG,CAAC,EAAa,aAAa,CAAC,EAE/B,IAAM,EAAW,EAAkB,iBAAiB,GAEpD,CAFwD,KAGtD,UAAC,IAAS,CAAC,MAAV,CACC,aAAY,EAAkB,EAAU,EAAa,aAAa,EAClE,eAAc,EAAoB,EAAU,EAAa,aAAa,EACtE,iBAAc,EAAa,eAAuB,CAAP,IAAO,EAClD,mBAAkB,EAAuB,oBAAoB,GAE7D,CAFiE,KAE3D,GACL,GAAG,EACJ,IAAK,KACL,OACA,EACA,UAAW,OAAoB,CAAC,EAAM,UAAW,IAE/C,EADgB,EAAM,cAExB,CAAC,EACD,CAFwB,OAAO,CAErB,OAAoB,CAAC,EAAM,SAAU,IAE7C,GACF,CAAC,GAGP,GAGF,EAAY,SAPmB,EAOnB,CAAc,EAoB1B,IAAM,EAA0B,0BAC1B,EAAyE,CAC7E,SAAU,EACV,gBAAiB,iDACjB,cAAe,0BACf,eAAgB,0BAChB,aAAc,8CACd,QAAS,yBACT,SAAU,0BACV,aAAc,8CACd,MAAO,OACP,aAAc,uBAChB,EAEM,EAAe,cASf,EAAoB,aACxB,CAAC,EAAsC,KACrC,GAAM,OAAE,EAAO,KAAM,EAAU,GAAG,EAAa,CAAI,EAC7C,EAAe,EAAoB,EAAc,EADR,WACyB,EAClE,UAAO,EAAY,EAAa,YAEtC,KAAc,GAAW,CAArB,EAEA,UAAC,GAAiB,GAAG,EAAc,IAAK,OAAc,EACnD,WAAM,UAAY,EACrB,EAEwB,YAAjB,OAAO,EACT,UAAC,SAAkB,EAAe,GAAG,EAAc,IAAK,OAAc,EAAY,EAElF,UAAC,SAAmB,EAAe,GAAG,EAAc,IAAK,OAAc,EAAY,CAE9F,GAGF,EAAY,YAAc,EAS1B,IAAM,EAA2B,aAC/B,CAAC,EAA6C,KAC5C,GAAM,OAAE,aAAO,GAAa,OAAO,WAAM,EAAU,GAAG,EAAa,CAAI,EAEjE,EADoB,EAAqB,EAAc,EADM,WACkB,EAClD,iBAAiB,IAAI,MACxC,aAEH,IAFG,EAAc,EAAW,EAAK,EAI1C,UAAC,GAAgB,IAAK,EAAe,GAAG,OAAc,EACnD,mBAAY,EAA0B,EAAK,CAC9C,EAD8C,IAMpD,GAUI,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,OAAE,aAAO,GAAa,OAAO,EAAM,GAAI,EAAQ,WAAU,GAAG,EAAa,CAAI,EAC7E,EAAoB,EAAqB,EAAc,EAAa,WAAW,EAC/E,EAAY,SAAiC,IAAI,EACjD,EAAc,OAAe,CAAC,EAAc,GAC5C,EAAM,OAAK,CAAC,EACZ,QAAK,IAAU,EAEf,EAA2B,UAAQ,KAAO,IAAE,QAAI,EAAM,EAAI,CAAC,EAAI,EAAM,EACrE,CADoE,6BAClE,kCAA8B,EAAgC,CAAI,EACpE,YAAU,KACd,EAA6B,EAAM,GAC5B,IAAM,EAAgC,EAAM,EAAmB,EAAE,GADnB,CAEnD,EAAoB,EAAM,EAA8B,EAAgC,EAE5F,IAAM,EAAW,EAAkB,iBAAiB,EAFuC,CAIrF,CAFkD,CACnC,EAAkB,qBAAqB,EAC7B,CAAa,CADoB,CAClB,QAE5C,GAAe,CAEb,EAFyB,CAAC,EAAgB,IAAa,EAIvD,EAJkD,CAIlD,OAAC,GAAgB,KAAQ,IAAK,EAAc,GAAG,OAAc,EAC1D,mBAAY,EACf,EAIG,IACT,GASI,EAAwB,aAC5B,CAAC,EAA0C,KACzC,GAAM,aAAE,EAAa,GAAI,OAAQ,EAAM,GAAG,EAAa,CAAI,EACrD,EAAyB,EAA0B,EAAc,EADhB,CAEjD,EAAM,MADsE,CACjE,CAAC,EACZ,QAAK,IAAU,EAEf,qBAAE,yBAAqB,EAAuB,CAAI,EAMxD,OAAO,EALD,UAAU,KACd,EAAoB,EAAM,EAAE,CACrB,IAAM,EAAuB,EAAM,EAAE,EAC3C,CAAC,EAAM,EAAI,EAAqB,EAAuB,EAEnD,UAAC,IAAS,CAAC,GAFuC,CAEvC,CAAV,IAAe,EAAS,GAAG,EAAc,IAAK,EAAc,CACtE,GAOI,EAAsB,oBAOtB,EAAoB,IACxB,GAAM,aAAE,EAAa,KAAM,WAAU,EAAS,CAAI,EAC5C,EAAoB,EAAqB,EAAqB,GAC9D,EAAe,EAAoB,EAAqB,EADiB,CAEzE,UAAO,EAAY,EAAa,KAChC,EAAW,EAAkB,iBAAiB,GACpD,CADwD,KACjD,sBAAG,WAAS,EAAQ,CAAE,CAC/B,EAEA,EAH6B,WAGX,CAAc,EAYhC,IAAM,EAAmB,aACvB,CAAC,EAAqC,KACpC,GAAM,aAAE,EAAa,GAAG,EAAY,CAAI,EACxC,MAAO,CAD6B,EAC7B,OAAC,IAAS,CAAC,OAAV,CAAiB,KAAK,SAAU,GAAG,EAAa,IAAK,EAAc,CAC7E,GAgBF,SAAS,EAAsB,GAAyB,IAChD,EAAc,CAAC,EACrB,QAAW,KAAO,EAChB,EAAO,EAAG,EAAI,CADY,EACoB,QAEzC,CACT,CAEA,SAAS,EAAc,GAAsC,OACpD,aAAmB,WAC5B,CAMA,SAAS,EAAU,GAAsB,MAHhC,aAKS,CALK,IAMS,EADP,EACpB,EAAQ,SAAS,OAA4D,SAAzC,EAAQ,aAAa,cAAc,CAAM,CAElF,CAEA,SAAS,EAAuB,GAE9B,GAAM,CAAC,EAAmB,CAAI,MAAM,KAAK,EADnB,GACI,GAAuB,EAD3B,EAC6B,OAAO,GAAe,OAAO,GAAT,MAAkB,CAClF,CACT,CAiBA,SAAS,EAAgB,GAAyB,IAC5C,GAAQ,EACZ,QAAW,KAAe,EAExB,GAAI,IAF8B,MACtB,GACW,mBAAyB,EAAS,EAAG,CAAG,CAC7D,GAAQ,EACR,KACF,CAEF,OAAO,CACT,CAEA,SAAS,EAAkB,EAAqC,GAAwB,GACtF,gBAAI,EAAU,SAAU,IAAQ,CAAC,EAAe,MAAO,EAEzD,CACA,GAHkD,MAGzC,EAAoB,EAAqC,GAChE,mBAAI,EAAU,UAAU,GAAS,EAAe,OAAO,CAEzD,CA5EA,EAAW,CA0EuC,UA1EvC,CAbS,EAaK,WAgFzB,IAAM,EAAO,EACP,EAAQ,EACR,EAAQ,EACR,EAAU,EACV,EAAU,EACV,EAAgB,EAChB,EAAS,2OCxqBX,2HAEE,EAAiB,YAGjB,CAAC,EAAwB,EAAoB,CAAI,OAAkB,CAAC,EAAgB,CACxF,IAAiB,CAClB,CAFkD,CAG7C,EAAiB,QAAiB,CAAC,EAYnC,CAAC,EAAmB,EAAmB,CAC3C,EAA8C,GAW1C,EAAsC,IAC1C,GAAM,CACJ,CAb0D,iBAa1D,UACA,EACA,KAAM,cACN,eACA,YACA,EAAY,eACZ,EAAa,IACf,CAAI,EACE,EAAc,EAAe,GAC7B,EAAqB,SAAO,CAAC,CADgB,CAE7C,EAAsB,SAAO,CAAC,EAC9B,EAAwB,UAAO,GAC/B,EAAkC,SAAO,IAEzC,CAF8C,EAEvC,EAAO,CAAI,IAAJ,CAAI,EAAoB,CAAC,CAC3C,KAAM,EACN,kBAAa,KACb,SAAU,EACV,CAF4B,MAEpB,CACV,CAAC,EAEK,EAAmB,cAAY,KACnC,aAAa,EAAc,OAAO,EAClC,EAAa,QAAU,OAAO,WAAW,IAAM,GAAQ,GAAO,CAAH,CAC7D,EAAG,CAAC,EAAW,EAD0D,EAGnE,EAAoB,CAFJ,CAEI,YAAY,KACpC,aAAa,EAAa,OAAO,EAC7B,EAAiB,SAAY,EAA0B,SAAS,CAClE,EAAc,QAAU,OAAO,WAAW,IAAM,GAAQ,GAAQ,EAAU,CAE9E,EAAG,CAAC,EAAY,EAAQ,EAElB,EAAsB,CAFL,CAEK,YAAY,IAAM,GAAQ,GAAQ,CAAC,CAAJ,CAAY,EAUvE,GAVsE,IAGhE,YAAU,IACP,KACL,aAAa,EAAa,OAAO,EACjC,aAAa,EAAc,OAAO,CACpC,EACC,CAAC,CAAC,EAGH,UAAC,GACC,MAAO,OACP,EACA,aAAc,EACd,OAAQ,EACR,QAAS,EACT,UAAW,kBACX,4BACA,EAEA,mBAAiB,KAAhB,CAAsB,GAAG,WAAc,EAAS,GAGvD,EAEA,EAAU,YAAc,EAMxB,IAAM,EAAe,mBAMf,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,GAAM,CAAE,mBAAkB,GAAG,EAAa,CAAI,EACxC,EAAU,EAAoB,EAAc,EADR,CAEpC,EAAc,EAAe,GACnC,MAFkE,CAGhE,MAFiD,CAEjD,EAAiB,KAAhB,CAAuB,SAAO,EAAE,GAAG,EAClC,mBAAC,IAAS,CAAC,EAAV,CACC,aAAY,EAAQ,KAAO,OAAS,SACnC,GAAG,EACJ,IAAK,EACL,eAAgB,OAAoB,CAAC,EAAM,eAAgB,EAAa,EAAQ,MAAM,CAAC,EACvF,eAAgB,OAAoB,CAAC,EAAM,eAAgB,EAAa,EAAQ,OAAO,CAAC,EACxF,QAAS,OAAoB,CAAC,EAAM,QAAS,EAAQ,MAAM,EAC3D,OAAQ,OAAoB,CAAC,EAAM,OAAQ,EAAQ,OAAO,EAE1D,aAAc,OAAoB,CAAC,EAAM,aAAc,GAAW,EAAM,eAAe,CAAC,GAC1F,CACF,CAEJ,GAGF,EAAiB,YAAc,EAM/B,IAAM,EAAc,kBAGd,CAAC,EAAgB,EAAgB,CAAI,EAA2C,EAAa,CACjG,QADqC,GACzB,MACd,CAAC,EAgBK,EAAkD,IAGtD,GAAM,kBAAE,aAAkB,WAAY,EAAU,YAAU,CAAI,EACxD,EAAU,EAAoB,EAAa,GACjD,MACE,OAF+D,CAE/D,EAAC,GAAe,MAAO,aAAkB,EACvC,mBAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAAQ,KACvC,mBAAC,QAAe,CAAf,CAAgB,SAAO,YAAC,WACtB,EACH,EACF,EACF,CAEJ,EAEA,EAAgB,YAAc,EAM9B,IAAM,EAAe,mBAWf,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,IAAM,EAAgB,EAAiB,EAAc,EAAM,gBAAgB,EACrE,YAAE,EAAa,EAAc,WAAY,GAAG,EAAa,CAAI,EAC7D,EAAU,EAAoB,EAAc,EAAM,gBAAgB,EACxE,MACE,UAAC,GAAQ,CAAR,CAAS,QAAS,GAAc,EAAQ,KACvC,mBAAC,GACC,aAAY,EAAQ,KAAO,OAAS,SACnC,GAAG,EACJ,eAAgB,OAAoB,CAAC,EAAM,eAAgB,EAAa,EAAQ,MAAM,CAAC,EACvF,eAAgB,OAAoB,CAAC,EAAM,eAAgB,EAAa,EAAQ,OAAO,CAAC,EACxF,IAAK,GACP,CACF,CAEJ,GAGF,EAAiB,YAAc,EA+B/B,IAAM,EAA6B,aAGjC,CAAC,EAA+C,KAChD,GAAM,kBACJ,kBACA,EACA,sCACA,oBACA,EACA,GAAG,EACL,CAAI,EACE,EAAU,EAAoB,EAAc,GAC5C,EAAc,EAAe,GAC7B,EAAY,IAFgD,IAEhD,CAAoC,EADH,EACO,EACpD,EAAe,OAAe,CAAC,EAAc,GAC7C,CAAC,EAAkB,EAAmB,CAAU,YAAS,GA+C/D,CA/C4C,CAAwB,KAE9D,YAAU,KACd,GAAI,EAAkB,CACpB,IAAM,EAAO,SAAS,KAOtB,OAJA,EAAyB,EAAK,MAAM,YAAc,EAAK,MAAM,iBAE7D,EAAK,MAAM,WAAa,OACxB,EAAK,MAAM,iBAAmB,OACvB,KACL,EAAK,MAAM,WAAa,EACxB,EAAK,MAAM,iBAAmB,CAChC,CACF,CACF,EAAG,CAAC,EAAiB,EAEf,YAAU,KACd,GAAI,EAAI,QAAS,CACf,IAAM,EAAkB,KACtB,EAAoB,IACpB,CADyB,CACjB,0BAA0B,SAAU,EAG5C,WAAW,UAEL,CADE,QAAe,IACH,OADY,cAAa,WAAG,UAAS,IAAM,IAC3C,GAAQ,gBAAgB,SAAU,EACtD,CAAC,CACH,EAGA,OADA,SAAS,iBAAiB,YAAa,GAChC,KACL,OAFoD,EAE3C,oBAAoB,YAAa,GAC1C,EAAQ,UADiD,KACjD,CAAgB,SAAU,EAClC,EAAQ,0BAA0B,SAAU,CAC9C,CACF,CACF,EAAG,CAAC,EAAQ,0BAA2B,EAAQ,eAAe,CAAC,EAEzD,YAAU,KACV,EAAI,SAAS,SAgFZ,CAAiB,GAAwB,IAC1C,EAAuB,CAAC,EACxB,EAAS,SAAS,iBAAiB,EAAW,WAAW,aAAc,CAC3E,WAAY,GAIH,EAAK,UAAY,EAAI,WAAW,cAAgB,WAAW,YAErE,EACD,KAAO,EAAO,SAAS,GAAG,EAAM,KAAK,EAAO,WAA0B,EACtE,OAAO,EACT,EA3FyC,EAAI,OAAO,EACpC,QAAQ,GAAc,EAAS,aAAa,WAAY,IAAI,CAAC,CAE3E,CAAC,EAGC,UAAC,IAAgB,CAAhB,CACC,SAAO,EACP,6BAA6B,oBAC7B,kBACA,uBACA,EACA,eAAgB,OAAoB,CAAC,EAAgB,IACnD,EAAM,eAAe,CACvB,CAAC,EACD,UAAW,EAAQ,UAEnB,mBAAiB,KAAhB,CACE,GAAG,EACH,GAAG,EACJ,cAAe,OAAoB,CAAC,EAAa,cAAe,IAE1D,EAAM,cAAc,SAAS,EAAM,MAAqB,GAAG,GACzC,GAEtB,CAF0B,CAElB,gBAAgB,SAAU,EAClC,EAAQ,0BAA0B,SAAU,CAC9C,CAAC,EACD,IAAK,EACL,MAAO,CACL,GAAG,EAAa,MAChB,WAAY,EAAmB,OAAS,OAExC,iBAAkB,EAAmB,OAAS,OAG5C,8CAA+C,uCAC/C,6CAA8C,sCAC9C,8CAA+C,uCAC/C,mCAAoC,mCACpC,oCAAqC,mCAEzC,GACF,EAGN,CAAC,EAYK,EAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,kBAAE,EAAkB,GAAG,EAAW,CAAI,EACtC,EAAc,EAAe,EADK,CAExC,MAAO,OAD4C,CAC5C,EAAiB,KAAhB,CAAuB,GAAG,EAAc,GAAG,EAAY,IAAK,EAAc,CACpF,GAOF,SAAS,EAAgB,GAA0B,OAC1C,GACiB,UAAtB,EAAM,YAA0B,OAAY,GAChD,CAPA,EAAe,OAM8C,IAN9C,CAdI,EAcU,eA2B7B,IAAMzB,EAAO,EACP,EAAU,EACV,EAAS,EACTQ,EAAU,EACVkB,EAAQ,mDCzZd,aACA,MAAS,0BAAoB,CAC7B,EACA,OACA,OAEA,CACA,aACA,WACA,CACA,mBCDA,MAAY,EAAQ,KAAO,EAI3B,UAJmB,IAInB,2BAHA,cACA,2CACA,EAEA,aACA,cACA,oBACA,kBA0BA,cACA,oBACA,UACA,IACA,UACA,aACA,CAAI,SACJ,QACA,CACA,CAIA,MACA,4BACA,0BACA,uCANA,cACA,UACA,EArCA,cACA,UACA,KAA2B,MAAQ,uBAA0C,EAC7E,YACA,OAmBA,OAlBA,EACA,WACA,UACA,gBACA,SAAoD,OAAY,CAChE,CAAK,CACL,SAEA,EACA,WAEA,OADA,SAAoD,OAAY,EAChE,aACA,SAAsD,OAAY,CAClE,CAAO,CACP,CAAK,CACL,KAEA,KACA,CACA,EAoBA,sBAA4B,CAC5B,41BC3CM,EAAe,UAGf,CAAC,EAAY,EAAe,EAAqB,CAAI,OAAgB,CAGzE,GAGI,CAAC,EAAsB,EAAkB,CAAI,GAHrC,EAGqC,EAAkB,CAAC,EAAc,CAClF,EACA,IAA2B,CAC5B,EAEK,EAAe,QAAe,CAAC,EAC/B,EAA2B,QAA2B,CAAC,EAWvD,CAAC,EAAwB,EAAiB,CAC9C,EAA0C,GAatC,EAAgB,OAd0B,KAc1B,CACpB,CAAC,EAAkC,KACjC,GAAM,gBACJ,EACA,MAAO,gBACP,eACA,OACA,GAAO,EACP,MACA,GAAG,EACL,CAAI,EACE,EAAY,QAAY,CAAC,GACzB,EAAwB,EAAyB,GACjD,CAAC,EAAO,EAAQ,CAAI,KAD2C,CAC3C,CAAoB,CAAC,CAC7C,KAAM,EACN,SAAU,EACV,oBAAa,EAAgB,GAC7B,OAAQ,CACV,CAAC,EAKK,CAAC,EAAkB,EAAmB,CAAU,WAAwB,IAAI,CAAtC,CAE5C,MACE,UAAC,GACC,MAAO,QACP,EACA,WAAkB,cAChB,IACE,EAASb,GACT,EAAoBA,CADN,CAEhB,EACA,CAAC,CAF0B,CAElB,EAEX,IAFW,QAEQ,cAAY,IAAM,EAAS,EAAE,EAAG,CAAC,EAAS,EAC7D,IAD4D,SACxC,cAClB,IACE,EAAS,GAAgB,EAAY,GAAKA,GAG1C,EAAoBA,CAH4B,CAIlD,EACA,CAAC,CAF0B,CAElB,EAEX,IAFW,OAGX,EAEA,mBAAC,EAAW,SAAX,CAAoB,MAAO,EAC1B,mBAAC,EAAW,KAAX,CAAgB,MAAO,EACtB,mBAAkB,KAAjB,CACC,SAAO,EACN,GAAG,EACJ,YAAY,kBACZ,EACA,IAAK,mBACL,EACA,yBAA0B,EAE1B,mBAAC,IAAS,CAAC,IAAV,CAAc,KAAK,UAAW,GAAG,EAAc,IAAK,EAAc,GACrE,CACF,EACF,GAGN,GAGF,EAAQ,YAAc,EAMtB,IAAM,EAAY,cAUZ,CAAC,EAAqB,EAAqB,CAC/C,EAA8C,GAO1C,EAAc,IAClB,GAAM,IATyC,YASvC,EAAgB,MAAO,EAAW,GAAG,EAAU,CAAI,EACrD,EAAY,GADqC,EACrC,EAAK,CAAC,EAGlB,EAAQ,GAAa,GAAa,0BAClC,EAAU,EAAkB,EAAW,GACvC,EAAY,EAAa,GACzB,EAAmB,EAFkC,MAElC,CAA8B,IAAI,EACrD,EAAkC,UAAO,GACzC,EAD8C,EAC/B,QAAU,EAM/B,OAJM,YAAU,KACV,GAAO,GAA0B,QAAU,GACjD,EAAG,CAAC,EAAK,EAAD,CAGN,SAAC,GACC,MAAO,EACP,QACA,UAAW,OAAK,CAAC,aACjB,EACA,UAAW,OAAK,CAAC,EACjB,4BAEA,mBAAe,KAAd,CACE,GAAG,OACJ,EACA,aAAc,IAGR,GAAO,EAAQ,CAAR,UAAQ,CAAY,CACjC,EACA,OAAO,EACP,IAAK,EAAQ,IACZ,GAAG,GACN,EAGN,EAEA,EAAY,YAAc,EAM1B,IAAM,EAAe,iBAMf,EAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,gBAAE,WAAgB,GAAW,EAAO,GAAG,EAAa,CAAI,EACxD,EAAwB,EAAyB,GACjD,CAFoD,CAExC,EAAa,GACzB,EAAU,EAAkB,EAAc,GAC1C,EAAc,EAAsB,EAAc,GAClD,EAFwD,EAE5C,OADoD,IAClB,EAC9C,EAAe,OAAe,CAAC,EAAc,EAAK,EAAY,UAAU,EACxE,CAAC,EAAW,EAAY,CAAU,SAAV,CAAU,EAAS,GAC3C,EADgD,EACjC,QAAU,EAAY,MAE3C,MACE,UAAC,EAAW,SAAX,CAAoB,MAAO,EAAgB,MAAO,EAAY,eAAO,EACpE,mBAAkB,KAAjB,CACC,SAAO,EACN,GAAG,EACJ,UAAW,CAAC,EACZ,UAAW,EAAY,MAEvB,mBAAe,KAAd,CAAqB,SAAO,EAAE,GAAG,EAChC,mBAAC,IAAS,CAAC,OAAV,CACC,KAAK,SACL,KAAK,WACL,GAAI,EAAY,UAChB,gBAAc,OACd,gBAAe,EACf,gBAAe,EAAO,EAAY,UAAY,OAC9C,mBAAkB,EAAY,GAAK,OACnC,aAAY,EAAO,OAAS,SAC5B,gBAAe,EAAW,GAAK,gBAC/B,EACC,GAAG,EACJ,IAAK,EACL,cAAe,OAAoB,CAAC,EAAM,cAAe,IAGnD,CAAC,GAAY,MAAM,SAAkC,IAAlB,EAAM,CAAmB,MAAnB,GAC3C,EAAQ,WAAW,EAAY,KAAK,EAG/B,GAAM,gBAAM,CAAe,EAEpC,CAAC,EACD,eAAgB,OAAoB,CAAC,EAAM,eAAgB,KAEzD,GAAI,EADgC,KAAK,EACtB,CAAC,EAAM,KAExB,EADA,EAAQ,WAAW,EAAY,KAAK,SACpC,IAAI,UAAJ,EAAa,MAAM,CACrB,CACF,CAAC,EACD,UAAW,OAAoB,CAAC,EAAM,UAAY,KAC5C,IACA,CAAC,IADS,IACA,GAAG,EAAE,SAAS,EAAM,GAAG,EAAG,GAAQ,aAAa,EAAY,KAAK,EAC5D,YAAa,EAA3B,EAAM,KAAqB,EAAQ,WAAW,EAAY,KAAK,EAG/D,CAAC,QAAS,IAAK,WAAW,EAAE,SAAS,EAAM,GAAG,GAAG,CACnD,EAAY,0BAA0B,SAAU,EAChD,EAAM,eAAe,GAEzB,CAAC,EACD,QAAS,OAAoB,CAAC,EAAM,QAAS,IAAM,GAAa,IAAI,CAAC,MAC7D,OAAoB,CAAC,EAAM,OAAQ,IAAM,GAAa,GAAM,EACtE,CACF,GACF,CACF,CAEJ,GAGF,EAAe,YAAc,EAW7B,IAAM,EAA8C,IAClD,GAAM,gBAAE,EAAgB,GAAG,EAAY,CAAI,EACrC,EAAY,EAAa,GAC/B,MAAO,KADsC,GACtC,EAAe,KAAd,CAAsB,GAAG,EAAY,GAAG,EAAa,CAC/D,EAEA,EAAc,YAXM,EAWQ,cAM5B,IAAM,EAAe,iBAMf,EAAuB,aAC3B,CAAC,EAAyC,KACxC,GAAM,gBAAE,EAAgB,QAAQ,QAAS,GAAG,EAAa,CAAI,EACvD,EAAY,EAAa,GACzB,CAFmD,CAEzC,EAAkB,EAAc,GAC1C,EAFuC,EAEH,EAAc,GAClD,EAAW,EAAc,GACzB,EAAgC,SADO,CACA,GAE7C,EAFkD,IAGhD,UAAe,KAAd,CACC,GAAI,EAAY,UAChB,kBAAiB,EAAY,UAC7B,6BAA2B,GAC1B,GAAG,EACH,GAAG,EACJ,IAAK,QACL,EACA,iBAAkB,OAAoB,CAAC,EAAM,iBAAmB,IAE9D,GAAI,CADwB,EAAQ,KAAK,EACrB,CAAC,EAAwB,QAAS,KACpD,aAAY,WAAW,UAAvB,EAAgC,MAAM,CACxC,CAEA,CAHE,CAGsB,SAAU,EAElC,EAAM,eAAe,CACvB,CAAC,EACD,eAAgB,OAAoB,CAAC,EAAM,eAAgB,IACzD,IAAM,EAAS,EAAM,OACI,IAAW,KAAF,OACZ,qBADkC,IAAI,gBAAT,EAAkB,SAAS,MACxD,CAD+D,CACzD,eAAe,CAC7C,CAAC,EACD,kBAAmB,OAAoB,CAAC,EAAM,kBAAmB,KAC/D,EAAwB,SAAU,CACpC,CAAC,EACD,aAAc,IACR,EAAa,0BAA0B,QAAS,GAAM,eAAe,CAC3E,EACA,UAAW,OAAoB,CAC7B,EAAM,UACN,IACE,GAAI,CAAC,aAAc,WAAW,EAAE,SAAS,EAAM,GAAG,EAAG,CACnD,IAAM,EAAS,EAAM,OACf,EAAqB,EAAO,aAAa,+BAA+B,EACxE,EACJ,EAAO,QAAQ,8BAA8B,IAAM,EAAM,cAGrD,EAAY,CADkB,QAAhB,EAAQ,IAAgB,aAAe,eACzB,EAAM,IAIxC,GAHkB,CAAC,GAGF,GAEb,GAA0B,EAFO,OAKrC,CAHyC,GAFJ,EAIvB,IAAW,KAAF,CAAE,CAAO,GAAU,CAAC,EAAK,QAAQ,EAC5B,IAAK,GAAS,EAAK,KAAK,EAChD,GAAW,EAAgB,KAAhB,EAAgB,CAAQ,EAEvC,IAAM,EAAe,EAAgB,QAAQ,EAAY,KAAK,EAMxD,CAAC,EAAS,CAJhB,EAIoB,EAJM,EAIV,EAJU,CACtB,SAwTI,EAAY,GAAoB,OAC7C,EAAM,IAAO,CAAC,EAAG,IAAU,GAAO,EAAa,GAAS,EAAM,MAAM,CAAE,CAC/E,EA1T4B,EAAiB,EAAe,CAAC,EAC3C,EAAgB,MAAM,EAAe,CAAC,EAGtC,GAAW,EAAQ,KAAR,KAAQ,CAAW,EACpC,CACF,EACA,CAAE,GAH6C,uBAGnB,CAAM,GAEpC,MAAO,CACL,GAAG,EAAM,MAGP,2CAA4C,uCAC5C,0CAA2C,sCAC3C,2CAA4C,uCAC5C,gCAAiC,mCACjC,iCAAkC,mCAEtC,GAGN,GAGF,EAAe,YAAc,EAY7B,IAAM,EAAqB,aACzB,CAAC,EAAuC,KACtC,GAAM,gBAAE,EAAgB,GAAG,EAAW,CAAI,EACpC,EAAY,EAAa,EADO,CAEtC,MAAO,KADsC,GACtC,EAAe,KAAd,CAAqB,GAAG,EAAY,GAAG,EAAY,IAAK,EAAc,CAChF,EAGF,GAAa,YAdM,EAcQ,aAY3B,IAAM,EAAqB,aACzB,CAAC,EAAuC,KACtC,GAAM,CAAE,iBAAgB,GAAG,EAAW,CAAI,EACpC,EAAY,EAAa,EADO,CAEtC,MAAO,KADsC,GACtC,EAAe,KAAd,CAAqB,GAAG,EAAY,GAAG,EAAY,IAAK,EAAc,CAChF,GAGF,EAAa,YAdM,EAcQ,aAY3B,IAAM,EAAoB,aACxB,CAAC,EAAsC,KACrC,GAAM,gBAAE,EAAgB,GAAG,EAAU,CAAI,EACnC,EAAY,EAAa,CADM,EAErC,MAAO,UAAe,KAAd,CAAoB,GAAG,EAAY,GAAG,EAAW,IAAK,EAAc,CAC9E,GAGF,EAAY,YAdM,EAcQ,YAY1B,IAAM,EAA4B,aAChC,CAAC,EAA8C,KAC7C,GAAM,gBAAE,EAAgB,GAAG,EAAkB,CAAI,EAC3C,EAAY,EAAa,GAC/B,MAF6C,CAEtC,IADsC,GACtC,EAAe,KAAd,CAA4B,GAAG,EAAY,GAAG,EAAmB,IAAK,EAAc,CAC9F,GAGF,EAAoB,YAdO,EAcO,oBAYlC,IAAM,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,gBAAE,EAAgB,GAAG,EAAgB,CAAI,EACzC,EAAY,EAAa,GAC/B,IAF2C,EAEpC,KADsC,GACtC,EAAe,KAAd,CAA0B,GAAG,EAAY,GAAG,EAAiB,IAAK,EAAc,CAC1F,GAGF,EAAkB,YAdO,EAcO,kBAYhC,IAAM,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,GAAM,gBAAE,EAAgB,GAAG,EAAe,CAAI,EACxC,EAAY,EAAa,GAC/B,GAF0C,GAEnC,KADsC,GACtC,EAAe,KAAd,CAAyB,GAAG,EAAY,GAAG,EAAgB,IAAK,EAAc,CACxF,GAGF,EAAiB,YAdO,EAcO,iBAY/B,IAAM,EAA6B,aAGjC,CAAC,EAA+C,KAChD,GAAM,gBAAE,EAAgB,GAAG,EAAmB,CAAI,EAC5C,EAAY,EAAa,GAC/B,MAAO,CAFuC,EAEvC,OAAe,KAAd,CAA6B,GAAG,EAAY,GAAG,EAAoB,IAAK,EAAc,CAChG,CAAC,EAED,EAAqB,YAfE,EAeY,qBAYnC,IAAM,EAAyB,aAC7B,CAAC,EAA2C,KAC1C,GAAM,gBAAE,EAAgB,GAAG,EAAe,CAAI,EACxC,EAAY,EAAa,GAC/B,GAF0C,GAEnC,KADsC,GACtC,EAAe,KAAd,CAAyB,GAAG,EAAY,GAAG,EAAgB,IAAK,EAAc,CACxF,GAGF,EAAiB,YAdM,EAcQ,iBAY/B,IAAM,EAAqB,aACzB,CAAC,EAAuC,KACtC,GAAM,CAAE,iBAAgB,GAAG,EAAW,CAAI,EACpC,EAAY,EAAa,EADO,CAEtC,MAAO,UAAe,KAAd,CAAqB,GAAG,EAAY,GAAG,EAAY,IAAK,EAAc,CAChF,EAGF,GAAa,YAdM,EAcQ,aAM3B,IAAM,EAAW,aASX,EAAwC,IAC5C,GAAM,gBAAE,WAAgB,EAAU,KAAM,eAAU,cAAc,EAAY,CAAI,EAC1E,EAAY,EAAa,GACzB,CAAC,EAAM,EAAO,CAAI,IAAJ,CADyB,CACrB,CAAoB,CAAC,CAC3C,KAAM,EACN,qBAAa,EACb,SAAU,EACV,CAF4B,MAEpB,CACV,CAAC,EAED,MACE,UAAe,KAAd,CAAmB,GAAG,OAAW,EAAY,aAAc,WACzD,EACH,CAEJ,EAEA,EAAW,YAAc,EAYzB,IAAM,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,gBAAE,EAAgB,GAAG,EAAgB,CAAI,EACzC,EAAY,EAAa,GAC/B,IAF2C,EAGzC,UAAe,KAAd,CACC,gCAA8B,GAC7B,GAAG,EACH,GAAG,EACJ,IAAK,GAGX,GAGF,EAAkB,YArBO,EAqBO,kBAYhC,IAAM,EAA0B,aAC9B,CAAC,EAA4C,KAC3C,GAAM,gBAAE,EAAgB,GAAG,EAAgB,CAAI,EACzC,EAAY,EAAa,GAE/B,IAH2C,EAIzC,KAH2C,GAG3C,EAAe,KAAd,CACE,GAAG,EACJ,6BAA2B,GAC1B,GAAG,EACJ,IAAK,EACL,MAAO,CACL,GAAG,EAAM,MAGP,2CAA4C,uCAC5C,0CAA2C,sCAC3C,2CAA4C,uCAC5C,gCAAiC,mCACjC,iCAAkC,mCAEtC,GAGN,GAGF,EAAkB,YAjCO,EAiCO,kBAYhC,IAAMb,EAAO,EACP,EAAO,EACP,EAAU,EACVM,EAAS,EACTE,EAAU,EACVmB,EAAQ,EACRC,GAAQ,EACR1B,GAAO,EACP2B,GAAe,EACfC,GAAa,EACbC,GAAY,EACZC,GAAgB,EAChBC,GAAY,EACZP,GAAQ,EACRQ,GAAM,EACNC,GAAa,EACbC,GAAa,iWC7qBb,EAAiB,YACjB,EAAiB,CAAC,OAAQ,MAAO,YAAa,UAAW,YAAa,YAAY,EAElF,CAAC,EAAY,EAAe,EAAqB,CACrD,OAAgB,CAA0B,GAGtC,CAAC,EAAwB,EAAoB,CAAI,KAHG,CAGH,CAAkB,CAAC,EAAgB,CACxF,EACA,IAFiD,oBAE3B,CACvB,EACK,EAAsB,4BAAsB,CAAC,EAU7C,EAAY,YAAM,CACtB,CAAC,EAAmE,KAClE,GAAM,MAAE,EAAM,GAAG,EAAe,CAAI,EAGpC,MACE,IAJ8B,CAI9B,KAAC,EAAW,SAAX,CAAoB,MAAO,EAAM,iBAC/B,wBACC,UAAC,GAJe,IAIQ,CAAkB,EAAf,EAAoB,EAAc,EAE7D,UAAC,GAPa,IAOQ,CAAgB,EAAb,EAAkB,EAAc,EAE7D,CAEJ,GAGF,EAAU,YAAc,EAUxB,GAAM,CAAC,EAAwB,EAAwB,CACrD,EAAmD,GAE/C,CAAC,EAA8B,EAA8B,CAAI,EACrE,EACA,CAJiE,KADZ,OAKtC,EAAM,GAyBjB,EAAsB,GA3BuC,SA2BjC,CAChC,CAAC,EAA8C,KAC7C,GAAM,CACJ,MAAO,eACP,gBACA,EAAgB,KAAO,CAAD,aACtB,GAAc,EACd,GAAG,EACL,CAAI,EAEE,CAAC,EAAO,EAAQ,CAAI,KAAJ,CAAI,CAAoB,CAAC,CAC7C,KAAM,EACN,oBAAa,EAAgB,GAC7B,SAAU,EACV,OAAQ,CACV,CAAC,EAED,MACE,UAAC,GACC,MAAO,EAAM,iBACb,MAAO,SAAM,CAAQ,IAAO,EAAQ,CAAC,EAAK,CAAI,CAAC,CAAL,CAAS,CAAC,EAAM,EAC1D,CADyD,UAC7C,EACZ,YAAa,aAAM,CAAY,IAAM,GAAe,EAAS,EAAE,EAAG,CAAC,EAAa,EAAS,EAEzF,IAFwF,KAExF,UAAC,GAA6B,MAAO,EAAM,6BAAkB,EAC3D,mBAAC,GAAe,GAAG,EAAsB,IAAK,EAAc,EAC9D,GAGN,GAsBI,EAAwB,YAAM,CAGlC,CAAC,EAAgD,KACjD,GAAM,CACJ,MAAO,eACP,gBACA,EAAgB,KAAO,CAAD,CACtB,GAAG,EACL,CAAI,EAEE,CAAC,EAAO,EAAQ,CAAI,KAAJ,CAAI,CAAoB,CAAC,CAC7C,KAAM,EACN,oBAAa,EAAgB,CAAC,EAC9B,SAAU,EACV,OAAQ,CACV,CAAC,EAEK,EAAiB,aAAM,CAC3B,GAAuB,EAAS,eAAC,yDAAY,CAAC,QAAM,CAAC,GAAG,EAAW,EAAU,GAC7E,CAAC,EAAQ,CADmE,CAIxE,EAAkB,EAHb,WAGmB,CAC5B,GACE,EAAS,eAAC,yDAAY,CAAC,SAAM,EAAU,OAAO,GAAWvB,IAAU,KACrE,CAAC,EAAQ,CADqE,CAAC,IACtE,EAIT,UAAC,GACC,MAAO,EAAM,uBACb,EACA,WAAY,EACZ,YAAa,EAEb,mBAAC,GAA6B,MAAO,EAAM,iBAAkB,aAAa,EACxE,mBAAC,GAAe,GAAG,EAAwB,IAAK,EAAc,EAChE,GAGN,CAAC,EAUK,CAAC,EAAuB,EAAmB,CAC/C,EAAkD,GAsB9C,EAAgB,SAvB2B,GAuBrB,CAC1B,CAAC,EAAwC,KACvC,GAAM,kBAAE,WAAkB,MAAU,cAAK,EAAc,WAAY,GAAG,EAAe,CAAI,EACnF,EAAe,QADgE,CAC7B,IAAI,EACtD,EAAe,OAAe,CAAC,EAAc,GAC7C,EAAW,EAAc,GAEzB,EAHyD,QAE7C,GAD6B,EAC7B,GAAY,CAAC,GAAG,EAGZ,OAAoB,CAAC,EAAM,UAAW,QAoE1D,EAnEA,GAAI,CAAC,EAAe,SAAS,EAAM,GAAG,EAAG,OACzC,IAAM,EAAS,EAAM,OACf,EAAoB,IAAW,KAAF,CAAE,CAAO,gBAAU,aAAM,IAAI,gBAAT,EAAkB,YACnE,EAAe,EAAkB,UAAU,GAAU,EAAK,IAAI,UAAY,GAC1E,EAAe,CADiE,CAC/C,OAEvC,GAAqB,GAAI,EAArB,EAAqB,OAGzB,EAAM,eAAe,EAErB,IAAI,EAAY,EAEV,EAAW,EAAe,EAE1B,EAAW,KAEX,CADJ,EAAY,EAAe,GACX,IACd,GAAY,CAEhB,EAH4B,EAKX,IAJD,CAMV,CADJ,EAAY,GAAe,MACX,EACF,EAEhB,EAEA,KAL6B,EAKrB,EAAM,KAAK,IACZ,OACH,EAnBc,EAoBd,KACF,GAFc,EAET,MACH,EAAY,EACZ,KACF,KAAK,aACiB,cAAc,CAA9B,IACE,EACF,IAEA,KAGJ,IAHa,CAIf,KAAK,YACiB,YAAY,CAA5B,GACF,IAEF,KAFW,KAGR,YACiB,cAAc,CAA9B,IACE,EACF,IAEA,KAFS,IAEA,CAIf,KAAK,UACC,YAA4B,IAC9B,GAGN,MAHe,EAMf,IADqB,EAAY,EACH,CAAG,IAAI,GAAP,IAAO,GAArC,EAA8C,MAAM,CACtD,CAAC,CADC,CAGF,MACE,UAAC,GACC,MAAO,WACP,EACA,UAAW,cACX,EAEA,mBAAC,EAAW,KAAX,CAAgB,MAAO,EACtB,mBAAC,IAAS,CAAC,IAAV,CACE,GAAG,EACJ,mBAAkB,EAClB,IAAK,EACL,UAAW,EAAW,OAAY,GACpC,CACF,GAGN,GAOI,EAAY,gBAGZ,CAAC,EAAuB,EAAuB,CACnD,EAAkD,GAqB9C,EAAgB,IArBuC,QAqBjC,CAtByB,CAuBlD,EAAwC,KACvC,GAAM,kBAAE,QAAkB,EAAO,GAAG,EAAmB,CAAI,EACrD,EAAmB,EAAoB,EAAW,GAClD,EAAe,EAAyB,CAFS,CAEE,GACnD,EAAmB,EAAoB,GACvC,EAAY,IAFuD,CAEvD,EAAK,CAAC,EAClB,CAFuD,CAE/C,GAAS,EAAa,MAAM,SAAS,KAAK,EAClD,EAAW,EAAiB,UAAY,EAAM,SAEpD,MACE,UAAC,GACC,MAAO,OACP,EACA,qBACA,EAEA,mBAAsB,OAArB,CACC,mBAAkB,EAAiB,YACnC,aAAY,EAAS,GACpB,CADwB,EACrB,EACH,GAAG,EACJ,IAAK,WACL,OACA,EACA,aAAc,IACRwB,EACF,EAAa,GADL,OACK,CAAW,GAExB,EAF6B,WAEhB,CAAY,EAE7B,GAFkC,EAM1C,GAGF,EAAc,YAAc,EAM5B,IAAM,EAAc,kBAUd,EAAkB,YAAM,CAC5B,CAAC,EAA0C,KACzC,GAAM,kBAAE,EAAkB,GAAG,EAAY,CAAI,EACvC,EAAmB,EAAoB,EAAgB,CADpB,EAEnC,EAAc,EAAwB,EAAa,GACzD,IAF6E,EAG3E,OAFuE,CAEvE,EAAC,IAAS,CAAC,GAAV,CACC,mBAAkB,EAAiB,YACnC,aAAY,EAAS,EAAY,IAAI,EACrC,gBAAe,EAAY,SAAW,GAAK,OAC1C,GAAG,EACJ,IAAK,GAGX,GAGF,EAAgB,YAAc,EAM9B,IAAM,EAAe,mBAUf,EAAmB,YAAM,CAC7B,CAAC,EAA2C,KAC1C,GAAM,kBAAE,EAAkB,GAAG,EAAa,CAAI,EACxC,EAAmB,EAAoB,EAAgB,EADnB,CAEpC,EAAc,EAAwB,EAAc,GACpD,EAAqB,EAA+B,EAAc,GAClE,EAAmB,EAAoB,GAC7C,MAFwF,CAGtF,MAF2D,CAE3D,EAAC,EAAW,SAAX,CAAoB,MAAO,EAC1B,mBAAsB,UAArB,CACC,gBAAgB,EAAY,MAAQ,CAAC,EAAmB,aAAgB,OACxE,mBAAkB,EAAiB,YACnC,GAAI,EAAY,UACf,GAAG,EACH,GAAG,EACJ,IAAK,GACP,CACF,CAEJ,GAGF,EAAiB,YAAc,EAM/B,IAAM,EAAe,mBASf,EAAmB,YAAM,CAC7B,CAAC,EAA2C,KAC1C,GAAM,kBAAE,EAAkB,GAAG,EAAa,CAAI,EACxC,EAAmB,EAAoB,EAAgB,EADnB,CAEpC,EAAc,EAAwB,EAAc,GACpD,EAAmB,EAAoB,GAC7C,MACE,OAF2D,CAE3D,EAAsB,UAArB,CACC,KAAK,SACL,kBAAiB,EAAY,UAC7B,mBAAkB,EAAiB,YAClC,GAAG,EACH,GAAG,EACJ,IAAK,EACL,MAAO,CACJ,kCAAyC,CAAG,0CAC5C,iCAAwC,CAAG,yCAC5C,GAAG,EAAM,MACX,EAGN,GAOF,SAAS,EAAS,GAAgB,OACzB,EAAO,OAAS,QACzB,CANA,EAAiB,YAAc,EAQ/B,IAAMrC,EAAO,EACP,EAAO,EACP,EAAS,EACTK,EAAU,EACVG,EAAU","sources":["webpack://_N_E/../src/radio-group.tsx","webpack://_N_E/../src/radio.tsx","webpack://_N_E/../src/alert-dialog.tsx","webpack://_N_E/../src/collapsible.tsx","webpack://_N_E/../src/password-toggle-field.tsx","webpack://_N_E/../src/toggle-group.tsx","webpack://_N_E/../../node_modules/.bun/use-sync-external-store@1.5.0+f4eacebf2041cd4f/node_modules/use-sync-external-store/shim/index.js","webpack://_N_E/../../node_modules/.bun/@radix-ui+react-use-effect-event@0.0.2+0e2fb8dbc083adda/node_modules/@radix-ui/react-use-effect-event/dist/index.mjs","webpack://_N_E/../src/toast.tsx","webpack://_N_E/../src/one-time-password-field.tsx","webpack://_N_E/../src/scroll-area.tsx","webpack://_N_E/../src/use-state-machine.ts","webpack://_N_E/../src/toolbar.tsx","webpack://_N_E/../src/toggle.tsx","webpack://_N_E/../src/avatar.tsx","webpack://_N_E/../src/navigation-menu.tsx","webpack://_N_E/../src/progress.tsx","webpack://_N_E/../src/form.tsx","webpack://_N_E/../src/hover-card.tsx","webpack://_N_E/../../node_modules/.bun/@radix-ui+react-use-is-hydrated@0.1.0+0e2fb8dbc083adda/node_modules/@radix-ui/react-use-is-hydrated/dist/index.mjs","webpack://_N_E/../../node_modules/.bun/use-sync-external-store@1.5.0+f4eacebf2041cd4f/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js","webpack://_N_E/../src/menubar.tsx","webpack://_N_E/../src/accordion.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './radio';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value: string | null;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ComponentRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: string | null;\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue ?? null,\n      onChange: onValueChange as (value: string | null) => void,\n      caller: RADIO_GROUP_NAME,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ComponentRef<typeof Radio>;\ntype RadioProps = React.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ComponentRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ComponentRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = React.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      form,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <RadioBubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioBubbleInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUBBLE_INPUT_NAME = 'RadioBubbleInput';\n\ntype InputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface RadioBubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst RadioBubbleInput = React.forwardRef<HTMLInputElement, RadioBubbleInputProps>(\n  (\n    {\n      __scopeRadio,\n      control,\n      checked,\n      bubbles = true,\n      ...props\n    }: ScopedProps<RadioBubbleInputProps>,\n    forwardedRef\n  ) => {\n    const ref = React.useRef<HTMLInputElement>(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n\n    // Bubble checked change to parents (e.g form change event)\n    React.useEffect(() => {\n      const input = ref.current;\n      if (!input) return;\n\n      const inputProto = window.HTMLInputElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        inputProto,\n        'checked'\n      ) as PropertyDescriptor;\n      const setChecked = descriptor.set;\n      if (prevChecked !== checked && setChecked) {\n        const event = new Event('click', { bubbles });\n        setChecked.call(input, checked);\n        input.dispatchEvent(event);\n      }\n    }, [prevChecked, checked, bubbles]);\n\n    return (\n      <Primitive.input\n        type=\"radio\"\n        aria-hidden\n        defaultChecked={checked}\n        {...props}\n        tabIndex={-1}\n        ref={composedRefs}\n        style={{\n          ...props.style,\n          ...controlSize,\n          position: 'absolute',\n          pointerEvents: 'none',\n          opacity: 0,\n          margin: 0,\n        }}\n      />\n    );\n  }\n);\n\nRadioBubbleInput.displayName = BUBBLE_INPUT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n","import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { createDialogScope } from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createSlottable } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\ntype ScopedProps<P> = P & { __scopeAlertDialog?: Scope };\nconst [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [\n  createDialogScope,\n]);\nconst useDialogScope = createDialogScope();\n\ntype DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\ninterface AlertDialogProps extends Omit<DialogProps, 'modal'> {}\n\nconst AlertDialog: React.FC<AlertDialogProps> = (props: ScopedProps<AlertDialogProps>) => {\n  const { __scopeAlertDialog, ...alertDialogProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Root {...dialogScope} {...alertDialogProps} modal={true} />;\n};\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTrigger\n * -----------------------------------------------------------------------------------------------*/\nconst TRIGGER_NAME = 'AlertDialogTrigger';\n\ntype AlertDialogTriggerElement = React.ComponentRef<typeof DialogPrimitive.Trigger>;\ntype DialogTriggerProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>;\ninterface AlertDialogTriggerProps extends DialogTriggerProps {}\n\nconst AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(\n  (props: ScopedProps<AlertDialogTriggerProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...triggerProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Trigger {...dialogScope} {...triggerProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'AlertDialogPortal';\n\ntype DialogPortalProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>;\ninterface AlertDialogPortalProps extends DialogPortalProps {}\n\nconst AlertDialogPortal: React.FC<AlertDialogPortalProps> = (\n  props: ScopedProps<AlertDialogPortalProps>\n) => {\n  const { __scopeAlertDialog, ...portalProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Portal {...dialogScope} {...portalProps} />;\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'AlertDialogOverlay';\n\ntype AlertDialogOverlayElement = React.ComponentRef<typeof DialogPrimitive.Overlay>;\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>;\ninterface AlertDialogOverlayProps extends DialogOverlayProps {}\n\nconst AlertDialogOverlay = React.forwardRef<AlertDialogOverlayElement, AlertDialogOverlayProps>(\n  (props: ScopedProps<AlertDialogOverlayProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...overlayProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Overlay {...dialogScope} {...overlayProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<AlertDialogCancelElement | null>;\n};\n\nconst [AlertDialogContentProvider, useAlertDialogContentContext] =\n  createAlertDialogContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentElement = React.ComponentRef<typeof DialogPrimitive.Content>;\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\ninterface AlertDialogContentProps\n  extends Omit<DialogContentProps, 'onPointerDownOutside' | 'onInteractOutside'> {}\n\nconst Slottable = createSlottable('AlertDialogContent');\n\nconst AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(\n  (props: ScopedProps<AlertDialogContentProps>, forwardedRef) => {\n    const { __scopeAlertDialog, children, ...contentProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const contentRef = React.useRef<AlertDialogContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const cancelRef = React.useRef<AlertDialogCancelElement | null>(null);\n\n    return (\n      <DialogPrimitive.WarningProvider\n        contentName={CONTENT_NAME}\n        titleName={TITLE_NAME}\n        docsSlug=\"alert-dialog\"\n      >\n        <AlertDialogContentProvider scope={__scopeAlertDialog} cancelRef={cancelRef}>\n          <DialogPrimitive.Content\n            role=\"alertdialog\"\n            {...dialogScope}\n            {...contentProps}\n            ref={composedRefs}\n            onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n              event.preventDefault();\n              cancelRef.current?.focus({ preventScroll: true });\n            })}\n            onPointerDownOutside={(event) => event.preventDefault()}\n            onInteractOutside={(event) => event.preventDefault()}\n          >\n            {/**\n             * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n             * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n             * This is because we want the accessibility checks to run only once the content is actually\n             * open and that behaviour is already encapsulated in `DialogContent`.\n             */}\n            <Slottable>{children}</Slottable>\n            {process.env.NODE_ENV === 'development' && (\n              <DescriptionWarning contentRef={contentRef} />\n            )}\n          </DialogPrimitive.Content>\n        </AlertDialogContentProvider>\n      </DialogPrimitive.WarningProvider>\n    );\n  }\n);\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'AlertDialogTitle';\n\ntype AlertDialogTitleElement = React.ComponentRef<typeof DialogPrimitive.Title>;\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\ninterface AlertDialogTitleProps extends DialogTitleProps {}\n\nconst AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(\n  (props: ScopedProps<AlertDialogTitleProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...titleProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Title {...dialogScope} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\n\ntype AlertDialogDescriptionElement = React.ComponentRef<typeof DialogPrimitive.Description>;\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\ninterface AlertDialogDescriptionProps extends DialogDescriptionProps {}\n\nconst AlertDialogDescription = React.forwardRef<\n  AlertDialogDescriptionElement,\n  AlertDialogDescriptionProps\n>((props: ScopedProps<AlertDialogDescriptionProps>, forwardedRef) => {\n  const { __scopeAlertDialog, ...descriptionProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Description {...dialogScope} {...descriptionProps} ref={forwardedRef} />;\n});\n\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'AlertDialogAction';\n\ntype AlertDialogActionElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ntype DialogCloseProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogActionProps extends DialogCloseProps {}\n\nconst AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(\n  (props: ScopedProps<AlertDialogActionProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...actionProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Close {...dialogScope} {...actionProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogCancelProps extends DialogCloseProps {}\n\nconst AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(\n  (props: ScopedProps<AlertDialogCancelProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...cancelProps } = props;\n    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const ref = useComposedRefs(forwardedRef, cancelRef);\n    return <DialogPrimitive.Close {...dialogScope} {...cancelProps} ref={ref} />;\n  }\n);\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<AlertDialogContentElement | null>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Portal = AlertDialogPortal;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen ?? false,\n      onChange: onOpenChange,\n      caller: COLLAPSIBLE_NAME,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>(undefined);\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationName: node.style.animationName,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationName = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration!;\n        node.style.animationName = originalStylesRef.current.animationName!;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n","import * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useId } from '@radix-ui/react-id';\nimport { useIsHydrated } from '@radix-ui/react-use-is-hydrated';\nimport { useEffectEvent } from '@radix-ui/react-use-effect-event';\nimport type { Scope } from '@radix-ui/react-context';\nimport { createContextScope } from '@radix-ui/react-context';\n\nconst PASSWORD_TOGGLE_FIELD_NAME = 'PasswordToggleField';\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordToggleFieldProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype InternalFocusState = {\n  clickTriggered: boolean;\n  selectionStart: number | null;\n  selectionEnd: number | null;\n};\n\ninterface PasswordToggleFieldContextValue {\n  inputId: string;\n  inputRef: React.RefObject<HTMLInputElement | null>;\n  visible: boolean;\n  setVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  syncInputId: (providedId: string | number | undefined) => void;\n  focusState: React.RefObject<InternalFocusState>;\n}\n\nconst [createPasswordToggleFieldContext] = createContextScope(PASSWORD_TOGGLE_FIELD_NAME);\nconst [PasswordToggleFieldProvider, usePasswordToggleFieldContext] =\n  createPasswordToggleFieldContext<PasswordToggleFieldContextValue>(PASSWORD_TOGGLE_FIELD_NAME);\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordToggleField\n * -----------------------------------------------------------------------------------------------*/\n\ntype ScopedProps<P> = P & { __scopePasswordToggleField?: Scope };\n\ninterface PasswordToggleFieldProps {\n  id?: string;\n  visible?: boolean;\n  defaultVisible?: boolean;\n  onVisiblityChange?: (visible: boolean) => void;\n  children?: React.ReactNode;\n}\n\nconst INITIAL_FOCUS_STATE: InternalFocusState = {\n  clickTriggered: false,\n  selectionStart: null,\n  selectionEnd: null,\n};\n\nconst PasswordToggleField: React.FC<PasswordToggleFieldProps> = ({\n  __scopePasswordToggleField,\n  ...props\n}: ScopedProps<PasswordToggleFieldProps>) => {\n  const baseId = useId(props.id);\n  const defaultInputId = `${baseId}-input`;\n  const [inputIdState, setInputIdState] = React.useState<null | string>(defaultInputId);\n  const inputId = inputIdState ?? defaultInputId;\n  const syncInputId = React.useCallback(\n    (providedId: string | number | undefined) =>\n      setInputIdState(providedId != null ? String(providedId) : null),\n    []\n  );\n\n  const { visible: visibleProp, defaultVisible, onVisiblityChange, children } = props;\n  const [visible = false, setVisible] = useControllableState({\n    caller: PASSWORD_TOGGLE_FIELD_NAME,\n    prop: visibleProp,\n    defaultProp: defaultVisible ?? false,\n    onChange: onVisiblityChange,\n  });\n\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n  const focusState = React.useRef<InternalFocusState>(INITIAL_FOCUS_STATE);\n\n  return (\n    <PasswordToggleFieldProvider\n      scope={__scopePasswordToggleField}\n      inputId={inputId}\n      inputRef={inputRef}\n      setVisible={setVisible}\n      syncInputId={syncInputId}\n      visible={visible}\n      focusState={focusState}\n    >\n      {children}\n    </PasswordToggleFieldProvider>\n  );\n};\nPasswordToggleField.displayName = PASSWORD_TOGGLE_FIELD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordToggleFieldInput\n * -----------------------------------------------------------------------------------------------*/\n\nconst PASSWORD_TOGGLE_FIELD_INPUT_NAME = PASSWORD_TOGGLE_FIELD_NAME + 'Input';\n\ntype PrimitiveInputProps = React.ComponentPropsWithoutRef<'input'>;\n\ninterface PasswordToggleFieldOwnProps {\n  autoComplete?: 'current-password' | 'new-password';\n}\n\ninterface PasswordToggleFieldInputProps\n  extends PasswordToggleFieldOwnProps,\n    Omit<PrimitiveInputProps, keyof PasswordToggleFieldOwnProps | 'type'> {\n  autoComplete?: 'current-password' | 'new-password';\n}\n\nconst PasswordToggleFieldInput = React.forwardRef<HTMLInputElement, PasswordToggleFieldInputProps>(\n  (\n    {\n      __scopePasswordToggleField,\n      autoComplete = 'current-password',\n      autoCapitalize = 'off',\n      spellCheck = false,\n      id: idProp,\n      ...props\n    }: ScopedProps<PasswordToggleFieldInputProps>,\n    forwardedRef\n  ) => {\n    const { visible, inputRef, inputId, syncInputId, setVisible, focusState } =\n      usePasswordToggleFieldContext(PASSWORD_TOGGLE_FIELD_INPUT_NAME, __scopePasswordToggleField);\n\n    React.useEffect(() => {\n      syncInputId(idProp);\n    }, [idProp, syncInputId]);\n\n    // We want to reset the visibility to `false` to revert the input to\n    // `type=\"password\"` when:\n    // - The form is reset (for consistency with other form controls)\n    // - The form is submitted (to prevent the browser from remembering the\n    //   input's value.\n    //\n    // See \"Keeping things secure\":\n    //   https://technology.blog.gov.uk/2021/04/19/simple-things-are-complicated-making-a-show-password-option/)\n    const _setVisible = useEffectEvent(setVisible);\n    React.useEffect(() => {\n      const inputElement = inputRef.current;\n      const form = inputElement?.form;\n      if (!form) {\n        return;\n      }\n\n      const controller = new AbortController();\n      form.addEventListener(\n        'reset',\n        (event) => {\n          if (!event.defaultPrevented) {\n            _setVisible(false);\n          }\n        },\n        { signal: controller.signal }\n      );\n      form.addEventListener(\n        'submit',\n        () => {\n          // always reset the visibility on submit regardless of whether the\n          // default action is prevented\n          _setVisible(false);\n        },\n        { signal: controller.signal }\n      );\n      return () => {\n        controller.abort();\n      };\n    }, [inputRef, _setVisible]);\n\n    return (\n      <Primitive.input\n        {...props}\n        id={idProp ?? inputId}\n        autoCapitalize={autoCapitalize}\n        autoComplete={autoComplete}\n        ref={useComposedRefs(forwardedRef, inputRef)}\n        spellCheck={spellCheck}\n        type={visible ? 'text' : 'password'}\n        onBlur={composeEventHandlers(props.onBlur, (event) => {\n          // get the cursor position\n          const { selectionStart, selectionEnd } = event.currentTarget;\n          focusState.current.selectionStart = selectionStart;\n          focusState.current.selectionEnd = selectionEnd;\n        })}\n      />\n    );\n  }\n);\nPasswordToggleFieldInput.displayName = PASSWORD_TOGGLE_FIELD_INPUT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordToggleFieldToggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst PASSWORD_TOGGLE_FIELD_TOGGLE_NAME = PASSWORD_TOGGLE_FIELD_NAME + 'Toggle';\n\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<'button'>;\n\ninterface PasswordToggleFieldToggleProps extends Omit<PrimitiveButtonProps, 'type'> {}\n\nconst PasswordToggleFieldToggle = React.forwardRef<\n  HTMLButtonElement,\n  PasswordToggleFieldToggleProps\n>(\n  (\n    {\n      __scopePasswordToggleField,\n      onClick,\n      onPointerDown,\n      onPointerCancel,\n      onPointerUp,\n      onFocus,\n      children,\n      'aria-label': ariaLabelProp,\n      'aria-controls': ariaControls,\n      'aria-hidden': ariaHidden,\n      tabIndex,\n      ...props\n    }: ScopedProps<PasswordToggleFieldToggleProps>,\n    forwardedRef\n  ) => {\n    const { setVisible, visible, inputRef, inputId, focusState } = usePasswordToggleFieldContext(\n      PASSWORD_TOGGLE_FIELD_TOGGLE_NAME,\n      __scopePasswordToggleField\n    );\n    const [internalAriaLabel, setInternalAriaLabel] = React.useState<string | undefined>(undefined);\n    const elementRef = React.useRef<HTMLButtonElement>(null);\n    const ref = useComposedRefs(forwardedRef, elementRef);\n    const isHydrated = useIsHydrated();\n\n    React.useEffect(() => {\n      const element = elementRef.current;\n      if (!element || ariaLabelProp) {\n        setInternalAriaLabel(undefined);\n        return;\n      }\n\n      const DEFAULT_ARIA_LABEL = visible ? 'Hide password' : 'Show password';\n\n      function checkForInnerTextLabel(textContent: string | undefined | null) {\n        const text = textContent ? textContent : undefined;\n        // If the element has inner text, no need to force an aria-label.\n        setInternalAriaLabel(text ? undefined : DEFAULT_ARIA_LABEL);\n      }\n\n      checkForInnerTextLabel(element.textContent);\n\n      const observer = new MutationObserver((entries) => {\n        let textContent: string | undefined;\n        for (const entry of entries) {\n          if (entry.type === 'characterData') {\n            if (element.textContent) {\n              textContent = element.textContent;\n            }\n          }\n        }\n        checkForInnerTextLabel(textContent);\n      });\n      observer.observe(element, { characterData: true, subtree: true });\n      return () => {\n        observer.disconnect();\n      };\n    }, [visible, ariaLabelProp]);\n\n    const ariaLabel = ariaLabelProp || internalAriaLabel;\n\n    // Before hydration the button will not work, but we want to render it\n    // regardless to prevent potential layout shift. Hide it from assistive tech\n    // by default. Post-hydration it will be visible, focusable and associated\n    // with the input via aria-controls.\n    if (!isHydrated) {\n      ariaHidden ??= true;\n      tabIndex ??= -1;\n    } else {\n      ariaControls ??= inputId;\n    }\n\n    React.useEffect(() => {\n      let cleanup = () => {};\n      const ownerWindow = elementRef.current?.ownerDocument?.defaultView || window;\n      const reset = () => (focusState.current.clickTriggered = false);\n      const handlePointerUp = () => (cleanup = requestIdleCallback(ownerWindow, reset));\n      ownerWindow.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        cleanup();\n        ownerWindow.removeEventListener('pointerup', handlePointerUp);\n      };\n    }, [focusState]);\n\n    return (\n      <Primitive.button\n        aria-controls={ariaControls}\n        aria-hidden={ariaHidden}\n        aria-label={ariaLabel}\n        ref={ref}\n        id={inputId}\n        {...props}\n        onPointerDown={composeEventHandlers(onPointerDown, () => {\n          focusState.current.clickTriggered = true;\n        })}\n        onPointerCancel={(event) => {\n          // do not use `composeEventHandlers` here because we always want to\n          // reset the ref on cancellation, regardless of whether the user has\n          // called preventDefault on the event\n          onPointerCancel?.(event);\n          focusState.current = INITIAL_FOCUS_STATE;\n        }}\n        // do not use `composeEventHandlers` here because we always want to\n        // reset the ref after click, regardless of whether the user has\n        // called preventDefault on the event\n        onClick={(event) => {\n          onClick?.(event);\n          if (event.defaultPrevented) {\n            focusState.current = INITIAL_FOCUS_STATE;\n            return;\n          }\n\n          flushSync(() => {\n            setVisible((s) => !s);\n          });\n          if (focusState.current.clickTriggered) {\n            const input = inputRef.current;\n            if (input) {\n              const { selectionStart, selectionEnd } = focusState.current;\n              input.focus();\n              if (selectionStart !== null || selectionEnd !== null) {\n                // wait a tick so that focus has settled, then restore select position\n                requestAnimationFrame(() => {\n                  // make sure the input still has focus (developer may have\n                  // programatically moved focus elsewhere)\n                  if (input.ownerDocument.activeElement === input) {\n                    input.selectionStart = selectionStart;\n                    input.selectionEnd = selectionEnd;\n                  }\n                });\n              }\n            }\n          }\n          focusState.current = INITIAL_FOCUS_STATE;\n        }}\n        onPointerUp={(event) => {\n          onPointerUp?.(event);\n          // if click handler hasn't been called at this point, it may have been\n          // intercepted, in which case we still want to reset our internal\n          // state\n          setTimeout(() => {\n            focusState.current = INITIAL_FOCUS_STATE;\n          }, 50);\n        }}\n        type=\"button\"\n      >\n        {children}\n      </Primitive.button>\n    );\n  }\n);\nPasswordToggleFieldToggle.displayName = PASSWORD_TOGGLE_FIELD_TOGGLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordToggleFieldSlot\n * -----------------------------------------------------------------------------------------------*/\n\nconst PASSWORD_TOGGLE_FIELD_SLOT_NAME = PASSWORD_TOGGLE_FIELD_NAME + 'Slot';\n\ninterface PasswordToggleFieldSlotDeclarativeProps {\n  visible: React.ReactNode;\n  hidden: React.ReactNode;\n}\n\ninterface PasswordToggleFieldSlotRenderProps {\n  render: (args: { visible: boolean }) => React.ReactElement;\n}\n\ntype PasswordToggleFieldSlotProps =\n  | PasswordToggleFieldSlotDeclarativeProps\n  | PasswordToggleFieldSlotRenderProps;\n\nconst PasswordToggleFieldSlot: React.FC<PasswordToggleFieldSlotProps> = ({\n  __scopePasswordToggleField,\n  ...props\n}: ScopedProps<PasswordToggleFieldSlotProps>) => {\n  const { visible } = usePasswordToggleFieldContext(\n    PASSWORD_TOGGLE_FIELD_SLOT_NAME,\n    __scopePasswordToggleField\n  );\n\n  return 'render' in props\n    ? //\n      props.render({ visible })\n    : visible\n      ? props.visible\n      : props.hidden;\n};\nPasswordToggleFieldSlot.displayName = PASSWORD_TOGGLE_FIELD_SLOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PasswordToggleFieldIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst PASSWORD_TOGGLE_FIELD_ICON_NAME = PASSWORD_TOGGLE_FIELD_NAME + 'Icon';\n\ntype PrimitiveSvgProps = React.ComponentPropsWithoutRef<'svg'>;\n\ninterface PasswordToggleFieldIconProps extends Omit<PrimitiveSvgProps, 'children'> {\n  visible: React.ReactElement;\n  hidden: React.ReactElement;\n}\n\nconst PasswordToggleFieldIcon = React.forwardRef<SVGSVGElement, PasswordToggleFieldIconProps>(\n  (\n    {\n      __scopePasswordToggleField,\n      // @ts-expect-error\n      children,\n      ...props\n    }: ScopedProps<PasswordToggleFieldIconProps>,\n    forwardedRef\n  ) => {\n    const { visible } = usePasswordToggleFieldContext(\n      PASSWORD_TOGGLE_FIELD_ICON_NAME,\n      __scopePasswordToggleField\n    );\n    const { visible: visibleIcon, hidden: hiddenIcon, ...domProps } = props;\n    return (\n      <Primitive.svg {...domProps} ref={forwardedRef} aria-hidden asChild>\n        {visible ? visibleIcon : hiddenIcon}\n      </Primitive.svg>\n    );\n  }\n);\nPasswordToggleFieldIcon.displayName = PASSWORD_TOGGLE_FIELD_ICON_NAME;\n\nexport {\n  PasswordToggleField,\n  PasswordToggleFieldInput,\n  PasswordToggleFieldToggle,\n  PasswordToggleFieldSlot,\n  PasswordToggleFieldIcon,\n  //\n  PasswordToggleField as Root,\n  PasswordToggleFieldInput as Input,\n  PasswordToggleFieldToggle as Toggle,\n  PasswordToggleFieldSlot as Slot,\n  PasswordToggleFieldIcon as Icon,\n};\nexport type {\n  PasswordToggleFieldProps,\n  PasswordToggleFieldInputProps,\n  PasswordToggleFieldToggleProps,\n  PasswordToggleFieldIconProps,\n  PasswordToggleFieldSlotProps,\n};\n\nfunction requestIdleCallback(\n  window: Window,\n  callback: IdleRequestCallback,\n  options?: IdleRequestOptions\n): () => void {\n  if ((window as any).requestIdleCallback) {\n    const id = window.requestIdleCallback(callback, options);\n    return () => {\n      window.cancelIdleCallback(id);\n    };\n  }\n  const start = Date.now();\n  const id = window.setTimeout(() => {\n    const timeRemaining = () => Math.max(0, 50 - (Date.now() - start));\n    callback({ didTimeout: false, timeRemaining });\n  }, 1);\n  return () => {\n    window.clearTimeout(id);\n  };\n}\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Toggle } from '@radix-ui/react-toggle';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToggleGroup';\n\ntype ScopedProps<P> = P & { __scopeToggleGroup?: Scope };\nconst [createToggleGroupContext, createToggleGroupScope] = createContextScope(TOGGLE_GROUP_NAME, [\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype ToggleGroupElement = ToggleGroupImplSingleElement | ToggleGroupImplMultipleElement;\ninterface ToggleGroupSingleProps extends ToggleGroupImplSingleProps {\n  type: 'single';\n}\ninterface ToggleGroupMultipleProps extends ToggleGroupImplMultipleProps {\n  type: 'multiple';\n}\n\nconst ToggleGroup = React.forwardRef<\n  ToggleGroupElement,\n  ToggleGroupSingleProps | ToggleGroupMultipleProps\n>((props, forwardedRef) => {\n  const { type, ...toggleGroupProps } = props;\n\n  if (type === 'single') {\n    const singleProps = toggleGroupProps as ToggleGroupImplSingleProps;\n    return <ToggleGroupImplSingle {...singleProps} ref={forwardedRef} />;\n  }\n\n  if (type === 'multiple') {\n    const multipleProps = toggleGroupProps as ToggleGroupImplMultipleProps;\n    return <ToggleGroupImplMultiple {...multipleProps} ref={forwardedRef} />;\n  }\n\n  throw new Error(`Missing prop \\`type\\` expected on \\`${TOGGLE_GROUP_NAME}\\``);\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupValueContextValue = {\n  type: 'single' | 'multiple';\n  value: string[];\n  onItemActivate(value: string): void;\n  onItemDeactivate(value: string): void;\n};\n\nconst [ToggleGroupValueProvider, useToggleGroupValueContext] =\n  createToggleGroupContext<ToggleGroupValueContextValue>(TOGGLE_GROUP_NAME);\n\ntype ToggleGroupImplSingleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplSingleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the item that is pressed.\n   */\n  value?: string;\n  /**\n   * The value of the item that is pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the value of the toggle group changes.\n   */\n  onValueChange?(value: string): void;\n}\n\nconst ToggleGroupImplSingle = React.forwardRef<\n  ToggleGroupImplSingleElement,\n  ToggleGroupImplSingleProps\n>((props: ScopedProps<ToggleGroupImplSingleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupSingleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue ?? '',\n    onChange: onValueChange,\n    caller: TOGGLE_GROUP_NAME,\n  });\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"single\"\n      value={React.useMemo(() => (value ? [value] : []), [value])}\n      onItemActivate={setValue}\n      onItemDeactivate={React.useCallback(() => setValue(''), [setValue])}\n    >\n      <ToggleGroupImpl {...toggleGroupSingleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\ntype ToggleGroupImplMultipleElement = ToggleGroupImplElement;\ninterface ToggleGroupImplMultipleProps extends ToggleGroupImplProps {\n  /**\n   * The controlled stateful value of the items that are pressed.\n   */\n  value?: string[];\n  /**\n   * The value of the items that are pressed when initially rendered. Use\n   * `defaultValue` if you do not need to control the state of a toggle group.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the toggle group changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst ToggleGroupImplMultiple = React.forwardRef<\n  ToggleGroupImplMultipleElement,\n  ToggleGroupImplMultipleProps\n>((props: ScopedProps<ToggleGroupImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...toggleGroupMultipleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue ?? [],\n    onChange: onValueChange,\n    caller: TOGGLE_GROUP_NAME,\n  });\n\n  const handleButtonActivate = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleButtonDeactivate = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <ToggleGroupValueProvider\n      scope={props.__scopeToggleGroup}\n      type=\"multiple\"\n      value={value}\n      onItemActivate={handleButtonActivate}\n      onItemDeactivate={handleButtonDeactivate}\n    >\n      <ToggleGroupImpl {...toggleGroupMultipleProps} ref={forwardedRef} />\n    </ToggleGroupValueProvider>\n  );\n});\n\nToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupContextValue = { rovingFocus: boolean; disabled: boolean };\n\nconst [ToggleGroupContext, useToggleGroupContext] =\n  createToggleGroupContext<ToggleGroupContextValue>(TOGGLE_GROUP_NAME);\n\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToggleGroupImplElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToggleGroupImplProps extends PrimitiveDivProps {\n  /**\n   * Whether the group is disabled from user interaction.\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * Whether the group should maintain roving focus of its buttons.\n   * @defaultValue true\n   */\n  rovingFocus?: boolean;\n  loop?: RovingFocusGroupProps['loop'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst ToggleGroupImpl = React.forwardRef<ToggleGroupImplElement, ToggleGroupImplProps>(\n  (props: ScopedProps<ToggleGroupImplProps>, forwardedRef) => {\n    const {\n      __scopeToggleGroup,\n      disabled = false,\n      rovingFocus = true,\n      orientation,\n      dir,\n      loop = true,\n      ...toggleGroupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);\n    const direction = useDirection(dir);\n    const commonProps = { role: 'group', dir: direction, ...toggleGroupProps };\n    return (\n      <ToggleGroupContext scope={__scopeToggleGroup} rovingFocus={rovingFocus} disabled={disabled}>\n        {rovingFocus ? (\n          <RovingFocusGroup.Root\n            asChild\n            {...rovingFocusGroupScope}\n            orientation={orientation}\n            dir={direction}\n            loop={loop}\n          >\n            <Primitive.div {...commonProps} ref={forwardedRef} />\n          </RovingFocusGroup.Root>\n        ) : (\n          <Primitive.div {...commonProps} ref={forwardedRef} />\n        )}\n      </ToggleGroupContext>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * ToggleGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'ToggleGroupItem';\n\ntype ToggleGroupItemElement = ToggleGroupItemImplElement;\ninterface ToggleGroupItemProps extends Omit<ToggleGroupItemImplProps, 'pressed'> {}\n\nconst ToggleGroupItem = React.forwardRef<ToggleGroupItemElement, ToggleGroupItemProps>(\n  (props: ScopedProps<ToggleGroupItemProps>, forwardedRef) => {\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, props.__scopeToggleGroup);\n    const context = useToggleGroupContext(ITEM_NAME, props.__scopeToggleGroup);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);\n    const pressed = valueContext.value.includes(props.value);\n    const disabled = context.disabled || props.disabled;\n    const commonProps = { ...props, pressed, disabled };\n    const ref = React.useRef<HTMLDivElement>(null);\n    return context.rovingFocus ? (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!disabled}\n        active={pressed}\n        ref={ref}\n      >\n        <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    ) : (\n      <ToggleGroupItemImpl {...commonProps} ref={forwardedRef} />\n    );\n  }\n);\n\nToggleGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ToggleGroupItemImplElement = React.ComponentRef<typeof Toggle>;\ntype ToggleProps = React.ComponentPropsWithoutRef<typeof Toggle>;\ninterface ToggleGroupItemImplProps extends Omit<ToggleProps, 'defaultPressed' | 'onPressedChange'> {\n  /**\n   * A string value for the toggle group item. All items within a toggle group should use a unique value.\n   */\n  value: string;\n}\n\nconst ToggleGroupItemImpl = React.forwardRef<ToggleGroupItemImplElement, ToggleGroupItemImplProps>(\n  (props: ScopedProps<ToggleGroupItemImplProps>, forwardedRef) => {\n    const { __scopeToggleGroup, value, ...itemProps } = props;\n    const valueContext = useToggleGroupValueContext(ITEM_NAME, __scopeToggleGroup);\n    const singleProps = { role: 'radio', 'aria-checked': props.pressed, 'aria-pressed': undefined };\n    const typeProps = valueContext.type === 'single' ? singleProps : undefined;\n    return (\n      <Toggle\n        {...typeProps}\n        {...itemProps}\n        ref={forwardedRef}\n        onPressedChange={(pressed) => {\n          if (pressed) {\n            valueContext.onItemActivate(value);\n          } else {\n            valueContext.onItemDeactivate(value);\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ToggleGroup;\nconst Item = ToggleGroupItem;\n\nexport {\n  createToggleGroupScope,\n  //\n  ToggleGroup,\n  ToggleGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { ToggleGroupSingleProps, ToggleGroupMultipleProps, ToggleGroupItemProps };\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","// src/use-effect-event.tsx\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport * as React from \"react\";\nvar useReactEffectEvent = React[\" useEffectEvent \".trim().toString()];\nvar useReactInsertionEffect = React[\" useInsertionEffect \".trim().toString()];\nfunction useEffectEvent(callback) {\n  if (typeof useReactEffectEvent === \"function\") {\n    return useReactEffectEvent(callback);\n  }\n  const ref = React.useRef(() => {\n    throw new Error(\"Cannot call an event handler while rendering.\");\n  });\n  if (typeof useReactInsertionEffect === \"function\") {\n    useReactInsertionEffect(() => {\n      ref.current = callback;\n    });\n  } else {\n    useLayoutEffect(() => {\n      ref.current = callback;\n    });\n  }\n  return React.useMemo(() => (...args) => ref.current?.(...args), []);\n}\nexport {\n  useEffectEvent\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { createContextScope } from '@radix-ui/react-context';\nimport * as DismissableLayer from '@radix-ui/react-dismissable-layer';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * ToastProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'ToastProvider';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<ToastElement>('Toast');\n\ntype SwipeDirection = 'up' | 'down' | 'left' | 'right';\ntype ToastProviderContextValue = {\n  label: string;\n  duration: number;\n  swipeDirection: SwipeDirection;\n  swipeThreshold: number;\n  toastCount: number;\n  viewport: ToastViewportElement | null;\n  onViewportChange(viewport: ToastViewportElement): void;\n  onToastAdd(): void;\n  onToastRemove(): void;\n  isFocusedToastEscapeKeyDownRef: React.MutableRefObject<boolean>;\n  isClosePausedRef: React.MutableRefObject<boolean>;\n};\n\ntype ScopedProps<P> = P & { __scopeToast?: Scope };\nconst [createToastContext, createToastScope] = createContextScope('Toast', [createCollectionScope]);\nconst [ToastProviderProvider, useToastProviderContext] =\n  createToastContext<ToastProviderContextValue>(PROVIDER_NAME);\n\ninterface ToastProviderProps {\n  children?: React.ReactNode;\n  /**\n   * An author-localized label for each toast. Used to help screen reader users\n   * associate the interruption with a toast.\n   * @defaultValue 'Notification'\n   */\n  label?: string;\n  /**\n   * Time in milliseconds that each toast should remain visible for.\n   * @defaultValue 5000\n   */\n  duration?: number;\n  /**\n   * Direction of pointer swipe that should close the toast.\n   * @defaultValue 'right'\n   */\n  swipeDirection?: SwipeDirection;\n  /**\n   * Distance in pixels that the swipe must pass before a close is triggered.\n   * @defaultValue 50\n   */\n  swipeThreshold?: number;\n}\n\nconst ToastProvider: React.FC<ToastProviderProps> = (props: ScopedProps<ToastProviderProps>) => {\n  const {\n    __scopeToast,\n    label = 'Notification',\n    duration = 5000,\n    swipeDirection = 'right',\n    swipeThreshold = 50,\n    children,\n  } = props;\n  const [viewport, setViewport] = React.useState<ToastViewportElement | null>(null);\n  const [toastCount, setToastCount] = React.useState(0);\n  const isFocusedToastEscapeKeyDownRef = React.useRef(false);\n  const isClosePausedRef = React.useRef(false);\n\n  if (!label.trim()) {\n    console.error(\n      `Invalid prop \\`label\\` supplied to \\`${PROVIDER_NAME}\\`. Expected non-empty \\`string\\`.`\n    );\n  }\n\n  return (\n    <Collection.Provider scope={__scopeToast}>\n      <ToastProviderProvider\n        scope={__scopeToast}\n        label={label}\n        duration={duration}\n        swipeDirection={swipeDirection}\n        swipeThreshold={swipeThreshold}\n        toastCount={toastCount}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        onToastAdd={React.useCallback(() => setToastCount((prevCount) => prevCount + 1), [])}\n        onToastRemove={React.useCallback(() => setToastCount((prevCount) => prevCount - 1), [])}\n        isFocusedToastEscapeKeyDownRef={isFocusedToastEscapeKeyDownRef}\n        isClosePausedRef={isClosePausedRef}\n      >\n        {children}\n      </ToastProviderProvider>\n    </Collection.Provider>\n  );\n};\n\nToastProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ToastViewport';\nconst VIEWPORT_DEFAULT_HOTKEY = ['F8'];\nconst VIEWPORT_PAUSE = 'toast.viewportPause';\nconst VIEWPORT_RESUME = 'toast.viewportResume';\n\ntype ToastViewportElement = React.ComponentRef<typeof Primitive.ol>;\ntype PrimitiveOrderedListProps = React.ComponentPropsWithoutRef<typeof Primitive.ol>;\ninterface ToastViewportProps extends PrimitiveOrderedListProps {\n  /**\n   * The keys to use as the keyboard shortcut that will move focus to the toast viewport.\n   * @defaultValue ['F8']\n   */\n  hotkey?: string[];\n  /**\n   * An author-localized label for the toast viewport to provide context for screen reader users\n   * when navigating page landmarks. The available `{hotkey}` placeholder will be replaced for you.\n   * @defaultValue 'Notifications ({hotkey})'\n   */\n  label?: string;\n}\n\nconst ToastViewport = React.forwardRef<ToastViewportElement, ToastViewportProps>(\n  (props: ScopedProps<ToastViewportProps>, forwardedRef) => {\n    const {\n      __scopeToast,\n      hotkey = VIEWPORT_DEFAULT_HOTKEY,\n      label = 'Notifications ({hotkey})',\n      ...viewportProps\n    } = props;\n    const context = useToastProviderContext(VIEWPORT_NAME, __scopeToast);\n    const getItems = useCollection(__scopeToast);\n    const wrapperRef = React.useRef<HTMLDivElement>(null);\n    const headFocusProxyRef = React.useRef<FocusProxyElement>(null);\n    const tailFocusProxyRef = React.useRef<FocusProxyElement>(null);\n    const ref = React.useRef<ToastViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    const hotkeyLabel = hotkey.join('+').replace(/Key/g, '').replace(/Digit/g, '');\n    const hasToasts = context.toastCount > 0;\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        // we use `event.code` as it is consistent regardless of meta keys that were pressed.\n        // for example, `event.key` for `Control+Alt+t` is `†` and `t !== †`\n        const isHotkeyPressed =\n          hotkey.length !== 0 && hotkey.every((key) => (event as any)[key] || event.code === key);\n        if (isHotkeyPressed) ref.current?.focus();\n      };\n      document.addEventListener('keydown', handleKeyDown);\n      return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [hotkey]);\n\n    React.useEffect(() => {\n      const wrapper = wrapperRef.current;\n      const viewport = ref.current;\n      if (hasToasts && wrapper && viewport) {\n        const handlePause = () => {\n          if (!context.isClosePausedRef.current) {\n            const pauseEvent = new CustomEvent(VIEWPORT_PAUSE);\n            viewport.dispatchEvent(pauseEvent);\n            context.isClosePausedRef.current = true;\n          }\n        };\n\n        const handleResume = () => {\n          if (context.isClosePausedRef.current) {\n            const resumeEvent = new CustomEvent(VIEWPORT_RESUME);\n            viewport.dispatchEvent(resumeEvent);\n            context.isClosePausedRef.current = false;\n          }\n        };\n\n        const handleFocusOutResume = (event: FocusEvent) => {\n          const isFocusMovingOutside = !wrapper.contains(event.relatedTarget as HTMLElement);\n          if (isFocusMovingOutside) handleResume();\n        };\n\n        const handlePointerLeaveResume = () => {\n          const isFocusInside = wrapper.contains(document.activeElement);\n          if (!isFocusInside) handleResume();\n        };\n\n        // Toasts are not in the viewport React tree so we need to bind DOM events\n        wrapper.addEventListener('focusin', handlePause);\n        wrapper.addEventListener('focusout', handleFocusOutResume);\n        wrapper.addEventListener('pointermove', handlePause);\n        wrapper.addEventListener('pointerleave', handlePointerLeaveResume);\n        window.addEventListener('blur', handlePause);\n        window.addEventListener('focus', handleResume);\n        return () => {\n          wrapper.removeEventListener('focusin', handlePause);\n          wrapper.removeEventListener('focusout', handleFocusOutResume);\n          wrapper.removeEventListener('pointermove', handlePause);\n          wrapper.removeEventListener('pointerleave', handlePointerLeaveResume);\n          window.removeEventListener('blur', handlePause);\n          window.removeEventListener('focus', handleResume);\n        };\n      }\n    }, [hasToasts, context.isClosePausedRef]);\n\n    const getSortedTabbableCandidates = React.useCallback(\n      ({ tabbingDirection }: { tabbingDirection: 'forwards' | 'backwards' }) => {\n        const toastItems = getItems();\n        const tabbableCandidates = toastItems.map((toastItem) => {\n          const toastNode = toastItem.ref.current!;\n          const toastTabbableCandidates = [toastNode, ...getTabbableCandidates(toastNode)];\n          return tabbingDirection === 'forwards'\n            ? toastTabbableCandidates\n            : toastTabbableCandidates.reverse();\n        });\n        return (\n          tabbingDirection === 'forwards' ? tabbableCandidates.reverse() : tabbableCandidates\n        ).flat();\n      },\n      [getItems]\n    );\n\n    React.useEffect(() => {\n      const viewport = ref.current;\n      // We programmatically manage tabbing as we are unable to influence\n      // the source order with portals, this allows us to reverse the\n      // tab order so that it runs from most recent toast to least\n      if (viewport) {\n        const handleKeyDown = (event: KeyboardEvent) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n\n          if (isTabKey) {\n            const focusedElement = document.activeElement;\n            const isTabbingBackwards = event.shiftKey;\n            const targetIsViewport = event.target === viewport;\n\n            // If we're back tabbing after jumping to the viewport then we simply\n            // proxy focus out to the preceding document\n            if (targetIsViewport && isTabbingBackwards) {\n              headFocusProxyRef.current?.focus();\n              return;\n            }\n\n            const tabbingDirection = isTabbingBackwards ? 'backwards' : 'forwards';\n            const sortedCandidates = getSortedTabbableCandidates({ tabbingDirection });\n            const index = sortedCandidates.findIndex((candidate) => candidate === focusedElement);\n            if (focusFirst(sortedCandidates.slice(index + 1))) {\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges so we\n              // proxy to the corresponding exit point and let the browser handle\n              // tab/shift+tab keypress and implicitly pass focus to the next valid element in the document\n              isTabbingBackwards\n                ? headFocusProxyRef.current?.focus()\n                : tailFocusProxyRef.current?.focus();\n            }\n          }\n        };\n\n        // Toasts are not in the viewport React tree so we need to bind DOM events\n        viewport.addEventListener('keydown', handleKeyDown);\n        return () => viewport.removeEventListener('keydown', handleKeyDown);\n      }\n    }, [getItems, getSortedTabbableCandidates]);\n\n    return (\n      <DismissableLayer.Branch\n        ref={wrapperRef}\n        role=\"region\"\n        aria-label={label.replace('{hotkey}', hotkeyLabel)}\n        // Ensure virtual cursor from landmarks menus triggers focus/blur for pause/resume\n        tabIndex={-1}\n        // incase list has size when empty (e.g. padding), we remove pointer events so\n        // it doesn't prevent interactions with page elements that it overlays\n        style={{ pointerEvents: hasToasts ? undefined : 'none' }}\n      >\n        {hasToasts && (\n          <FocusProxy\n            ref={headFocusProxyRef}\n            onFocusFromOutsideViewport={() => {\n              const tabbableCandidates = getSortedTabbableCandidates({\n                tabbingDirection: 'forwards',\n              });\n              focusFirst(tabbableCandidates);\n            }}\n          />\n        )}\n        {/**\n         * tabindex on the the list so that it can be focused when items are removed. we focus\n         * the list instead of the viewport so it announces number of items remaining.\n         */}\n        <Collection.Slot scope={__scopeToast}>\n          <Primitive.ol tabIndex={-1} {...viewportProps} ref={composedRefs} />\n        </Collection.Slot>\n        {hasToasts && (\n          <FocusProxy\n            ref={tailFocusProxyRef}\n            onFocusFromOutsideViewport={() => {\n              const tabbableCandidates = getSortedTabbableCandidates({\n                tabbingDirection: 'backwards',\n              });\n              focusFirst(tabbableCandidates);\n            }}\n          />\n        )}\n      </DismissableLayer.Branch>\n    );\n  }\n);\n\nToastViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_PROXY_NAME = 'ToastFocusProxy';\n\ntype FocusProxyElement = React.ComponentRef<typeof VisuallyHidden>;\ntype VisuallyHiddenProps = React.ComponentPropsWithoutRef<typeof VisuallyHidden>;\ninterface FocusProxyProps extends VisuallyHiddenProps {\n  onFocusFromOutsideViewport(): void;\n}\n\nconst FocusProxy = React.forwardRef<FocusProxyElement, ScopedProps<FocusProxyProps>>(\n  (props, forwardedRef) => {\n    const { __scopeToast, onFocusFromOutsideViewport, ...proxyProps } = props;\n    const context = useToastProviderContext(FOCUS_PROXY_NAME, __scopeToast);\n\n    return (\n      <VisuallyHidden\n        aria-hidden\n        tabIndex={0}\n        {...proxyProps}\n        ref={forwardedRef}\n        // Avoid page scrolling when focus is on the focus proxy\n        style={{ position: 'fixed' }}\n        onFocus={(event) => {\n          const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n          const isFocusFromOutsideViewport = !context.viewport?.contains(prevFocusedElement);\n          if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();\n        }}\n      />\n    );\n  }\n);\n\nFocusProxy.displayName = FOCUS_PROXY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Toast\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOAST_NAME = 'Toast';\nconst TOAST_SWIPE_START = 'toast.swipeStart';\nconst TOAST_SWIPE_MOVE = 'toast.swipeMove';\nconst TOAST_SWIPE_CANCEL = 'toast.swipeCancel';\nconst TOAST_SWIPE_END = 'toast.swipeEnd';\n\ntype ToastElement = ToastImplElement;\ninterface ToastProps extends Omit<ToastImplProps, keyof ToastImplPrivateProps> {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst Toast = React.forwardRef<ToastElement, ToastProps>(\n  (props: ScopedProps<ToastProps>, forwardedRef) => {\n    const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props;\n    const [open, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen ?? true,\n      onChange: onOpenChange,\n      caller: TOAST_NAME,\n    });\n    return (\n      <Presence present={forceMount || open}>\n        <ToastImpl\n          open={open}\n          {...toastProps}\n          ref={forwardedRef}\n          onClose={() => setOpen(false)}\n          onPause={useCallbackRef(props.onPause)}\n          onResume={useCallbackRef(props.onResume)}\n          onSwipeStart={composeEventHandlers(props.onSwipeStart, (event) => {\n            event.currentTarget.setAttribute('data-swipe', 'start');\n          })}\n          onSwipeMove={composeEventHandlers(props.onSwipeMove, (event) => {\n            const { x, y } = event.detail.delta;\n            event.currentTarget.setAttribute('data-swipe', 'move');\n            event.currentTarget.style.setProperty('--radix-toast-swipe-move-x', `${x}px`);\n            event.currentTarget.style.setProperty('--radix-toast-swipe-move-y', `${y}px`);\n          })}\n          onSwipeCancel={composeEventHandlers(props.onSwipeCancel, (event) => {\n            event.currentTarget.setAttribute('data-swipe', 'cancel');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-x');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-y');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-end-x');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-end-y');\n          })}\n          onSwipeEnd={composeEventHandlers(props.onSwipeEnd, (event) => {\n            const { x, y } = event.detail.delta;\n            event.currentTarget.setAttribute('data-swipe', 'end');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-x');\n            event.currentTarget.style.removeProperty('--radix-toast-swipe-move-y');\n            event.currentTarget.style.setProperty('--radix-toast-swipe-end-x', `${x}px`);\n            event.currentTarget.style.setProperty('--radix-toast-swipe-end-y', `${y}px`);\n            setOpen(false);\n          })}\n        />\n      </Presence>\n    );\n  }\n);\n\nToast.displayName = TOAST_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype SwipeEvent = { currentTarget: EventTarget & ToastElement } & Omit<\n  CustomEvent<{ originalEvent: React.PointerEvent; delta: { x: number; y: number } }>,\n  'currentTarget'\n>;\n\nconst [ToastInteractiveProvider, useToastInteractiveContext] = createToastContext(TOAST_NAME, {\n  onClose() {},\n});\n\ntype ToastImplElement = React.ComponentRef<typeof Primitive.li>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer.Root>;\ntype ToastImplPrivateProps = { open: boolean; onClose(): void };\ntype PrimitiveListItemProps = React.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface ToastImplProps extends ToastImplPrivateProps, PrimitiveListItemProps {\n  type?: 'foreground' | 'background';\n  /**\n   * Time in milliseconds that toast should remain visible for. Overrides value\n   * given to `ToastProvider`.\n   */\n  duration?: number;\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  onPause?(): void;\n  onResume?(): void;\n  onSwipeStart?(event: SwipeEvent): void;\n  onSwipeMove?(event: SwipeEvent): void;\n  onSwipeCancel?(event: SwipeEvent): void;\n  onSwipeEnd?(event: SwipeEvent): void;\n}\n\nconst ToastImpl = React.forwardRef<ToastImplElement, ToastImplProps>(\n  (props: ScopedProps<ToastImplProps>, forwardedRef) => {\n    const {\n      __scopeToast,\n      type = 'foreground',\n      duration: durationProp,\n      open,\n      onClose,\n      onEscapeKeyDown,\n      onPause,\n      onResume,\n      onSwipeStart,\n      onSwipeMove,\n      onSwipeCancel,\n      onSwipeEnd,\n      ...toastProps\n    } = props;\n    const context = useToastProviderContext(TOAST_NAME, __scopeToast);\n    const [node, setNode] = React.useState<ToastImplElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const pointerStartRef = React.useRef<{ x: number; y: number } | null>(null);\n    const swipeDeltaRef = React.useRef<{ x: number; y: number } | null>(null);\n    const duration = durationProp || context.duration;\n    const closeTimerStartTimeRef = React.useRef(0);\n    const closeTimerRemainingTimeRef = React.useRef(duration);\n    const closeTimerRef = React.useRef(0);\n    const { onToastAdd, onToastRemove } = context;\n    const handleClose = useCallbackRef(() => {\n      // focus viewport if focus is within toast to read the remaining toast\n      // count to SR users and ensure focus isn't lost\n      const isFocusInToast = node?.contains(document.activeElement);\n      if (isFocusInToast) context.viewport?.focus();\n      onClose();\n    });\n\n    const startTimer = React.useCallback(\n      (duration: number) => {\n        if (!duration || duration === Infinity) return;\n        window.clearTimeout(closeTimerRef.current);\n        closeTimerStartTimeRef.current = new Date().getTime();\n        closeTimerRef.current = window.setTimeout(handleClose, duration);\n      },\n      [handleClose]\n    );\n\n    React.useEffect(() => {\n      const viewport = context.viewport;\n      if (viewport) {\n        const handleResume = () => {\n          startTimer(closeTimerRemainingTimeRef.current);\n          onResume?.();\n        };\n        const handlePause = () => {\n          const elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;\n          closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;\n          window.clearTimeout(closeTimerRef.current);\n          onPause?.();\n        };\n        viewport.addEventListener(VIEWPORT_PAUSE, handlePause);\n        viewport.addEventListener(VIEWPORT_RESUME, handleResume);\n        return () => {\n          viewport.removeEventListener(VIEWPORT_PAUSE, handlePause);\n          viewport.removeEventListener(VIEWPORT_RESUME, handleResume);\n        };\n      }\n    }, [context.viewport, duration, onPause, onResume, startTimer]);\n\n    // start timer when toast opens or duration changes.\n    // we include `open` in deps because closed !== unmounted when animating\n    // so it could reopen before being completely unmounted\n    React.useEffect(() => {\n      if (open && !context.isClosePausedRef.current) startTimer(duration);\n    }, [open, duration, context.isClosePausedRef, startTimer]);\n\n    React.useEffect(() => {\n      onToastAdd();\n      return () => onToastRemove();\n    }, [onToastAdd, onToastRemove]);\n\n    const announceTextContent = React.useMemo(() => {\n      return node ? getAnnounceTextContent(node) : null;\n    }, [node]);\n\n    if (!context.viewport) return null;\n\n    return (\n      <>\n        {announceTextContent && (\n          <ToastAnnounce\n            __scopeToast={__scopeToast}\n            // Toasts are always role=status to avoid stuttering issues with role=alert in SRs.\n            role=\"status\"\n            aria-live={type === 'foreground' ? 'assertive' : 'polite'}\n            aria-atomic\n          >\n            {announceTextContent}\n          </ToastAnnounce>\n        )}\n\n        <ToastInteractiveProvider scope={__scopeToast} onClose={handleClose}>\n          {ReactDOM.createPortal(\n            <Collection.ItemSlot scope={__scopeToast}>\n              <DismissableLayer.Root\n                asChild\n                onEscapeKeyDown={composeEventHandlers(onEscapeKeyDown, () => {\n                  if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();\n                  context.isFocusedToastEscapeKeyDownRef.current = false;\n                })}\n              >\n                <Primitive.li\n                  // Ensure toasts are announced as status list or status when focused\n                  role=\"status\"\n                  aria-live=\"off\"\n                  aria-atomic\n                  tabIndex={0}\n                  data-state={open ? 'open' : 'closed'}\n                  data-swipe-direction={context.swipeDirection}\n                  {...toastProps}\n                  ref={composedRefs}\n                  style={{ userSelect: 'none', touchAction: 'none', ...props.style }}\n                  onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                    if (event.key !== 'Escape') return;\n                    onEscapeKeyDown?.(event.nativeEvent);\n                    if (!event.nativeEvent.defaultPrevented) {\n                      context.isFocusedToastEscapeKeyDownRef.current = true;\n                      handleClose();\n                    }\n                  })}\n                  onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                    if (event.button !== 0) return;\n                    pointerStartRef.current = { x: event.clientX, y: event.clientY };\n                  })}\n                  onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n                    if (!pointerStartRef.current) return;\n                    const x = event.clientX - pointerStartRef.current.x;\n                    const y = event.clientY - pointerStartRef.current.y;\n                    const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);\n                    const isHorizontalSwipe = ['left', 'right'].includes(context.swipeDirection);\n                    const clamp = ['left', 'up'].includes(context.swipeDirection)\n                      ? Math.min\n                      : Math.max;\n                    const clampedX = isHorizontalSwipe ? clamp(0, x) : 0;\n                    const clampedY = !isHorizontalSwipe ? clamp(0, y) : 0;\n                    const moveStartBuffer = event.pointerType === 'touch' ? 10 : 2;\n                    const delta = { x: clampedX, y: clampedY };\n                    const eventDetail = { originalEvent: event, delta };\n                    if (hasSwipeMoveStarted) {\n                      swipeDeltaRef.current = delta;\n                      handleAndDispatchCustomEvent(TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {\n                        discrete: false,\n                      });\n                    } else if (isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {\n                      swipeDeltaRef.current = delta;\n                      handleAndDispatchCustomEvent(TOAST_SWIPE_START, onSwipeStart, eventDetail, {\n                        discrete: false,\n                      });\n                      (event.target as HTMLElement).setPointerCapture(event.pointerId);\n                    } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer) {\n                      // User is swiping in wrong direction so we disable swipe gesture\n                      // for the current pointer down interaction\n                      pointerStartRef.current = null;\n                    }\n                  })}\n                  onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n                    const delta = swipeDeltaRef.current;\n                    const target = event.target as HTMLElement;\n                    if (target.hasPointerCapture(event.pointerId)) {\n                      target.releasePointerCapture(event.pointerId);\n                    }\n                    swipeDeltaRef.current = null;\n                    pointerStartRef.current = null;\n                    if (delta) {\n                      const toast = event.currentTarget;\n                      const eventDetail = { originalEvent: event, delta };\n                      if (\n                        isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)\n                      ) {\n                        handleAndDispatchCustomEvent(TOAST_SWIPE_END, onSwipeEnd, eventDetail, {\n                          discrete: true,\n                        });\n                      } else {\n                        handleAndDispatchCustomEvent(\n                          TOAST_SWIPE_CANCEL,\n                          onSwipeCancel,\n                          eventDetail,\n                          {\n                            discrete: true,\n                          }\n                        );\n                      }\n                      // Prevent click event from triggering on items within the toast when\n                      // pointer up is part of a swipe gesture\n                      toast.addEventListener('click', (event) => event.preventDefault(), {\n                        once: true,\n                      });\n                    }\n                  })}\n                />\n              </DismissableLayer.Root>\n            </Collection.ItemSlot>,\n            context.viewport\n          )}\n        </ToastInteractiveProvider>\n      </>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface ToastAnnounceProps\n  extends Omit<React.ComponentPropsWithoutRef<'div'>, 'children'>,\n    ScopedProps<{ children: string[] }> {}\n\nconst ToastAnnounce: React.FC<ToastAnnounceProps> = (props: ScopedProps<ToastAnnounceProps>) => {\n  const { __scopeToast, children, ...announceProps } = props;\n  const context = useToastProviderContext(TOAST_NAME, __scopeToast);\n  const [renderAnnounceText, setRenderAnnounceText] = React.useState(false);\n  const [isAnnounced, setIsAnnounced] = React.useState(false);\n\n  // render text content in the next frame to ensure toast is announced in NVDA\n  useNextFrame(() => setRenderAnnounceText(true));\n\n  // cleanup after announcing\n  React.useEffect(() => {\n    const timer = window.setTimeout(() => setIsAnnounced(true), 1000);\n    return () => window.clearTimeout(timer);\n  }, []);\n\n  return isAnnounced ? null : (\n    <Portal asChild>\n      <VisuallyHidden {...announceProps}>\n        {renderAnnounceText && (\n          <>\n            {context.label} {children}\n          </>\n        )}\n      </VisuallyHidden>\n    </Portal>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ToastTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'ToastTitle';\n\ntype ToastTitleElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToastTitleProps extends PrimitiveDivProps {}\n\nconst ToastTitle = React.forwardRef<ToastTitleElement, ToastTitleProps>(\n  (props: ScopedProps<ToastTitleProps>, forwardedRef) => {\n    const { __scopeToast, ...titleProps } = props;\n    return <Primitive.div {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nToastTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'ToastDescription';\n\ntype ToastDescriptionElement = React.ComponentRef<typeof Primitive.div>;\ninterface ToastDescriptionProps extends PrimitiveDivProps {}\n\nconst ToastDescription = React.forwardRef<ToastDescriptionElement, ToastDescriptionProps>(\n  (props: ScopedProps<ToastDescriptionProps>, forwardedRef) => {\n    const { __scopeToast, ...descriptionProps } = props;\n    return <Primitive.div {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nToastDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'ToastAction';\n\ntype ToastActionElement = ToastCloseElement;\ninterface ToastActionProps extends ToastCloseProps {\n  /**\n   * A short description for an alternate way to carry out the action. For screen reader users\n   * who will not be able to navigate to the button easily/quickly.\n   * @example <ToastAction altText=\"Goto account settings to upgrade\">Upgrade</ToastAction>\n   * @example <ToastAction altText=\"Undo (Alt+U)\">Undo</ToastAction>\n   */\n  altText: string;\n}\n\nconst ToastAction = React.forwardRef<ToastActionElement, ToastActionProps>(\n  (props: ScopedProps<ToastActionProps>, forwardedRef) => {\n    const { altText, ...actionProps } = props;\n\n    if (!altText.trim()) {\n      console.error(\n        `Invalid prop \\`altText\\` supplied to \\`${ACTION_NAME}\\`. Expected non-empty \\`string\\`.`\n      );\n      return null;\n    }\n\n    return (\n      <ToastAnnounceExclude altText={altText} asChild>\n        <ToastClose {...actionProps} ref={forwardedRef} />\n      </ToastAnnounceExclude>\n    );\n  }\n);\n\nToastAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToastClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'ToastClose';\n\ntype ToastCloseElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToastCloseProps extends PrimitiveButtonProps {}\n\nconst ToastClose = React.forwardRef<ToastCloseElement, ToastCloseProps>(\n  (props: ScopedProps<ToastCloseProps>, forwardedRef) => {\n    const { __scopeToast, ...closeProps } = props;\n    const interactiveContext = useToastInteractiveContext(CLOSE_NAME, __scopeToast);\n\n    return (\n      <ToastAnnounceExclude asChild>\n        <Primitive.button\n          type=\"button\"\n          {...closeProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(props.onClick, interactiveContext.onClose)}\n        />\n      </ToastAnnounceExclude>\n    );\n  }\n);\n\nToastClose.displayName = CLOSE_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype ToastAnnounceExcludeElement = React.ComponentRef<typeof Primitive.div>;\ninterface ToastAnnounceExcludeProps extends PrimitiveDivProps {\n  altText?: string;\n}\n\nconst ToastAnnounceExclude = React.forwardRef<\n  ToastAnnounceExcludeElement,\n  ToastAnnounceExcludeProps\n>((props: ScopedProps<ToastAnnounceExcludeProps>, forwardedRef) => {\n  const { __scopeToast, altText, ...announceExcludeProps } = props;\n\n  return (\n    <Primitive.div\n      data-radix-toast-announce-exclude=\"\"\n      data-radix-toast-announce-alt={altText || undefined}\n      {...announceExcludeProps}\n      ref={forwardedRef}\n    />\n  );\n});\n\nfunction getAnnounceTextContent(container: HTMLElement) {\n  const textContent: string[] = [];\n  const childNodes = Array.from(container.childNodes);\n\n  childNodes.forEach((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);\n    if (isHTMLElement(node)) {\n      const isHidden = node.ariaHidden || node.hidden || node.style.display === 'none';\n      const isExcluded = node.dataset.radixToastAnnounceExclude === '';\n\n      if (!isHidden) {\n        if (isExcluded) {\n          const altText = node.dataset.radixToastAnnounceAlt;\n          if (altText) textContent.push(altText);\n        } else {\n          textContent.push(...getAnnounceTextContent(node));\n        }\n      }\n    }\n  });\n\n  // We return a collection of text rather than a single concatenated string.\n  // This allows SR VO to naturally pause break between nodes while announcing.\n  return textContent;\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction handleAndDispatchCustomEvent<\n  E extends CustomEvent,\n  ReactEvent extends React.SyntheticEvent,\n>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: ReactEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const currentTarget = detail.originalEvent.currentTarget as HTMLElement;\n  const event = new CustomEvent(name, { bubbles: true, cancelable: true, detail });\n  if (handler) currentTarget.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(currentTarget, event);\n  } else {\n    currentTarget.dispatchEvent(event);\n  }\n}\n\nconst isDeltaInDirection = (\n  delta: { x: number; y: number },\n  direction: SwipeDirection,\n  threshold = 0\n) => {\n  const deltaX = Math.abs(delta.x);\n  const deltaY = Math.abs(delta.y);\n  const isDeltaX = deltaX > deltaY;\n  if (direction === 'left' || direction === 'right') {\n    return isDeltaX && deltaX > threshold;\n  } else {\n    return !isDeltaX && deltaY > threshold;\n  }\n};\n\nfunction useNextFrame(callback = () => {}) {\n  const fn = useCallbackRef(callback);\n  useLayoutEffect(() => {\n    let raf1 = 0;\n    let raf2 = 0;\n    raf1 = window.requestAnimationFrame(() => (raf2 = window.requestAnimationFrame(fn)));\n    return () => {\n      window.cancelAnimationFrame(raf1);\n      window.cancelAnimationFrame(raf2);\n    };\n  }, [fn]);\n}\n\nfunction isHTMLElement(node: any): node is HTMLElement {\n  return node.nodeType === node.ELEMENT_NODE;\n}\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nconst Provider = ToastProvider;\nconst Viewport = ToastViewport;\nconst Root = Toast;\nconst Title = ToastTitle;\nconst Description = ToastDescription;\nconst Action = ToastAction;\nconst Close = ToastClose;\n\nexport {\n  createToastScope,\n  //\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastAction,\n  ToastClose,\n  //\n  Provider,\n  Viewport,\n  Root,\n  Title,\n  Description,\n  Action,\n  Close,\n};\nexport type {\n  ToastProviderProps,\n  ToastViewportProps,\n  ToastProps,\n  ToastTitleProps,\n  ToastDescriptionProps,\n  ToastActionProps,\n  ToastCloseProps,\n};\n","import * as Primitive from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { unstable_createCollection as createCollection } from '@radix-ui/react-collection';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useIsHydrated } from '@radix-ui/react-use-is-hydrated';\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport type { Scope } from '@radix-ui/react-context';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { clamp } from '@radix-ui/number';\nimport { useEffectEvent } from '@radix-ui/react-use-effect-event';\n\ntype InputValidationType = 'alpha' | 'numeric' | 'alphanumeric' | 'none';\n\nconst INPUT_VALIDATION_MAP = {\n  numeric: {\n    type: 'numeric',\n    regexp: /[^\\d]/g,\n    pattern: '\\\\d{1}',\n    inputMode: 'numeric',\n  },\n  alpha: {\n    type: 'alpha',\n    regexp: /[^a-zA-Z]/g,\n    pattern: '[a-zA-Z]{1}',\n    inputMode: 'text',\n  },\n  alphanumeric: {\n    type: 'alphanumeric',\n    regexp: /[^a-zA-Z0-9]/g,\n    pattern: '[a-zA-Z0-9]{1}',\n    inputMode: 'text',\n  },\n  none: null,\n} satisfies InputValidation;\n\n/* -------------------------------------------------------------------------------------------------\n * OneTimePasswordFieldProvider\n * -----------------------------------------------------------------------------------------------*/\n\ntype RovingFocusGroupProps = RovingFocusGroup.RovingFocusGroupProps;\n\ninterface OneTimePasswordFieldContextValue {\n  attemptSubmit: () => void;\n  autoComplete: AutoComplete;\n  autoFocus: boolean;\n  disabled: boolean;\n  dispatch: Dispatcher;\n  form: string | undefined;\n  hiddenInputRef: React.RefObject<HTMLInputElement | null>;\n  isHydrated: boolean;\n  name: string | undefined;\n  orientation: Exclude<RovingFocusGroupProps['orientation'], undefined>;\n  placeholder: string | undefined;\n  readOnly: boolean;\n  type: InputType;\n  userActionRef: React.RefObject<KeyboardActionDetails | null>;\n  validationType: InputValidationType;\n  value: string[];\n  sanitizeValue: (arg: string | string[]) => string[];\n}\n\nconst ONE_TIME_PASSWORD_FIELD_NAME = 'OneTimePasswordField';\nconst [Collection, { useCollection, createCollectionScope, useInitCollection }] =\n  createCollection<HTMLInputElement>(ONE_TIME_PASSWORD_FIELD_NAME);\nconst [createOneTimePasswordFieldContext] = createContextScope(ONE_TIME_PASSWORD_FIELD_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\nconst [OneTimePasswordFieldContext, useOneTimePasswordFieldContext] =\n  createOneTimePasswordFieldContext<OneTimePasswordFieldContextValue>(ONE_TIME_PASSWORD_FIELD_NAME);\n\n/* -------------------------------------------------------------------------------------------------\n * OneTimePasswordField\n * -----------------------------------------------------------------------------------------------*/\n\ninterface OneTimePasswordFieldOwnProps {\n  /**\n   * Specifies what—if any—permission the user agent has to provide automated\n   * assistance in filling out form field values, as well as guidance to the\n   * browser as to the type of information expected in the field. Allows\n   * `\"one-time-code\"` or `\"off\"`.\n   *\n   * @defaultValue `\"one-time-code\"`\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/autocomplete\n   */\n  autoComplete?: AutoComplete;\n  /**\n   * Whether or not the first fillable input should be focused on page-load.\n   *\n   * @defaultValue `false`\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/autofocus\n   */\n  autoFocus?: boolean;\n  /**\n   * Whether or not the component should attempt to automatically submit when\n   * all fields are filled. If the field is associated with an HTML `form`\n   * element, the form's `requestSubmit` method will be called.\n   *\n   * @defaultValue `false`\n   */\n  autoSubmit?: boolean;\n  /**\n   * The initial value of the uncontrolled field.\n   */\n  defaultValue?: string;\n  /**\n   * Indicates the horizontal directionality of the parent element's text.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/dir\n   */\n  dir?: RovingFocusGroupProps['dir'];\n  /**\n   * Whether or not the the field's input elements are disabled.\n   */\n  disabled?: boolean;\n  /**\n   * A string specifying the `form` element with which the input is associated.\n   * This string's value, if present, must match the id of a `form` element in\n   * the same document.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#form\n   */\n  form?: string | undefined;\n  /**\n   * A string specifying a name for the input control. This name is submitted\n   * along with the control's value when the form data is submitted.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#name\n   */\n  name?: string | undefined;\n  /**\n   * When the `autoSubmit` prop is set to `true`, this callback will be fired\n   * before attempting to submit the associated form. It will be called whether\n   * or not a form is located, or if submission is not allowed.\n   */\n  onAutoSubmit?: (value: string) => void;\n  /**\n   * A callback fired when the field's value changes. When the component is\n   * controlled, this should update the state passed to the `value` prop.\n   */\n  onValueChange?: (value: string) => void;\n  /**\n   * Indicates the vertical directionality of the input elements.\n   *\n   * @defaultValue `\"horizontal\"`\n   */\n  orientation?: RovingFocusGroupProps['orientation'];\n  /**\n   * Defines the text displayed in a form control when the control has no value.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/placeholder\n   */\n  placeholder?: string | undefined;\n  /**\n   * Whether or not the input elements can be updated by the user.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Function for custom sanitization when `validationType` is set to `\"none\"`.\n   * This function will be called before updating values in response to user\n   * interactions.\n   */\n  sanitizeValue?: (value: string) => string;\n  /**\n   * The input type of the field's input elements. Can be `\"password\"` or `\"text\"`.\n   */\n  type?: InputType;\n  /**\n   * Specifies the type of input validation to be used. Can be `\"alpha\"`,\n   * `\"numeric\"`, `\"alphanumeric\"` or `\"none\"`.\n   *\n   * @defaultValue `\"numeric\"`\n   */\n  validationType?: InputValidationType;\n  /**\n   * The controlled value of the field.\n   */\n  value?: string;\n}\n\ntype ScopedProps<P> = P & { __scopeOneTimePasswordField?: Scope };\n\ninterface OneTimePasswordFieldProps\n  extends OneTimePasswordFieldOwnProps,\n    Omit<Primitive.PrimitivePropsWithRef<'div'>, keyof OneTimePasswordFieldOwnProps> {}\n\nconst OneTimePasswordField = React.forwardRef<HTMLDivElement, OneTimePasswordFieldProps>(\n  function OneTimePasswordFieldImpl(\n    {\n      __scopeOneTimePasswordField,\n      defaultValue,\n      value: valueProp,\n      onValueChange,\n      autoSubmit = false,\n      children,\n      onPaste,\n      onAutoSubmit,\n      disabled = false,\n      readOnly = false,\n      autoComplete = 'one-time-code',\n      autoFocus = false,\n      form,\n      name,\n      placeholder,\n      type = 'text',\n      // TODO: Change default to vertical when inputs use vertical writing mode\n      orientation = 'horizontal',\n      dir,\n      validationType = 'numeric',\n      sanitizeValue: sanitizeValueProp,\n      ...domProps\n    }: ScopedProps<OneTimePasswordFieldProps>,\n    forwardedRef\n  ) {\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeOneTimePasswordField);\n    const direction = useDirection(dir);\n    const collectionState = useInitCollection();\n    const [collection] = collectionState;\n\n    const validation = INPUT_VALIDATION_MAP[validationType]\n      ? INPUT_VALIDATION_MAP[validationType as keyof InputValidation]\n      : null;\n\n    const sanitizeValue = React.useCallback(\n      (value: string | string[]) => {\n        if (Array.isArray(value)) {\n          value = value.map(removeWhitespace).join('');\n        } else {\n          value = removeWhitespace(value);\n        }\n\n        if (validation) {\n          // global regexp is stateful, so we clone it for each call\n          const regexp = new RegExp(validation.regexp);\n          value = value.replace(regexp, '');\n        } else if (sanitizeValueProp) {\n          value = sanitizeValueProp(value);\n        }\n\n        return value.split('');\n      },\n      [validation, sanitizeValueProp]\n    );\n\n    const controlledValue = React.useMemo(() => {\n      return valueProp != null ? sanitizeValue(valueProp) : undefined;\n    }, [valueProp, sanitizeValue]);\n\n    const [value, setValue] = useControllableState({\n      caller: 'OneTimePasswordField',\n      prop: controlledValue,\n      defaultProp: defaultValue != null ? sanitizeValue(defaultValue) : [],\n      onChange: React.useCallback(\n        (value: string[]) => onValueChange?.(value.join('')),\n        [onValueChange]\n      ),\n    });\n\n    // Update function *specifically* for event handlers.\n    const dispatch = useEffectEvent<Dispatcher>((action) => {\n      switch (action.type) {\n        case 'SET_CHAR': {\n          const { index, char } = action;\n          const currentTarget = collection.at(index)?.element;\n          if (value[index] === char) {\n            const next = currentTarget && collection.from(currentTarget, 1)?.element;\n            focusInput(next);\n            return;\n          }\n\n          // empty values should be handled in the CLEAR_CHAR action\n          if (char === '') {\n            return;\n          }\n\n          if (validation) {\n            const regexp = new RegExp(validation.regexp);\n            const clean = char.replace(regexp, '');\n            if (clean !== char) {\n              // not valid; ignore\n              return;\n            }\n          }\n\n          // no more space\n          if (value.length >= collection.size) {\n            // replace current value; move to next input\n            const newValue = [...value];\n            newValue[index] = char;\n            flushSync(() => setValue(newValue));\n            const next = currentTarget && collection.from(currentTarget, 1)?.element;\n            focusInput(next);\n            return;\n          }\n\n          const newValue = [...value];\n          newValue[index] = char;\n\n          const lastElement = collection.at(-1)?.element;\n          flushSync(() => setValue(newValue));\n          if (currentTarget !== lastElement) {\n            const next = currentTarget && collection.from(currentTarget, 1)?.element;\n            focusInput(next);\n          } else {\n            currentTarget?.select();\n          }\n          return;\n        }\n\n        case 'CLEAR_CHAR': {\n          const { index, reason } = action;\n          if (!value[index]) {\n            return;\n          }\n\n          const newValue = value.filter((_, i) => i !== index);\n          const currentTarget = collection.at(index)?.element;\n          const previous = currentTarget && collection.from(currentTarget, -1)?.element;\n\n          flushSync(() => setValue(newValue));\n          if (reason === 'Backspace') {\n            focusInput(previous);\n          } else if (reason === 'Delete' || reason === 'Cut') {\n            focusInput(currentTarget);\n          }\n          return;\n        }\n\n        case 'CLEAR': {\n          if (value.length === 0) {\n            return;\n          }\n\n          if (action.reason === 'Backspace' || action.reason === 'Delete') {\n            flushSync(() => setValue([]));\n            focusInput(collection.at(0)?.element);\n          } else {\n            setValue([]);\n          }\n          return;\n        }\n\n        case 'PASTE': {\n          const { value: pastedValue } = action;\n          const value = sanitizeValue(pastedValue);\n          if (!value) {\n            return;\n          }\n\n          flushSync(() => setValue(value));\n          focusInput(collection.at(value.length - 1)?.element);\n          return;\n        }\n      }\n    });\n\n    // re-validate when the validation type changes\n    const validationTypeRef = React.useRef(validation);\n    React.useEffect(() => {\n      if (!validation) {\n        return;\n      }\n\n      if (validationTypeRef.current?.type !== validation.type) {\n        validationTypeRef.current = validation;\n        setValue(sanitizeValue(value.join('')));\n      }\n    }, [sanitizeValue, setValue, validation, value]);\n\n    const hiddenInputRef = React.useRef<HTMLInputElement>(null);\n\n    const userActionRef = React.useRef<KeyboardActionDetails | null>(null);\n    const rootRef = React.useRef<HTMLDivElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, rootRef);\n\n    const firstInput = collection.at(0)?.element;\n    const locateForm = React.useCallback(() => {\n      let formElement: HTMLFormElement | null | undefined;\n      if (form) {\n        const associatedElement = (rootRef.current?.ownerDocument ?? document).getElementById(form);\n        if (isFormElement(associatedElement)) {\n          formElement = associatedElement;\n        }\n      } else if (hiddenInputRef.current) {\n        formElement = hiddenInputRef.current.form;\n      } else if (firstInput) {\n        formElement = firstInput.form;\n      }\n\n      return formElement ?? null;\n    }, [form, firstInput]);\n\n    const attemptSubmit = React.useCallback(() => {\n      const formElement = locateForm();\n      formElement?.requestSubmit();\n    }, [locateForm]);\n\n    React.useEffect(() => {\n      const form = locateForm();\n      if (form) {\n        const reset = () => dispatch({ type: 'CLEAR', reason: 'Reset' });\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [dispatch, locateForm]);\n\n    const currentValue = value.join('');\n    const valueRef = React.useRef(currentValue);\n    const length = collection.size;\n    React.useEffect(() => {\n      const previousValue = valueRef.current;\n      valueRef.current = currentValue;\n      if (previousValue === currentValue) {\n        return;\n      }\n\n      if (autoSubmit && value.every((char) => char !== '') && value.length === length) {\n        onAutoSubmit?.(value.join(''));\n        attemptSubmit();\n      }\n    }, [attemptSubmit, autoSubmit, currentValue, length, onAutoSubmit, value]);\n    const isHydrated = useIsHydrated();\n\n    return (\n      <OneTimePasswordFieldContext\n        scope={__scopeOneTimePasswordField}\n        value={value}\n        attemptSubmit={attemptSubmit}\n        disabled={disabled}\n        readOnly={readOnly}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        form={form}\n        name={name}\n        placeholder={placeholder}\n        type={type}\n        hiddenInputRef={hiddenInputRef}\n        userActionRef={userActionRef}\n        dispatch={dispatch}\n        validationType={validationType}\n        orientation={orientation}\n        isHydrated={isHydrated}\n        sanitizeValue={sanitizeValue}\n      >\n        <Collection.Provider scope={__scopeOneTimePasswordField} state={collectionState}>\n          <Collection.Slot scope={__scopeOneTimePasswordField}>\n            <RovingFocusGroup.Root\n              asChild\n              {...rovingFocusGroupScope}\n              orientation={orientation}\n              dir={direction}\n            >\n              <Primitive.Root.div\n                {...domProps}\n                role=\"group\"\n                ref={composedRefs}\n                onPaste={composeEventHandlers(\n                  onPaste,\n                  (event: React.ClipboardEvent<HTMLDivElement>) => {\n                    event.preventDefault();\n                    const pastedValue = event.clipboardData.getData('Text');\n                    dispatch({ type: 'PASTE', value: pastedValue });\n                  }\n                )}\n              >\n                {children}\n              </Primitive.Root.div>\n            </RovingFocusGroup.Root>\n          </Collection.Slot>\n        </Collection.Provider>\n      </OneTimePasswordFieldContext>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * OneTimePasswordFieldHiddenInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface OneTimePasswordFieldHiddenInputProps\n  extends Omit<\n    React.ComponentProps<'input'>,\n    | keyof 'value'\n    | 'defaultValue'\n    | 'type'\n    | 'onChange'\n    | 'readOnly'\n    | 'disabled'\n    | 'autoComplete'\n    | 'autoFocus'\n  > {}\n\nconst OneTimePasswordFieldHiddenInput = React.forwardRef<\n  HTMLInputElement,\n  OneTimePasswordFieldHiddenInputProps\n>(function OneTimePasswordFieldHiddenInput(\n  { __scopeOneTimePasswordField, ...props }: ScopedProps<OneTimePasswordFieldHiddenInputProps>,\n  forwardedRef\n) {\n  const { value, hiddenInputRef, name } = useOneTimePasswordFieldContext(\n    'OneTimePasswordFieldHiddenInput',\n    __scopeOneTimePasswordField\n  );\n  const ref = useComposedRefs(hiddenInputRef, forwardedRef);\n  return (\n    <input\n      ref={ref}\n      name={name}\n      value={value.join('').trim()}\n      autoComplete=\"off\"\n      autoFocus={false}\n      autoCapitalize=\"off\"\n      autoCorrect=\"off\"\n      autoSave=\"off\"\n      spellCheck={false}\n      {...props}\n      type=\"hidden\"\n      readOnly\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * OneTimePasswordFieldInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface OneTimePasswordFieldInputProps\n  extends Omit<\n    Primitive.PrimitivePropsWithRef<'input'>,\n    | 'value'\n    | 'defaultValue'\n    | 'disabled'\n    | 'readOnly'\n    | 'autoComplete'\n    | 'autoFocus'\n    | 'form'\n    | 'name'\n    | 'placeholder'\n    | 'type'\n  > {\n  /**\n   * Callback fired when the user input fails native HTML input validation.\n   */\n  onInvalidChange?: (character: string) => void;\n  /**\n   * User-provided index to determine the order of the inputs. This is useful if\n   * you need certain index-based attributes to be set on the initial render,\n   * often to prevent flickering after hydration.\n   */\n  index?: number;\n}\n\nconst OneTimePasswordFieldInput = React.forwardRef<\n  HTMLInputElement,\n  OneTimePasswordFieldInputProps\n>(function OneTimePasswordFieldInput(\n  {\n    __scopeOneTimePasswordField,\n    onInvalidChange,\n    index: indexProp,\n    ...props\n  }: ScopedProps<OneTimePasswordFieldInputProps>,\n  forwardedRef\n) {\n  // TODO: warn if these values are passed\n  const {\n    value: _value,\n    defaultValue: _defaultValue,\n    disabled: _disabled,\n    readOnly: _readOnly,\n    autoComplete: _autoComplete,\n    autoFocus: _autoFocus,\n    form: _form,\n    name: _name,\n    placeholder: _placeholder,\n    type: _type,\n    ...domProps\n  } = props as Primitive.PrimitivePropsWithRef<'input'>;\n\n  const context = useOneTimePasswordFieldContext(\n    'OneTimePasswordFieldInput',\n    __scopeOneTimePasswordField\n  );\n  const { dispatch, userActionRef, validationType, isHydrated } = context;\n  const collection = useCollection(__scopeOneTimePasswordField);\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeOneTimePasswordField);\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const [element, setElement] = React.useState<HTMLInputElement | null>(null);\n\n  const index = indexProp ?? (element ? collection.indexOf(element) : -1);\n  const canSetPlaceholder = indexProp != null || isHydrated;\n  let placeholder: string | undefined;\n  if (canSetPlaceholder && context.placeholder && context.value.length === 0) {\n    // only set placeholder after hydration to prevent flickering when indices\n    // are re-calculated\n    placeholder = context.placeholder[index];\n  }\n\n  const composedInputRef = useComposedRefs(forwardedRef, inputRef, setElement);\n  const char = context.value[index] ?? '';\n\n  const keyboardActionTimeoutRef = React.useRef<number | null>(null);\n  React.useEffect(() => {\n    return () => {\n      window.clearTimeout(keyboardActionTimeoutRef.current!);\n    };\n  }, []);\n\n  const totalValue = context.value.join('').trim();\n  const lastSelectableIndex = clamp(totalValue.length, [0, collection.size - 1]);\n  const isFocusable = index <= lastSelectableIndex;\n\n  const validation =\n    validationType in INPUT_VALIDATION_MAP\n      ? INPUT_VALIDATION_MAP[validationType as keyof InputValidation]\n      : undefined;\n\n  return (\n    <Collection.ItemSlot scope={__scopeOneTimePasswordField}>\n      <RovingFocusGroup.Item\n        {...rovingFocusGroupScope}\n        asChild\n        focusable={!context.disabled && isFocusable}\n        active={index === lastSelectableIndex}\n      >\n        {({ hasTabStop, isCurrentTabStop }) => {\n          const supportsAutoComplete = hasTabStop ? isCurrentTabStop : index === 0;\n          return (\n            <Primitive.Root.input\n              ref={composedInputRef}\n              type={context.type}\n              aria-label={`Character ${index + 1} of ${collection.size}`}\n              autoComplete={supportsAutoComplete ? context.autoComplete : 'off'}\n              data-1p-ignore={supportsAutoComplete ? undefined : 'true'}\n              data-lpignore={supportsAutoComplete ? undefined : 'true'}\n              data-protonpass-ignore={supportsAutoComplete ? undefined : 'true'}\n              data-bwignore={supportsAutoComplete ? undefined : 'true'}\n              inputMode={validation?.inputMode}\n              maxLength={1}\n              pattern={validation?.pattern}\n              readOnly={context.readOnly}\n              value={char}\n              placeholder={placeholder}\n              data-radix-otp-input=\"\"\n              data-radix-index={index}\n              {...domProps}\n              onFocus={composeEventHandlers(props.onFocus, (event) => {\n                event.currentTarget.select();\n              })}\n              onCut={composeEventHandlers(props.onCut, (event) => {\n                const currentValue = event.currentTarget.value;\n                if (currentValue !== '') {\n                  // In this case the value will be cleared, but we don't want to\n                  // set it directly because the user may want to prevent default\n                  // behavior in the onChange handler. The userActionRef will\n                  // is set temporarily so the change handler can behave correctly\n                  // in response to the action.\n                  userActionRef.current = {\n                    type: 'cut',\n                  };\n                  // Set a short timeout to clear the action tracker after the change\n                  // handler has had time to complete.\n                  keyboardActionTimeoutRef.current = window.setTimeout(() => {\n                    userActionRef.current = null;\n                  }, 10);\n                }\n              })}\n              onInput={composeEventHandlers(props.onInput, (event) => {\n                const value = event.currentTarget.value;\n                if (value.length > 1) {\n                  // Password managers may try to insert the code into a single\n                  // input, in which case form validation will fail to prevent\n                  // additional input. Handle this the same as if a user were\n                  // pasting a value.\n                  event.preventDefault();\n                  dispatch({ type: 'PASTE', value });\n                }\n              })}\n              onChange={composeEventHandlers(props.onChange, (event) => {\n                const value = event.target.value;\n                event.preventDefault();\n                const action = userActionRef.current;\n                userActionRef.current = null;\n\n                if (action) {\n                  switch (action.type) {\n                    case 'cut':\n                      // TODO: do we want to assume the user wantt to clear the\n                      // entire value here and copy the code to the clipboard instead\n                      // of just the value of the given input?\n                      dispatch({ type: 'CLEAR_CHAR', index, reason: 'Cut' });\n                      return;\n                    case 'keydown': {\n                      if (action.key === 'Char') {\n                        // update resulting from a keydown event that set a value\n                        // directly. Ignore.\n                        return;\n                      }\n\n                      const isClearing =\n                        action.key === 'Backspace' && (action.metaKey || action.ctrlKey);\n                      if (action.key === 'Clear' || isClearing) {\n                        dispatch({ type: 'CLEAR', reason: 'Backspace' });\n                      } else {\n                        dispatch({ type: 'CLEAR_CHAR', index, reason: action.key });\n                      }\n                      return;\n                    }\n                    default:\n                      return;\n                  }\n                }\n\n                // Only update the value if it matches the input pattern\n                if (event.target.validity.valid) {\n                  if (value === '') {\n                    let reason: 'Backspace' | 'Delete' | 'Cut' = 'Backspace';\n                    if (isInputEvent(event.nativeEvent)) {\n                      const inputType = event.nativeEvent.inputType;\n                      if (inputType === 'deleteContentBackward') {\n                        reason = 'Backspace';\n                      } else if (inputType === 'deleteByCut') {\n                        reason = 'Cut';\n                      }\n                    }\n                    dispatch({ type: 'CLEAR_CHAR', index, reason });\n                  } else {\n                    dispatch({ type: 'SET_CHAR', char: value, index, event });\n                  }\n                } else {\n                  const element = event.target;\n                  onInvalidChange?.(element.value);\n                  requestAnimationFrame(() => {\n                    if (element.ownerDocument.activeElement === element) {\n                      element.select();\n                    }\n                  });\n                }\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                switch (event.key) {\n                  case 'Clear':\n                  case 'Delete':\n                  case 'Backspace': {\n                    const currentValue = event.currentTarget.value;\n                    // if current value is empty, no change event will fire\n                    if (currentValue === '') {\n                      // if the user presses delete when there is no value, noop\n                      if (event.key === 'Delete') return;\n\n                      const isClearing = event.key === 'Clear' || event.metaKey || event.ctrlKey;\n                      if (isClearing) {\n                        dispatch({ type: 'CLEAR', reason: 'Backspace' });\n                      } else {\n                        const element = event.currentTarget;\n                        requestAnimationFrame(() => {\n                          focusInput(collection.from(element, -1)?.element);\n                        });\n                      }\n                    } else {\n                      // In this case the value will be cleared, but we don't want\n                      // to set it directly because the user may want to prevent\n                      // default behavior in the onChange handler. The userActionRef\n                      // will is set temporarily so the change handler can behave\n                      // correctly in response to the key vs. clearing the value by\n                      // setting state externally.\n                      userActionRef.current = {\n                        type: 'keydown',\n                        key: event.key,\n                        metaKey: event.metaKey,\n                        ctrlKey: event.ctrlKey,\n                      };\n                      // Set a short timeout to clear the action tracker after the change\n                      // handler has had time to complete.\n                      keyboardActionTimeoutRef.current = window.setTimeout(() => {\n                        userActionRef.current = null;\n                      }, 10);\n                    }\n\n                    return;\n                  }\n                  case 'Enter': {\n                    event.preventDefault();\n                    context.attemptSubmit();\n                    return;\n                  }\n                  case 'ArrowDown':\n                  case 'ArrowUp': {\n                    if (context.orientation === 'horizontal') {\n                      // in horizontal orientation, the up/down will de-select the\n                      // input instead of moving focus\n                      event.preventDefault();\n                    }\n                    return;\n                  }\n                  // TODO: Handle left/right arrow keys in vertical writing mode\n                  default: {\n                    if (event.currentTarget.value === event.key) {\n                      // if current value is same as the key press, no change event\n                      // will fire. Focus the next input.\n                      const element = event.currentTarget;\n                      event.preventDefault();\n                      focusInput(collection.from(element, 1)?.element);\n                      return;\n                    } else if (\n                      // input already has a value, but...\n                      event.currentTarget.value &&\n                      // the value is not selected\n                      !(\n                        event.currentTarget.selectionStart === 0 &&\n                        event.currentTarget.selectionEnd != null &&\n                        event.currentTarget.selectionEnd > 0\n                      )\n                    ) {\n                      const attemptedValue = event.key;\n                      if (event.key.length > 1 || event.key === ' ') {\n                        // not a character; do nothing\n                        return;\n                      } else {\n                        // user is attempting to enter a character, but the input\n                        // will not update by default since it's limited to a single\n                        // character.\n                        const nextInput = collection.from(event.currentTarget, 1)?.element;\n                        const lastInput = collection.at(-1)?.element;\n                        if (nextInput !== lastInput && event.currentTarget !== lastInput) {\n                          // if selection is before the value, set the value of the\n                          // current input. Otherwise set the value of the next\n                          // input.\n                          if (event.currentTarget.selectionStart === 0) {\n                            dispatch({ type: 'SET_CHAR', char: attemptedValue, index, event });\n                          } else {\n                            dispatch({\n                              type: 'SET_CHAR',\n                              char: attemptedValue,\n                              index: index + 1,\n                              event,\n                            });\n                          }\n\n                          userActionRef.current = {\n                            type: 'keydown',\n                            key: 'Char',\n                            metaKey: event.metaKey,\n                            ctrlKey: event.ctrlKey,\n                          };\n                          keyboardActionTimeoutRef.current = window.setTimeout(() => {\n                            userActionRef.current = null;\n                          }, 10);\n                        }\n                      }\n                    }\n                  }\n                }\n              })}\n              onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                event.preventDefault();\n                const indexToFocus = Math.min(index, lastSelectableIndex);\n                const element = collection.at(indexToFocus)?.element;\n                focusInput(element);\n              })}\n            />\n          );\n        }}\n      </RovingFocusGroup.Item>\n    </Collection.ItemSlot>\n  );\n});\n\nexport {\n  OneTimePasswordField,\n  OneTimePasswordFieldInput,\n  OneTimePasswordFieldHiddenInput,\n  //\n  OneTimePasswordField as Root,\n  OneTimePasswordFieldInput as Input,\n  OneTimePasswordFieldHiddenInput as HiddenInput,\n};\nexport type {\n  OneTimePasswordFieldProps,\n  OneTimePasswordFieldInputProps,\n  OneTimePasswordFieldHiddenInputProps,\n  InputValidationType,\n};\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction isFormElement(element: Element | null | undefined): element is HTMLFormElement {\n  return element?.tagName === 'FORM';\n}\n\nfunction removeWhitespace(value: string) {\n  return value.replace(/\\s/g, '');\n}\n\nfunction focusInput(element: HTMLInputElement | null | undefined) {\n  if (!element) return;\n  if (element.ownerDocument.activeElement === element) {\n    // if the element is already focused, select the value in the next\n    // animation frame\n    window.requestAnimationFrame(() => {\n      element.select?.();\n    });\n  } else {\n    element.focus();\n  }\n}\n\nfunction isInputEvent(event: Event): event is InputEvent {\n  return event.type === 'input';\n}\n\ntype InputType = 'password' | 'text';\ntype AutoComplete = 'off' | 'one-time-code';\ntype KeyboardActionDetails =\n  | {\n      type: 'keydown';\n      key: 'Backspace' | 'Delete' | 'Clear' | 'Char';\n      metaKey: boolean;\n      ctrlKey: boolean;\n    }\n  | { type: 'cut' };\n\ntype UpdateAction =\n  | {\n      type: 'SET_CHAR';\n      char: string;\n      index: number;\n      event: React.KeyboardEvent | React.ChangeEvent;\n    }\n  | { type: 'CLEAR_CHAR'; index: number; reason: 'Backspace' | 'Delete' | 'Cut' }\n  | { type: 'CLEAR'; reason: 'Reset' | 'Backspace' | 'Delete' | 'Clear' }\n  | { type: 'PASTE'; value: string };\ntype Dispatcher = React.Dispatch<UpdateAction>;\ntype InputValidation = Record<\n  InputValidationType,\n  {\n    type: InputValidationType;\n    regexp: RegExp;\n    pattern: string;\n    inputMode: 'text' | 'numeric';\n  } | null\n>;\n","import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useStateMachine } from './use-state-machine';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Sizes = {\n  content: number;\n  viewport: number;\n  scrollbar: {\n    size: number;\n    paddingStart: number;\n    paddingEnd: number;\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollArea\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_AREA_NAME = 'ScrollArea';\n\ntype ScopedProps<P> = P & { __scopeScrollArea?: Scope };\nconst [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);\n\ntype ScrollAreaContextValue = {\n  type: 'auto' | 'always' | 'scroll' | 'hover';\n  dir: Direction;\n  scrollHideDelay: number;\n  scrollArea: ScrollAreaElement | null;\n  viewport: ScrollAreaViewportElement | null;\n  onViewportChange(viewport: ScrollAreaViewportElement | null): void;\n  content: HTMLDivElement | null;\n  onContentChange(content: HTMLDivElement): void;\n  scrollbarX: ScrollAreaScrollbarElement | null;\n  onScrollbarXChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarXEnabled: boolean;\n  onScrollbarXEnabledChange(rendered: boolean): void;\n  scrollbarY: ScrollAreaScrollbarElement | null;\n  onScrollbarYChange(scrollbar: ScrollAreaScrollbarElement | null): void;\n  scrollbarYEnabled: boolean;\n  onScrollbarYEnabledChange(rendered: boolean): void;\n  onCornerWidthChange(width: number): void;\n  onCornerHeightChange(height: number): void;\n};\n\nconst [ScrollAreaProvider, useScrollAreaContext] =\n  createScrollAreaContext<ScrollAreaContextValue>(SCROLL_AREA_NAME);\n\ntype ScrollAreaElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ScrollAreaProps extends PrimitiveDivProps {\n  type?: ScrollAreaContextValue['type'];\n  dir?: ScrollAreaContextValue['dir'];\n  scrollHideDelay?: number;\n}\n\nconst ScrollArea = React.forwardRef<ScrollAreaElement, ScrollAreaProps>(\n  (props: ScopedProps<ScrollAreaProps>, forwardedRef) => {\n    const {\n      __scopeScrollArea,\n      type = 'hover',\n      dir,\n      scrollHideDelay = 600,\n      ...scrollAreaProps\n    } = props;\n    const [scrollArea, setScrollArea] = React.useState<ScrollAreaElement | null>(null);\n    const [viewport, setViewport] = React.useState<ScrollAreaViewportElement | null>(null);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const [scrollbarX, setScrollbarX] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [scrollbarY, setScrollbarY] = React.useState<ScrollAreaScrollbarElement | null>(null);\n    const [cornerWidth, setCornerWidth] = React.useState(0);\n    const [cornerHeight, setCornerHeight] = React.useState(0);\n    const [scrollbarXEnabled, setScrollbarXEnabled] = React.useState(false);\n    const [scrollbarYEnabled, setScrollbarYEnabled] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));\n    const direction = useDirection(dir);\n\n    return (\n      <ScrollAreaProvider\n        scope={__scopeScrollArea}\n        type={type}\n        dir={direction}\n        scrollHideDelay={scrollHideDelay}\n        scrollArea={scrollArea}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        content={content}\n        onContentChange={setContent}\n        scrollbarX={scrollbarX}\n        onScrollbarXChange={setScrollbarX}\n        scrollbarXEnabled={scrollbarXEnabled}\n        onScrollbarXEnabledChange={setScrollbarXEnabled}\n        scrollbarY={scrollbarY}\n        onScrollbarYChange={setScrollbarY}\n        scrollbarYEnabled={scrollbarYEnabled}\n        onScrollbarYEnabledChange={setScrollbarYEnabled}\n        onCornerWidthChange={setCornerWidth}\n        onCornerHeightChange={setCornerHeight}\n      >\n        <Primitive.div\n          dir={direction}\n          {...scrollAreaProps}\n          ref={composedRefs}\n          style={{\n            position: 'relative',\n            // Pass corner sizes as CSS vars to reduce re-renders of context consumers\n            ['--radix-scroll-area-corner-width' as any]: cornerWidth + 'px',\n            ['--radix-scroll-area-corner-height' as any]: cornerHeight + 'px',\n            ...props.style,\n          }}\n        />\n      </ScrollAreaProvider>\n    );\n  }\n);\n\nScrollArea.displayName = SCROLL_AREA_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'ScrollAreaViewport';\n\ntype ScrollAreaViewportElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaViewportProps extends PrimitiveDivProps {\n  nonce?: string;\n}\n\nconst ScrollAreaViewport = React.forwardRef<ScrollAreaViewportElement, ScrollAreaViewportProps>(\n  (props: ScopedProps<ScrollAreaViewportProps>, forwardedRef) => {\n    const { __scopeScrollArea, children, nonce, ...viewportProps } = props;\n    const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);\n    const ref = React.useRef<ScrollAreaViewportElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n          nonce={nonce}\n        />\n        <Primitive.div\n          data-radix-scroll-area-viewport=\"\"\n          {...viewportProps}\n          ref={composedRefs}\n          style={{\n            /**\n             * We don't support `visible` because the intention is to have at least one scrollbar\n             * if this component is used and `visible` will behave like `auto` in that case\n             * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description\n             *\n             * We don't handle `auto` because the intention is for the native implementation\n             * to be hidden if using this component. We just want to ensure the node is scrollable\n             * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent\n             * the browser from having to work out whether to render native scrollbars or not,\n             * we tell it to with the intention of hiding them in CSS.\n             */\n            overflowX: context.scrollbarXEnabled ? 'scroll' : 'hidden',\n            overflowY: context.scrollbarYEnabled ? 'scroll' : 'hidden',\n            ...props.style,\n          }}\n        >\n          {/**\n           * `display: table` ensures our content div will match the size of its children in both\n           * horizontal and vertical axis so we can determine if scroll width/height changed and\n           * recalculate thumb sizes. This doesn't account for children with *percentage*\n           * widths that change. We'll wait to see what use-cases consumers come up with there\n           * before trying to resolve it.\n           */}\n          <div ref={context.onContentChange} style={{ minWidth: '100%', display: 'table' }}>\n            {children}\n          </div>\n        </Primitive.div>\n      </>\n    );\n  }\n);\n\nScrollAreaViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaScrollbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLLBAR_NAME = 'ScrollAreaScrollbar';\n\ntype ScrollAreaScrollbarElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbar = React.forwardRef<ScrollAreaScrollbarElement, ScrollAreaScrollbarProps>(\n  (props: ScopedProps<ScrollAreaScrollbarProps>, forwardedRef) => {\n    const { forceMount, ...scrollbarProps } = props;\n    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;\n    const isHorizontal = props.orientation === 'horizontal';\n\n    React.useEffect(() => {\n      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);\n      return () => {\n        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);\n      };\n    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);\n\n    return context.type === 'hover' ? (\n      <ScrollAreaScrollbarHover {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'scroll' ? (\n      <ScrollAreaScrollbarScroll {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'auto' ? (\n      <ScrollAreaScrollbarAuto {...scrollbarProps} ref={forwardedRef} forceMount={forceMount} />\n    ) : context.type === 'always' ? (\n      <ScrollAreaScrollbarVisible {...scrollbarProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nScrollAreaScrollbar.displayName = SCROLLBAR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarHoverElement = ScrollAreaScrollbarAutoElement;\ninterface ScrollAreaScrollbarHoverProps extends ScrollAreaScrollbarAutoProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarHover = React.forwardRef<\n  ScrollAreaScrollbarHoverElement,\n  ScrollAreaScrollbarHoverProps\n>((props: ScopedProps<ScrollAreaScrollbarHoverProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [visible, setVisible] = React.useState(false);\n\n  React.useEffect(() => {\n    const scrollArea = context.scrollArea;\n    let hideTimer = 0;\n    if (scrollArea) {\n      const handlePointerEnter = () => {\n        window.clearTimeout(hideTimer);\n        setVisible(true);\n      };\n      const handlePointerLeave = () => {\n        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);\n      };\n      scrollArea.addEventListener('pointerenter', handlePointerEnter);\n      scrollArea.addEventListener('pointerleave', handlePointerLeave);\n      return () => {\n        window.clearTimeout(hideTimer);\n        scrollArea.removeEventListener('pointerenter', handlePointerEnter);\n        scrollArea.removeEventListener('pointerleave', handlePointerLeave);\n      };\n    }\n  }, [context.scrollArea, context.scrollHideDelay]);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarAuto\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarScrollElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarScrollProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarScroll = React.forwardRef<\n  ScrollAreaScrollbarScrollElement,\n  ScrollAreaScrollbarScrollProps\n>((props: ScopedProps<ScrollAreaScrollbarScrollProps>, forwardedRef) => {\n  const { forceMount, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const isHorizontal = props.orientation === 'horizontal';\n  const debounceScrollEnd = useDebounceCallback(() => send('SCROLL_END'), 100);\n  const [state, send] = useStateMachine('hidden', {\n    hidden: {\n      SCROLL: 'scrolling',\n    },\n    scrolling: {\n      SCROLL_END: 'idle',\n      POINTER_ENTER: 'interacting',\n    },\n    interacting: {\n      SCROLL: 'interacting',\n      POINTER_LEAVE: 'idle',\n    },\n    idle: {\n      HIDE: 'hidden',\n      SCROLL: 'scrolling',\n      POINTER_ENTER: 'interacting',\n    },\n  });\n\n  React.useEffect(() => {\n    if (state === 'idle') {\n      const hideTimer = window.setTimeout(() => send('HIDE'), context.scrollHideDelay);\n      return () => window.clearTimeout(hideTimer);\n    }\n  }, [state, context.scrollHideDelay, send]);\n\n  React.useEffect(() => {\n    const viewport = context.viewport;\n    const scrollDirection = isHorizontal ? 'scrollLeft' : 'scrollTop';\n\n    if (viewport) {\n      let prevScrollPos = viewport[scrollDirection];\n      const handleScroll = () => {\n        const scrollPos = viewport[scrollDirection];\n        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;\n        if (hasScrollInDirectionChanged) {\n          send('SCROLL');\n          debounceScrollEnd();\n        }\n        prevScrollPos = scrollPos;\n      };\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [context.viewport, isHorizontal, send, debounceScrollEnd]);\n\n  return (\n    <Presence present={forceMount || state !== 'hidden'}>\n      <ScrollAreaScrollbarVisible\n        data-state={state === 'hidden' ? 'hidden' : 'visible'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, () => send('POINTER_ENTER'))}\n        onPointerLeave={composeEventHandlers(props.onPointerLeave, () => send('POINTER_LEAVE'))}\n      />\n    </Presence>\n  );\n});\n\ntype ScrollAreaScrollbarAutoElement = ScrollAreaScrollbarVisibleElement;\ninterface ScrollAreaScrollbarAutoProps extends ScrollAreaScrollbarVisibleProps {\n  forceMount?: true;\n}\n\nconst ScrollAreaScrollbarAuto = React.forwardRef<\n  ScrollAreaScrollbarAutoElement,\n  ScrollAreaScrollbarAutoProps\n>((props: ScopedProps<ScrollAreaScrollbarAutoProps>, forwardedRef) => {\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const { forceMount, ...scrollbarProps } = props;\n  const [visible, setVisible] = React.useState(false);\n  const isHorizontal = props.orientation === 'horizontal';\n  const handleResize = useDebounceCallback(() => {\n    if (context.viewport) {\n      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;\n      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;\n      setVisible(isHorizontal ? isOverflowX : isOverflowY);\n    }\n  }, 10);\n\n  useResizeObserver(context.viewport, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <Presence present={forceMount || visible}>\n      <ScrollAreaScrollbarVisible\n        data-state={visible ? 'visible' : 'hidden'}\n        {...scrollbarProps}\n        ref={forwardedRef}\n      />\n    </Presence>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarVisibleElement = ScrollAreaScrollbarAxisElement;\ninterface ScrollAreaScrollbarVisibleProps\n  extends Omit<ScrollAreaScrollbarAxisProps, keyof ScrollAreaScrollbarAxisPrivateProps> {\n  orientation?: 'horizontal' | 'vertical';\n}\n\nconst ScrollAreaScrollbarVisible = React.forwardRef<\n  ScrollAreaScrollbarVisibleElement,\n  ScrollAreaScrollbarVisibleProps\n>((props: ScopedProps<ScrollAreaScrollbarVisibleProps>, forwardedRef) => {\n  const { orientation = 'vertical', ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const thumbRef = React.useRef<ScrollAreaThumbElement | null>(null);\n  const pointerOffsetRef = React.useRef(0);\n  const [sizes, setSizes] = React.useState<Sizes>({\n    content: 0,\n    viewport: 0,\n    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 },\n  });\n  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);\n\n  type UncommonProps = 'onThumbPositionChange' | 'onDragScroll' | 'onWheelScroll';\n  const commonProps: Omit<ScrollAreaScrollbarAxisPrivateProps, UncommonProps> = {\n    ...scrollbarProps,\n    sizes,\n    onSizesChange: setSizes,\n    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),\n    onThumbChange: (thumb) => (thumbRef.current = thumb),\n    onThumbPointerUp: () => (pointerOffsetRef.current = 0),\n    onThumbPointerDown: (pointerPos) => (pointerOffsetRef.current = pointerPos),\n  };\n\n  function getScrollPosition(pointerPos: number, dir?: Direction) {\n    return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);\n  }\n\n  if (orientation === 'horizontal') {\n    return (\n      <ScrollAreaScrollbarX\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollLeft;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);\n            thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollLeft = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) {\n            context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);\n          }\n        }}\n      />\n    );\n  }\n\n  if (orientation === 'vertical') {\n    return (\n      <ScrollAreaScrollbarY\n        {...commonProps}\n        ref={forwardedRef}\n        onThumbPositionChange={() => {\n          if (context.viewport && thumbRef.current) {\n            const scrollPos = context.viewport.scrollTop;\n            const offset = getThumbOffsetFromScroll(scrollPos, sizes);\n            thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;\n          }\n        }}\n        onWheelScroll={(scrollPos) => {\n          if (context.viewport) context.viewport.scrollTop = scrollPos;\n        }}\n        onDragScroll={(pointerPos) => {\n          if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);\n        }}\n      />\n    );\n  }\n\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaScrollbarAxisPrivateProps = {\n  hasThumb: boolean;\n  sizes: Sizes;\n  onSizesChange(sizes: Sizes): void;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerDown(pointerPos: number): void;\n  onThumbPointerUp(): void;\n  onThumbPositionChange(): void;\n  onWheelScroll(scrollPos: number): void;\n  onDragScroll(pointerPos: number): void;\n};\n\ntype ScrollAreaScrollbarAxisElement = ScrollAreaScrollbarImplElement;\ninterface ScrollAreaScrollbarAxisProps\n  extends Omit<ScrollAreaScrollbarImplProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarAxisPrivateProps {}\n\nconst ScrollAreaScrollbarX = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"horizontal\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        bottom: 0,\n        left: context.dir === 'rtl' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        right: context.dir === 'ltr' ? 'var(--radix-scroll-area-corner-width)' : 0,\n        ['--radix-scroll-area-thumb-width' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.x)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.x)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollLeft + event.deltaX;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollWidth,\n            viewport: context.viewport.offsetWidth,\n            scrollbar: {\n              size: ref.current.clientWidth,\n              paddingStart: toInt(computedStyle.paddingLeft),\n              paddingEnd: toInt(computedStyle.paddingRight),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\nconst ScrollAreaScrollbarY = React.forwardRef<\n  ScrollAreaScrollbarAxisElement,\n  ScrollAreaScrollbarAxisProps\n>((props: ScopedProps<ScrollAreaScrollbarAxisProps>, forwardedRef) => {\n  const { sizes, onSizesChange, ...scrollbarProps } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);\n  const [computedStyle, setComputedStyle] = React.useState<CSSStyleDeclaration>();\n  const ref = React.useRef<ScrollAreaScrollbarAxisElement>(null);\n  const composeRefs = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);\n\n  React.useEffect(() => {\n    if (ref.current) setComputedStyle(getComputedStyle(ref.current));\n  }, [ref]);\n\n  return (\n    <ScrollAreaScrollbarImpl\n      data-orientation=\"vertical\"\n      {...scrollbarProps}\n      ref={composeRefs}\n      sizes={sizes}\n      style={{\n        top: 0,\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 'var(--radix-scroll-area-corner-height)',\n        ['--radix-scroll-area-thumb-height' as any]: getThumbSize(sizes) + 'px',\n        ...props.style,\n      }}\n      onThumbPointerDown={(pointerPos) => props.onThumbPointerDown(pointerPos.y)}\n      onDragScroll={(pointerPos) => props.onDragScroll(pointerPos.y)}\n      onWheelScroll={(event, maxScrollPos) => {\n        if (context.viewport) {\n          const scrollPos = context.viewport.scrollTop + event.deltaY;\n          props.onWheelScroll(scrollPos);\n          // prevent window scroll when wheeling on scrollbar\n          if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {\n            event.preventDefault();\n          }\n        }\n      }}\n      onResize={() => {\n        if (ref.current && context.viewport && computedStyle) {\n          onSizesChange({\n            content: context.viewport.scrollHeight,\n            viewport: context.viewport.offsetHeight,\n            scrollbar: {\n              size: ref.current.clientHeight,\n              paddingStart: toInt(computedStyle.paddingTop),\n              paddingEnd: toInt(computedStyle.paddingBottom),\n            },\n          });\n        }\n      }}\n    />\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollbarContext = {\n  hasThumb: boolean;\n  scrollbar: ScrollAreaScrollbarElement | null;\n  onThumbChange(thumb: ScrollAreaThumbElement | null): void;\n  onThumbPointerUp(): void;\n  onThumbPointerDown(pointerPos: { x: number; y: number }): void;\n  onThumbPositionChange(): void;\n};\n\nconst [ScrollbarProvider, useScrollbarContext] =\n  createScrollAreaContext<ScrollbarContext>(SCROLLBAR_NAME);\n\ntype ScrollAreaScrollbarImplElement = React.ComponentRef<typeof Primitive.div>;\ntype ScrollAreaScrollbarImplPrivateProps = {\n  sizes: Sizes;\n  hasThumb: boolean;\n  onThumbChange: ScrollbarContext['onThumbChange'];\n  onThumbPointerUp: ScrollbarContext['onThumbPointerUp'];\n  onThumbPointerDown: ScrollbarContext['onThumbPointerDown'];\n  onThumbPositionChange: ScrollbarContext['onThumbPositionChange'];\n  onWheelScroll(event: WheelEvent, maxScrollPos: number): void;\n  onDragScroll(pointerPos: { x: number; y: number }): void;\n  onResize(): void;\n};\ninterface ScrollAreaScrollbarImplProps\n  extends Omit<PrimitiveDivProps, keyof ScrollAreaScrollbarImplPrivateProps>,\n    ScrollAreaScrollbarImplPrivateProps {}\n\nconst ScrollAreaScrollbarImpl = React.forwardRef<\n  ScrollAreaScrollbarImplElement,\n  ScrollAreaScrollbarImplProps\n>((props: ScopedProps<ScrollAreaScrollbarImplProps>, forwardedRef) => {\n  const {\n    __scopeScrollArea,\n    sizes,\n    hasThumb,\n    onThumbChange,\n    onThumbPointerUp,\n    onThumbPointerDown,\n    onThumbPositionChange,\n    onDragScroll,\n    onWheelScroll,\n    onResize,\n    ...scrollbarProps\n  } = props;\n  const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);\n  const [scrollbar, setScrollbar] = React.useState<ScrollAreaScrollbarElement | null>(null);\n  const composeRefs = useComposedRefs(forwardedRef, (node) => setScrollbar(node));\n  const rectRef = React.useRef<DOMRect | null>(null);\n  const prevWebkitUserSelectRef = React.useRef<string>('');\n  const viewport = context.viewport;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const handleWheelScroll = useCallbackRef(onWheelScroll);\n  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);\n  const handleResize = useDebounceCallback(onResize, 10);\n\n  function handleDragScroll(event: React.PointerEvent<HTMLElement>) {\n    if (rectRef.current) {\n      const x = event.clientX - rectRef.current.left;\n      const y = event.clientY - rectRef.current.top;\n      onDragScroll({ x, y });\n    }\n  }\n\n  /**\n   * We bind wheel event imperatively so we can switch off passive\n   * mode for document wheel event to allow it to be prevented\n   */\n  React.useEffect(() => {\n    const handleWheel = (event: WheelEvent) => {\n      const element = event.target as HTMLElement;\n      const isScrollbarWheel = scrollbar?.contains(element);\n      if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);\n    };\n    document.addEventListener('wheel', handleWheel, { passive: false });\n    return () => document.removeEventListener('wheel', handleWheel, { passive: false } as any);\n  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);\n\n  /**\n   * Update thumb position on sizes change\n   */\n  React.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);\n\n  useResizeObserver(scrollbar, handleResize);\n  useResizeObserver(context.content, handleResize);\n\n  return (\n    <ScrollbarProvider\n      scope={__scopeScrollArea}\n      scrollbar={scrollbar}\n      hasThumb={hasThumb}\n      onThumbChange={useCallbackRef(onThumbChange)}\n      onThumbPointerUp={useCallbackRef(onThumbPointerUp)}\n      onThumbPositionChange={handleThumbPositionChange}\n      onThumbPointerDown={useCallbackRef(onThumbPointerDown)}\n    >\n      <Primitive.div\n        {...scrollbarProps}\n        ref={composeRefs}\n        style={{ position: 'absolute', ...scrollbarProps.style }}\n        onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n          const mainPointer = 0;\n          if (event.button === mainPointer) {\n            const element = event.target as HTMLElement;\n            element.setPointerCapture(event.pointerId);\n            rectRef.current = scrollbar!.getBoundingClientRect();\n            // pointer capture doesn't prevent text selection in Safari\n            // so we remove text selection manually when scrolling\n            prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;\n            document.body.style.webkitUserSelect = 'none';\n            if (context.viewport) context.viewport.style.scrollBehavior = 'auto';\n            handleDragScroll(event);\n          }\n        })}\n        onPointerMove={composeEventHandlers(props.onPointerMove, handleDragScroll)}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          const element = event.target as HTMLElement;\n          if (element.hasPointerCapture(event.pointerId)) {\n            element.releasePointerCapture(event.pointerId);\n          }\n          document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;\n          if (context.viewport) context.viewport.style.scrollBehavior = '';\n          rectRef.current = null;\n        })}\n      />\n    </ScrollbarProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'ScrollAreaThumb';\n\ntype ScrollAreaThumbElement = ScrollAreaThumbImplElement;\ninterface ScrollAreaThumbProps extends ScrollAreaThumbImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ScrollAreaThumb = React.forwardRef<ScrollAreaThumbElement, ScrollAreaThumbProps>(\n  (props: ScopedProps<ScrollAreaThumbProps>, forwardedRef) => {\n    const { forceMount, ...thumbProps } = props;\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);\n    return (\n      <Presence present={forceMount || scrollbarContext.hasThumb}>\n        <ScrollAreaThumbImpl ref={forwardedRef} {...thumbProps} />\n      </Presence>\n    );\n  }\n);\n\ntype ScrollAreaThumbImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaThumbImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaThumbImpl = React.forwardRef<ScrollAreaThumbImplElement, ScrollAreaThumbImplProps>(\n  (props: ScopedProps<ScrollAreaThumbImplProps>, forwardedRef) => {\n    const { __scopeScrollArea, style, ...thumbProps } = props;\n    const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);\n    const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);\n    const { onThumbPositionChange } = scrollbarContext;\n    const composedRef = useComposedRefs(forwardedRef, (node) =>\n      scrollbarContext.onThumbChange(node)\n    );\n    const removeUnlinkedScrollListenerRef = React.useRef<() => void>(undefined);\n    const debounceScrollEnd = useDebounceCallback(() => {\n      if (removeUnlinkedScrollListenerRef.current) {\n        removeUnlinkedScrollListenerRef.current();\n        removeUnlinkedScrollListenerRef.current = undefined;\n      }\n    }, 100);\n\n    React.useEffect(() => {\n      const viewport = scrollAreaContext.viewport;\n      if (viewport) {\n        /**\n         * We only bind to native scroll event so we know when scroll starts and ends.\n         * When scroll starts we start a requestAnimationFrame loop that checks for\n         * changes to scroll position. That rAF loop triggers our thumb position change\n         * when relevant to avoid scroll-linked effects. We cancel the loop when scroll ends.\n         * https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\n         */\n        const handleScroll = () => {\n          debounceScrollEnd();\n          if (!removeUnlinkedScrollListenerRef.current) {\n            const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);\n            removeUnlinkedScrollListenerRef.current = listener;\n            onThumbPositionChange();\n          }\n        };\n        onThumbPositionChange();\n        viewport.addEventListener('scroll', handleScroll);\n        return () => viewport.removeEventListener('scroll', handleScroll);\n      }\n    }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);\n\n    return (\n      <Primitive.div\n        data-state={scrollbarContext.hasThumb ? 'visible' : 'hidden'}\n        {...thumbProps}\n        ref={composedRef}\n        style={{\n          width: 'var(--radix-scroll-area-thumb-width)',\n          height: 'var(--radix-scroll-area-thumb-height)',\n          ...style,\n        }}\n        onPointerDownCapture={composeEventHandlers(props.onPointerDownCapture, (event) => {\n          const thumb = event.target as HTMLElement;\n          const thumbRect = thumb.getBoundingClientRect();\n          const x = event.clientX - thumbRect.left;\n          const y = event.clientY - thumbRect.top;\n          scrollbarContext.onThumbPointerDown({ x, y });\n        })}\n        onPointerUp={composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)}\n      />\n    );\n  }\n);\n\nScrollAreaThumb.displayName = THUMB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ScrollAreaCorner\n * -----------------------------------------------------------------------------------------------*/\n\nconst CORNER_NAME = 'ScrollAreaCorner';\n\ntype ScrollAreaCornerElement = ScrollAreaCornerImplElement;\ninterface ScrollAreaCornerProps extends ScrollAreaCornerImplProps {}\n\nconst ScrollAreaCorner = React.forwardRef<ScrollAreaCornerElement, ScrollAreaCornerProps>(\n  (props: ScopedProps<ScrollAreaCornerProps>, forwardedRef) => {\n    const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);\n    const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);\n    const hasCorner = context.type !== 'scroll' && hasBothScrollbarsVisible;\n    return hasCorner ? <ScrollAreaCornerImpl {...props} ref={forwardedRef} /> : null;\n  }\n);\n\nScrollAreaCorner.displayName = CORNER_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ScrollAreaCornerImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface ScrollAreaCornerImplProps extends PrimitiveDivProps {}\n\nconst ScrollAreaCornerImpl = React.forwardRef<\n  ScrollAreaCornerImplElement,\n  ScrollAreaCornerImplProps\n>((props: ScopedProps<ScrollAreaCornerImplProps>, forwardedRef) => {\n  const { __scopeScrollArea, ...cornerProps } = props;\n  const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const hasSize = Boolean(width && height);\n\n  useResizeObserver(context.scrollbarX, () => {\n    const height = context.scrollbarX?.offsetHeight || 0;\n    context.onCornerHeightChange(height);\n    setHeight(height);\n  });\n\n  useResizeObserver(context.scrollbarY, () => {\n    const width = context.scrollbarY?.offsetWidth || 0;\n    context.onCornerWidthChange(width);\n    setWidth(width);\n  });\n\n  return hasSize ? (\n    <Primitive.div\n      {...cornerProps}\n      ref={forwardedRef}\n      style={{\n        width,\n        height,\n        position: 'absolute',\n        right: context.dir === 'ltr' ? 0 : undefined,\n        left: context.dir === 'rtl' ? 0 : undefined,\n        bottom: 0,\n        ...props.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction toInt(value?: string) {\n  return value ? parseInt(value, 10) : 0;\n}\n\nfunction getThumbRatio(viewportSize: number, contentSize: number) {\n  const ratio = viewportSize / contentSize;\n  return isNaN(ratio) ? 0 : ratio;\n}\n\nfunction getThumbSize(sizes: Sizes) {\n  const ratio = getThumbRatio(sizes.viewport, sizes.content);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;\n  // minimum of 18 matches macOS minimum\n  return Math.max(thumbSize, 18);\n}\n\nfunction getScrollPositionFromPointer(\n  pointerPos: number,\n  pointerOffset: number,\n  sizes: Sizes,\n  dir: Direction = 'ltr'\n) {\n  const thumbSizePx = getThumbSize(sizes);\n  const thumbCenter = thumbSizePx / 2;\n  const offset = pointerOffset || thumbCenter;\n  const thumbOffsetFromEnd = thumbSizePx - offset;\n  const minPointerPos = sizes.scrollbar.paddingStart + offset;\n  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const scrollRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange as [number, number]);\n  return interpolate(pointerPos);\n}\n\nfunction getThumbOffsetFromScroll(scrollPos: number, sizes: Sizes, dir: Direction = 'ltr') {\n  const thumbSizePx = getThumbSize(sizes);\n  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;\n  const scrollbar = sizes.scrollbar.size - scrollbarPadding;\n  const maxScrollPos = sizes.content - sizes.viewport;\n  const maxThumbPos = scrollbar - thumbSizePx;\n  const scrollClampRange = dir === 'ltr' ? [0, maxScrollPos] : [maxScrollPos * -1, 0];\n  const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange as [number, number]);\n  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);\n  return interpolate(scrollWithoutMomentum);\n}\n\n// https://github.com/tmcw-up-for-adoption/simple-linear-scale/blob/master/index.js\nfunction linearScale(input: readonly [number, number], output: readonly [number, number]) {\n  return (value: number) => {\n    if (input[0] === input[1] || output[0] === output[1]) return output[0];\n    const ratio = (output[1] - output[0]) / (input[1] - input[0]);\n    return output[0] + ratio * (value - input[0]);\n  };\n}\n\nfunction isScrollingWithinScrollbarBounds(scrollPos: number, maxScrollPos: number) {\n  return scrollPos > 0 && scrollPos < maxScrollPos;\n}\n\n// Custom scroll handler to avoid scroll-linked effects\n// https://developer.mozilla.org/en-US/docs/Mozilla/Performance/Scroll-linked_effects\nconst addUnlinkedScrollListener = (node: HTMLElement, handler = () => {}) => {\n  let prevPosition = { left: node.scrollLeft, top: node.scrollTop };\n  let rAF = 0;\n  (function loop() {\n    const position = { left: node.scrollLeft, top: node.scrollTop };\n    const isHorizontalScroll = prevPosition.left !== position.left;\n    const isVerticalScroll = prevPosition.top !== position.top;\n    if (isHorizontalScroll || isVerticalScroll) handler();\n    prevPosition = position;\n    rAF = window.requestAnimationFrame(loop);\n  })();\n  return () => window.cancelAnimationFrame(rAF);\n};\n\nfunction useDebounceCallback(callback: () => void, delay: number) {\n  const handleCallback = useCallbackRef(callback);\n  const debounceTimerRef = React.useRef(0);\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);\n  return React.useCallback(() => {\n    window.clearTimeout(debounceTimerRef.current);\n    debounceTimerRef.current = window.setTimeout(handleCallback, delay);\n  }, [handleCallback, delay]);\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ScrollArea;\nconst Viewport = ScrollAreaViewport;\nconst Scrollbar = ScrollAreaScrollbar;\nconst Thumb = ScrollAreaThumb;\nconst Corner = ScrollAreaCorner;\n\nexport {\n  createScrollAreaScope,\n  //\n  ScrollArea,\n  ScrollAreaViewport,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaCorner,\n  //\n  Root,\n  Viewport,\n  Scrollbar,\n  Thumb,\n  Corner,\n};\nexport type {\n  ScrollAreaProps,\n  ScrollAreaViewportProps,\n  ScrollAreaScrollbarProps,\n  ScrollAreaThumbProps,\n  ScrollAreaCornerProps,\n};\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as SeparatorPrimitive from '@radix-ui/react-separator';\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group';\nimport { createToggleGroupScope } from '@radix-ui/react-toggle-group';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Toolbar\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLBAR_NAME = 'Toolbar';\n\ntype ScopedProps<P> = P & { __scopeToolbar?: Scope };\nconst [createToolbarContext, createToolbarScope] = createContextScope(TOOLBAR_NAME, [\n  createRovingFocusGroupScope,\n  createToggleGroupScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useToggleGroupScope = createToggleGroupScope();\n\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype ToolbarContextValue = {\n  orientation: RovingFocusGroupProps['orientation'];\n  dir: RovingFocusGroupProps['dir'];\n};\nconst [ToolbarProvider, useToolbarContext] =\n  createToolbarContext<ToolbarContextValue>(TOOLBAR_NAME);\n\ntype ToolbarElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ToolbarProps extends PrimitiveDivProps {\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Toolbar = React.forwardRef<ToolbarElement, ToolbarProps>(\n  (props: ScopedProps<ToolbarProps>, forwardedRef) => {\n    const { __scopeToolbar, orientation = 'horizontal', dir, loop = true, ...toolbarProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    const direction = useDirection(dir);\n    return (\n      <ToolbarProvider scope={__scopeToolbar} orientation={orientation} dir={direction}>\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"toolbar\"\n            aria-orientation={orientation}\n            dir={direction}\n            {...toolbarProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </ToolbarProvider>\n    );\n  }\n);\n\nToolbar.displayName = TOOLBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'ToolbarSeparator';\n\ntype ToolbarSeparatorElement = React.ComponentRef<typeof SeparatorPrimitive.Root>;\ntype SeparatorProps = React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>;\ninterface ToolbarSeparatorProps extends SeparatorProps {}\n\nconst ToolbarSeparator = React.forwardRef<ToolbarSeparatorElement, ToolbarSeparatorProps>(\n  (props: ScopedProps<ToolbarSeparatorProps>, forwardedRef) => {\n    const { __scopeToolbar, ...separatorProps } = props;\n    const context = useToolbarContext(SEPARATOR_NAME, __scopeToolbar);\n    return (\n      <SeparatorPrimitive.Root\n        orientation={context.orientation === 'horizontal' ? 'vertical' : 'horizontal'}\n        {...separatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nToolbarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst BUTTON_NAME = 'ToolbarButton';\n\ntype ToolbarButtonElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToolbarButtonProps extends PrimitiveButtonProps {}\n\nconst ToolbarButton = React.forwardRef<ToolbarButtonElement, ToolbarButtonProps>(\n  (props: ScopedProps<ToolbarButtonProps>, forwardedRef) => {\n    const { __scopeToolbar, ...buttonProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable={!props.disabled}>\n        <Primitive.button type=\"button\" {...buttonProps} ref={forwardedRef} />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nToolbarButton.displayName = BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'ToolbarLink';\n\ntype ToolbarLinkElement = React.ComponentRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface ToolbarLinkProps extends PrimitiveLinkProps {}\n\nconst ToolbarLink = React.forwardRef<ToolbarLinkElement, ToolbarLinkProps>(\n  (props: ScopedProps<ToolbarLinkProps>, forwardedRef) => {\n    const { __scopeToolbar, ...linkProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToolbar);\n    return (\n      <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable>\n        <Primitive.a\n          {...linkProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (event.key === ' ') event.currentTarget.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nToolbarLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarToggleGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_GROUP_NAME = 'ToolbarToggleGroup';\n\ntype ToolbarToggleGroupElement = React.ComponentRef<typeof ToggleGroupPrimitive.Root>;\ntype ToggleGroupProps = React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root>;\ninterface ToolbarToggleGroupSingleProps extends Extract<ToggleGroupProps, { type: 'single' }> {}\ninterface ToolbarToggleGroupMultipleProps extends Extract<ToggleGroupProps, { type: 'multiple' }> {}\n\nconst ToolbarToggleGroup = React.forwardRef<\n  ToolbarToggleGroupElement,\n  ToolbarToggleGroupSingleProps | ToolbarToggleGroupMultipleProps\n>(\n  (\n    props: ScopedProps<ToolbarToggleGroupSingleProps | ToolbarToggleGroupMultipleProps>,\n    forwardedRef\n  ) => {\n    const { __scopeToolbar, ...toggleGroupProps } = props;\n    const context = useToolbarContext(TOGGLE_GROUP_NAME, __scopeToolbar);\n    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n    return (\n      <ToggleGroupPrimitive.Root\n        data-orientation={context.orientation}\n        dir={context.dir}\n        {...toggleGroupScope}\n        {...toggleGroupProps}\n        ref={forwardedRef}\n        rovingFocus={false}\n      />\n    );\n  }\n);\n\nToolbarToggleGroup.displayName = TOGGLE_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ToolbarToggleItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOGGLE_ITEM_NAME = 'ToolbarToggleItem';\n\ntype ToolbarToggleItemElement = React.ComponentRef<typeof ToggleGroupPrimitive.Item>;\ntype ToggleGroupItemProps = React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>;\ninterface ToolbarToggleItemProps extends ToggleGroupItemProps {}\n\nconst ToolbarToggleItem = React.forwardRef<ToolbarToggleItemElement, ToolbarToggleItemProps>(\n  (props: ScopedProps<ToolbarToggleItemProps>, forwardedRef) => {\n    const { __scopeToolbar, ...toggleItemProps } = props;\n    const toggleGroupScope = useToggleGroupScope(__scopeToolbar);\n    const scope = { __scopeToolbar: props.__scopeToolbar };\n\n    return (\n      <ToolbarButton asChild {...scope}>\n        <ToggleGroupPrimitive.Item {...toggleGroupScope} {...toggleItemProps} ref={forwardedRef} />\n      </ToolbarButton>\n    );\n  }\n);\n\nToolbarToggleItem.displayName = TOGGLE_ITEM_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toolbar;\nconst Separator = ToolbarSeparator;\nconst Button = ToolbarButton;\nconst Link = ToolbarLink;\nconst ToggleGroup = ToolbarToggleGroup;\nconst ToggleItem = ToolbarToggleItem;\n\nexport {\n  createToolbarScope,\n  //\n  Toolbar,\n  ToolbarSeparator,\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n  //\n  Root,\n  Separator,\n  Button,\n  Link,\n  ToggleGroup,\n  ToggleItem,\n};\nexport type {\n  ToolbarProps,\n  ToolbarSeparatorProps,\n  ToolbarButtonProps,\n  ToolbarLinkProps,\n  ToolbarToggleGroupSingleProps,\n  ToolbarToggleGroupMultipleProps,\n  ToolbarToggleItemProps,\n};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Toggle\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Toggle';\n\ntype ToggleElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface ToggleProps extends PrimitiveButtonProps {\n  /**\n   * The controlled state of the toggle.\n   */\n  pressed?: boolean;\n  /**\n   * The state of the toggle when initially rendered. Use `defaultPressed`\n   * if you do not need to control the state of the toggle.\n   * @defaultValue false\n   */\n  defaultPressed?: boolean;\n  /**\n   * The callback that fires when the state of the toggle changes.\n   */\n  onPressedChange?(pressed: boolean): void;\n}\n\nconst Toggle = React.forwardRef<ToggleElement, ToggleProps>((props, forwardedRef) => {\n  const { pressed: pressedProp, defaultPressed, onPressedChange, ...buttonProps } = props;\n\n  const [pressed, setPressed] = useControllableState({\n    prop: pressedProp,\n    onChange: onPressedChange,\n    defaultProp: defaultPressed ?? false,\n    caller: NAME,\n  });\n\n  return (\n    <Primitive.button\n      type=\"button\"\n      aria-pressed={pressed}\n      data-state={pressed ? 'on' : 'off'}\n      data-disabled={props.disabled ? '' : undefined}\n      {...buttonProps}\n      ref={forwardedRef}\n      onClick={composeEventHandlers(props.onClick, () => {\n        if (!props.disabled) {\n          setPressed(!pressed);\n        }\n      })}\n    />\n  );\n});\n\nToggle.displayName = NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = Toggle;\n\nexport {\n  Toggle,\n  //\n  Root,\n};\nexport type { ToggleProps };\n","import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useIsHydrated } from '@radix-ui/react-use-is-hydrated';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nconst AVATAR_NAME = 'Avatar';\n\ntype ScopedProps<P> = P & { __scopeAvatar?: Scope };\nconst [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\n\ntype ImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';\n\ntype AvatarContextValue = {\n  imageLoadingStatus: ImageLoadingStatus;\n  onImageLoadingStatusChange(status: ImageLoadingStatus): void;\n};\n\nconst [AvatarProvider, useAvatarContext] = createAvatarContext<AvatarContextValue>(AVATAR_NAME);\n\ntype AvatarElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface AvatarProps extends PrimitiveSpanProps {}\n\nconst Avatar = React.forwardRef<AvatarElement, AvatarProps>(\n  (props: ScopedProps<AvatarProps>, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n    return (\n      <AvatarProvider\n        scope={__scopeAvatar}\n        imageLoadingStatus={imageLoadingStatus}\n        onImageLoadingStatusChange={setImageLoadingStatus}\n      >\n        <Primitive.span {...avatarProps} ref={forwardedRef} />\n      </AvatarProvider>\n    );\n  }\n);\n\nAvatar.displayName = AVATAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarImage\n * -----------------------------------------------------------------------------------------------*/\n\nconst IMAGE_NAME = 'AvatarImage';\n\ntype AvatarImageElement = React.ComponentRef<typeof Primitive.img>;\ntype PrimitiveImageProps = React.ComponentPropsWithoutRef<typeof Primitive.img>;\ninterface AvatarImageProps extends PrimitiveImageProps {\n  onLoadingStatusChange?: (status: ImageLoadingStatus) => void;\n}\n\nconst AvatarImage = React.forwardRef<AvatarImageElement, AvatarImageProps>(\n  (props: ScopedProps<AvatarImageProps>, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {}, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src, imageProps);\n    const handleLoadingStatusChange = useCallbackRef((status: ImageLoadingStatus) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== 'idle') {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n\n    return imageLoadingStatus === 'loaded' ? (\n      <Primitive.img {...imageProps} ref={forwardedRef} src={src} />\n    ) : null;\n  }\n);\n\nAvatarImage.displayName = IMAGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarFallback\n * -----------------------------------------------------------------------------------------------*/\n\nconst FALLBACK_NAME = 'AvatarFallback';\n\ntype AvatarFallbackElement = React.ComponentRef<typeof Primitive.span>;\ninterface AvatarFallbackProps extends PrimitiveSpanProps {\n  delayMs?: number;\n}\n\nconst AvatarFallback = React.forwardRef<AvatarFallbackElement, AvatarFallbackProps>(\n  (props: ScopedProps<AvatarFallbackProps>, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === undefined);\n\n    React.useEffect(() => {\n      if (delayMs !== undefined) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n\n    return canRender && context.imageLoadingStatus !== 'loaded' ? (\n      <Primitive.span {...fallbackProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nAvatarFallback.displayName = FALLBACK_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction resolveLoadingStatus(image: HTMLImageElement | null, src?: string): ImageLoadingStatus {\n  if (!image) {\n    return 'idle';\n  }\n  if (!src) {\n    return 'error';\n  }\n  if (image.src !== src) {\n    image.src = src;\n  }\n  return image.complete && image.naturalWidth > 0 ? 'loaded' : 'loading';\n}\n\nfunction useImageLoadingStatus(\n  src: string | undefined,\n  { referrerPolicy, crossOrigin }: AvatarImageProps\n) {\n  const isHydrated = useIsHydrated();\n  const imageRef = React.useRef<HTMLImageElement | null>(null);\n  const image = (() => {\n    if (!isHydrated) return null;\n    if (!imageRef.current) {\n      imageRef.current = new window.Image();\n    }\n    return imageRef.current;\n  })();\n\n  const [loadingStatus, setLoadingStatus] = React.useState<ImageLoadingStatus>(() =>\n    resolveLoadingStatus(image, src)\n  );\n\n  useLayoutEffect(() => {\n    setLoadingStatus(resolveLoadingStatus(image, src));\n  }, [image, src]);\n\n  useLayoutEffect(() => {\n    const updateStatus = (status: ImageLoadingStatus) => () => {\n      setLoadingStatus(status);\n    };\n\n    if (!image) return;\n\n    const handleLoad = updateStatus('loaded');\n    const handleError = updateStatus('error');\n    image.addEventListener('load', handleLoad);\n    image.addEventListener('error', handleError);\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n    if (typeof crossOrigin === 'string') {\n      image.crossOrigin = crossOrigin;\n    }\n\n    return () => {\n      image.removeEventListener('load', handleLoad);\n      image.removeEventListener('error', handleError);\n    };\n  }, [image, crossOrigin, referrerPolicy]);\n\n  return loadingStatus;\n}\n\nconst Root = Avatar;\nconst Image = AvatarImage;\nconst Fallback = AvatarFallback;\n\nexport {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n};\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps };\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { composeRefs, useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Orientation = 'vertical' | 'horizontal';\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAVIGATION_MENU_NAME = 'NavigationMenu';\n\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  NavigationMenuTriggerElement,\n  { value: string }\n>(NAVIGATION_MENU_NAME);\n\nconst [FocusGroupCollection, useFocusGroupCollection, createFocusGroupCollectionScope] =\n  createCollection<FocusGroupItemElement, {}>(NAVIGATION_MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeNavigationMenu?: Scope };\nconst [createNavigationMenuContext, createNavigationMenuScope] = createContextScope(\n  NAVIGATION_MENU_NAME,\n  [createCollectionScope, createFocusGroupCollectionScope]\n);\n\ntype ContentData = {\n  ref?: React.Ref<ViewportContentMounterElement>;\n} & ViewportContentMounterProps;\n\ntype NavigationMenuContextValue = {\n  isRootMenu: boolean;\n  value: string;\n  previousValue: string;\n  baseId: string;\n  dir: Direction;\n  orientation: Orientation;\n  rootNavigationMenu: NavigationMenuElement | null;\n  indicatorTrack: HTMLDivElement | null;\n  onIndicatorTrackChange(indicatorTrack: HTMLDivElement | null): void;\n  viewport: NavigationMenuViewportElement | null;\n  onViewportChange(viewport: NavigationMenuViewportElement | null): void;\n  onViewportContentChange(contentValue: string, contentData: ContentData): void;\n  onViewportContentRemove(contentValue: string): void;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave(): void;\n  onContentEnter(): void;\n  onContentLeave(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n};\n\nconst [NavigationMenuProviderImpl, useNavigationMenuContext] =\n  createNavigationMenuContext<NavigationMenuContextValue>(NAVIGATION_MENU_NAME);\n\nconst [ViewportContentProvider, useViewportContentContext] = createNavigationMenuContext<{\n  items: Map<string, ContentData>;\n}>(NAVIGATION_MENU_NAME);\n\ntype NavigationMenuElement = React.ComponentRef<typeof Primitive.nav>;\ntype PrimitiveNavProps = React.ComponentPropsWithoutRef<typeof Primitive.nav>;\ninterface NavigationMenuProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveNavProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  dir?: Direction;\n  orientation?: Orientation;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 200\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n}\n\nconst NavigationMenu = React.forwardRef<NavigationMenuElement, NavigationMenuProps>(\n  (props: ScopedProps<NavigationMenuProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      delayDuration = 200,\n      skipDelayDuration = 300,\n      orientation = 'horizontal',\n      dir,\n      ...NavigationMenuProps\n    } = props;\n    const [navigationMenu, setNavigationMenu] = React.useState<NavigationMenuElement | null>(null);\n    const composedRef = useComposedRefs(forwardedRef, (node) => setNavigationMenu(node));\n    const direction = useDirection(dir);\n    const openTimerRef = React.useRef(0);\n    const closeTimerRef = React.useRef(0);\n    const skipDelayTimerRef = React.useRef(0);\n    const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: (value) => {\n        const isOpen = value !== '';\n        const hasSkipDelayDuration = skipDelayDuration > 0;\n\n        if (isOpen) {\n          window.clearTimeout(skipDelayTimerRef.current);\n          if (hasSkipDelayDuration) setIsOpenDelayed(false);\n        } else {\n          window.clearTimeout(skipDelayTimerRef.current);\n          skipDelayTimerRef.current = window.setTimeout(\n            () => setIsOpenDelayed(true),\n            skipDelayDuration\n          );\n        }\n\n        onValueChange?.(value);\n      },\n      defaultProp: defaultValue ?? '',\n      caller: NAVIGATION_MENU_NAME,\n    });\n\n    const startCloseTimer = React.useCallback(() => {\n      window.clearTimeout(closeTimerRef.current);\n      closeTimerRef.current = window.setTimeout(() => setValue(''), 150);\n    }, [setValue]);\n\n    const handleOpen = React.useCallback(\n      (itemValue: string) => {\n        window.clearTimeout(closeTimerRef.current);\n        setValue(itemValue);\n      },\n      [setValue]\n    );\n\n    const handleDelayedOpen = React.useCallback(\n      (itemValue: string) => {\n        const isOpenItem = value === itemValue;\n        if (isOpenItem) {\n          // If the item is already open (e.g. we're transitioning from the content to the trigger)\n          // then we want to clear the close timer immediately.\n          window.clearTimeout(closeTimerRef.current);\n        } else {\n          openTimerRef.current = window.setTimeout(() => {\n            window.clearTimeout(closeTimerRef.current);\n            setValue(itemValue);\n          }, delayDuration);\n        }\n      },\n      [value, setValue, delayDuration]\n    );\n\n    React.useEffect(() => {\n      return () => {\n        window.clearTimeout(openTimerRef.current);\n        window.clearTimeout(closeTimerRef.current);\n        window.clearTimeout(skipDelayTimerRef.current);\n      };\n    }, []);\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={true}\n        value={value}\n        dir={direction}\n        orientation={orientation}\n        rootNavigationMenu={navigationMenu}\n        onTriggerEnter={(itemValue) => {\n          window.clearTimeout(openTimerRef.current);\n          if (isOpenDelayed) handleDelayedOpen(itemValue);\n          else handleOpen(itemValue);\n        }}\n        onTriggerLeave={() => {\n          window.clearTimeout(openTimerRef.current);\n          startCloseTimer();\n        }}\n        onContentEnter={() => window.clearTimeout(closeTimerRef.current)}\n        onContentLeave={startCloseTimer}\n        onItemSelect={(itemValue) => {\n          setValue((prevValue) => (prevValue === itemValue ? '' : itemValue));\n        }}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.nav\n          aria-label=\"Main\"\n          data-orientation={orientation}\n          dir={direction}\n          {...NavigationMenuProps}\n          ref={composedRef}\n        />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenu.displayName = NAVIGATION_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'NavigationMenuSub';\n\ntype NavigationMenuSubElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface NavigationMenuSubProps\n  extends Omit<NavigationMenuProviderProps, keyof NavigationMenuProviderPrivateProps>,\n    PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  orientation?: Orientation;\n}\n\nconst NavigationMenuSub = React.forwardRef<NavigationMenuSubElement, NavigationMenuSubProps>(\n  (props: ScopedProps<NavigationMenuSubProps>, forwardedRef) => {\n    const {\n      __scopeNavigationMenu,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = 'horizontal',\n      ...subProps\n    } = props;\n    const context = useNavigationMenuContext(SUB_NAME, __scopeNavigationMenu);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue ?? '',\n      caller: SUB_NAME,\n    });\n\n    return (\n      <NavigationMenuProvider\n        scope={__scopeNavigationMenu}\n        isRootMenu={false}\n        value={value}\n        dir={context.dir}\n        orientation={orientation}\n        rootNavigationMenu={context.rootNavigationMenu}\n        onTriggerEnter={(itemValue) => setValue(itemValue)}\n        onItemSelect={(itemValue) => setValue(itemValue)}\n        onItemDismiss={() => setValue('')}\n      >\n        <Primitive.div data-orientation={orientation} {...subProps} ref={forwardedRef} />\n      </NavigationMenuProvider>\n    );\n  }\n);\n\nNavigationMenuSub.displayName = SUB_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ninterface NavigationMenuProviderPrivateProps {\n  isRootMenu: boolean;\n  scope: Scope;\n  children: React.ReactNode;\n  orientation: Orientation;\n  dir: Direction;\n  rootNavigationMenu: NavigationMenuElement | null;\n  value: string;\n  onTriggerEnter(itemValue: string): void;\n  onTriggerLeave?(): void;\n  onContentEnter?(): void;\n  onContentLeave?(): void;\n  onItemSelect(itemValue: string): void;\n  onItemDismiss(): void;\n}\n\ninterface NavigationMenuProviderProps extends NavigationMenuProviderPrivateProps {}\n\nconst NavigationMenuProvider: React.FC<NavigationMenuProviderProps> = (\n  props: ScopedProps<NavigationMenuProviderProps>\n) => {\n  const {\n    scope,\n    isRootMenu,\n    rootNavigationMenu,\n    dir,\n    orientation,\n    children,\n    value,\n    onItemSelect,\n    onItemDismiss,\n    onTriggerEnter,\n    onTriggerLeave,\n    onContentEnter,\n    onContentLeave,\n  } = props;\n  const [viewport, setViewport] = React.useState<NavigationMenuViewportElement | null>(null);\n  const [viewportContent, setViewportContent] = React.useState<Map<string, ContentData>>(new Map());\n  const [indicatorTrack, setIndicatorTrack] = React.useState<HTMLDivElement | null>(null);\n\n  return (\n    <NavigationMenuProviderImpl\n      scope={scope}\n      isRootMenu={isRootMenu}\n      rootNavigationMenu={rootNavigationMenu}\n      value={value}\n      previousValue={usePrevious(value)}\n      baseId={useId()}\n      dir={dir}\n      orientation={orientation}\n      viewport={viewport}\n      onViewportChange={setViewport}\n      indicatorTrack={indicatorTrack}\n      onIndicatorTrackChange={setIndicatorTrack}\n      onTriggerEnter={useCallbackRef(onTriggerEnter)}\n      onTriggerLeave={useCallbackRef(onTriggerLeave)}\n      onContentEnter={useCallbackRef(onContentEnter)}\n      onContentLeave={useCallbackRef(onContentLeave)}\n      onItemSelect={useCallbackRef(onItemSelect)}\n      onItemDismiss={useCallbackRef(onItemDismiss)}\n      onViewportContentChange={React.useCallback((contentValue, contentData) => {\n        setViewportContent((prevContent) => {\n          prevContent.set(contentValue, contentData);\n          return new Map(prevContent);\n        });\n      }, [])}\n      onViewportContentRemove={React.useCallback((contentValue) => {\n        setViewportContent((prevContent) => {\n          if (!prevContent.has(contentValue)) return prevContent;\n          prevContent.delete(contentValue);\n          return new Map(prevContent);\n        });\n      }, [])}\n    >\n      <Collection.Provider scope={scope}>\n        <ViewportContentProvider scope={scope} items={viewportContent}>\n          {children}\n        </ViewportContentProvider>\n      </Collection.Provider>\n    </NavigationMenuProviderImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nconst LIST_NAME = 'NavigationMenuList';\n\ntype NavigationMenuListElement = React.ComponentRef<typeof Primitive.ul>;\ntype PrimitiveUnorderedListProps = React.ComponentPropsWithoutRef<typeof Primitive.ul>;\ninterface NavigationMenuListProps extends PrimitiveUnorderedListProps {}\n\nconst NavigationMenuList = React.forwardRef<NavigationMenuListElement, NavigationMenuListProps>(\n  (props: ScopedProps<NavigationMenuListProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...listProps } = props;\n    const context = useNavigationMenuContext(LIST_NAME, __scopeNavigationMenu);\n\n    const list = (\n      <Primitive.ul data-orientation={context.orientation} {...listProps} ref={forwardedRef} />\n    );\n\n    return (\n      <Primitive.div style={{ position: 'relative' }} ref={context.onIndicatorTrackChange}>\n        <Collection.Slot scope={__scopeNavigationMenu}>\n          {context.isRootMenu ? <FocusGroup asChild>{list}</FocusGroup> : list}\n        </Collection.Slot>\n      </Primitive.div>\n    );\n  }\n);\n\nNavigationMenuList.displayName = LIST_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'NavigationMenuItem';\n\ntype FocusProxyElement = React.ComponentRef<typeof VisuallyHiddenPrimitive.Root>;\n\ntype NavigationMenuItemContextValue = {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement | null>;\n  contentRef: React.RefObject<NavigationMenuContentElement | null>;\n  focusProxyRef: React.RefObject<FocusProxyElement | null>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onEntryKeyDown(): void;\n  onFocusProxyEnter(side: 'start' | 'end'): void;\n  onRootContentClose(): void;\n  onContentFocusOutside(): void;\n};\n\nconst [NavigationMenuItemContextProvider, useNavigationMenuItemContext] =\n  createNavigationMenuContext<NavigationMenuItemContextValue>(ITEM_NAME);\n\ntype NavigationMenuItemElement = React.ComponentRef<typeof Primitive.li>;\ntype PrimitiveListItemProps = React.ComponentPropsWithoutRef<typeof Primitive.li>;\ninterface NavigationMenuItemProps extends PrimitiveListItemProps {\n  value?: string;\n}\n\nconst NavigationMenuItem = React.forwardRef<NavigationMenuItemElement, NavigationMenuItemProps>(\n  (props: ScopedProps<NavigationMenuItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, value: valueProp, ...itemProps } = props;\n    const autoValue = useId();\n    // We need to provide an initial deterministic value as `useId` will return\n    // empty string on the first render and we don't want to match our internal \"closed\" value.\n    const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n    const contentRef = React.useRef<NavigationMenuContentElement>(null);\n    const triggerRef = React.useRef<NavigationMenuTriggerElement>(null);\n    const focusProxyRef = React.useRef<FocusProxyElement>(null);\n    const restoreContentTabOrderRef = React.useRef(() => {});\n    const wasEscapeCloseRef = React.useRef(false);\n\n    const handleContentEntry = React.useCallback((side = 'start') => {\n      if (contentRef.current) {\n        restoreContentTabOrderRef.current();\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) focusFirst(side === 'start' ? candidates : candidates.reverse());\n      }\n    }, []);\n\n    const handleContentExit = React.useCallback(() => {\n      if (contentRef.current) {\n        const candidates = getTabbableCandidates(contentRef.current);\n        if (candidates.length) restoreContentTabOrderRef.current = removeFromTabOrder(candidates);\n      }\n    }, []);\n\n    return (\n      <NavigationMenuItemContextProvider\n        scope={__scopeNavigationMenu}\n        value={value}\n        triggerRef={triggerRef}\n        contentRef={contentRef}\n        focusProxyRef={focusProxyRef}\n        wasEscapeCloseRef={wasEscapeCloseRef}\n        onEntryKeyDown={handleContentEntry}\n        onFocusProxyEnter={handleContentEntry}\n        onRootContentClose={handleContentExit}\n        onContentFocusOutside={handleContentExit}\n      >\n        <Primitive.li {...itemProps} ref={forwardedRef} />\n      </NavigationMenuItemContextProvider>\n    );\n  }\n);\n\nNavigationMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'NavigationMenuTrigger';\n\ntype NavigationMenuTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface NavigationMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst NavigationMenuTrigger = React.forwardRef<\n  NavigationMenuTriggerElement,\n  NavigationMenuTriggerProps\n>((props: ScopedProps<NavigationMenuTriggerProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, disabled, ...triggerProps } = props;\n  const context = useNavigationMenuContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(TRIGGER_NAME, props.__scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuTriggerElement>(null);\n  const composedRefs = useComposedRefs(ref, itemContext.triggerRef, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, itemContext.value);\n  const contentId = makeContentId(context.baseId, itemContext.value);\n  const hasPointerMoveOpenedRef = React.useRef(false);\n  const wasClickCloseRef = React.useRef(false);\n  const open = itemContext.value === context.value;\n\n  return (\n    <>\n      <Collection.ItemSlot scope={__scopeNavigationMenu} value={itemContext.value}>\n        <FocusGroupItem asChild>\n          <Primitive.button\n            id={triggerId}\n            disabled={disabled}\n            data-disabled={disabled ? '' : undefined}\n            data-state={getOpenState(open)}\n            aria-expanded={open}\n            aria-controls={contentId}\n            {...triggerProps}\n            ref={composedRefs}\n            onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n              wasClickCloseRef.current = false;\n              itemContext.wasEscapeCloseRef.current = false;\n            })}\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse(() => {\n                if (\n                  disabled ||\n                  wasClickCloseRef.current ||\n                  itemContext.wasEscapeCloseRef.current ||\n                  hasPointerMoveOpenedRef.current\n                )\n                  return;\n                context.onTriggerEnter(itemContext.value);\n                hasPointerMoveOpenedRef.current = true;\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse(() => {\n                if (disabled) return;\n                context.onTriggerLeave();\n                hasPointerMoveOpenedRef.current = false;\n              })\n            )}\n            onClick={composeEventHandlers(props.onClick, () => {\n              context.onItemSelect(itemContext.value);\n              wasClickCloseRef.current = open;\n            })}\n            onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n              const verticalEntryKey = context.dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n              const entryKey = { horizontal: 'ArrowDown', vertical: verticalEntryKey }[\n                context.orientation\n              ];\n              if (open && event.key === entryKey) {\n                itemContext.onEntryKeyDown();\n                // Prevent FocusGroupItem from handling the event\n                event.preventDefault();\n              }\n            })}\n          />\n        </FocusGroupItem>\n      </Collection.ItemSlot>\n\n      {/* Proxy tab order between trigger and content */}\n      {open && (\n        <>\n          <VisuallyHiddenPrimitive.Root\n            aria-hidden\n            tabIndex={0}\n            ref={itemContext.focusProxyRef}\n            onFocus={(event) => {\n              const content = itemContext.contentRef.current;\n              const prevFocusedElement = event.relatedTarget as HTMLElement | null;\n              const wasTriggerFocused = prevFocusedElement === ref.current;\n              const wasFocusFromContent = content?.contains(prevFocusedElement);\n\n              if (wasTriggerFocused || !wasFocusFromContent) {\n                itemContext.onFocusProxyEnter(wasTriggerFocused ? 'start' : 'end');\n              }\n            }}\n          />\n\n          {/* Restructure a11y tree to make content accessible to screen reader when using the viewport */}\n          {context.viewport && <span aria-owns={contentId} />}\n        </>\n      )}\n    </>\n  );\n});\n\nNavigationMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuLink\n * -----------------------------------------------------------------------------------------------*/\n\nconst LINK_NAME = 'NavigationMenuLink';\nconst LINK_SELECT = 'navigationMenu.linkSelect';\n\ntype NavigationMenuLinkElement = React.ComponentRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface NavigationMenuLinkProps extends Omit<PrimitiveLinkProps, 'onSelect'> {\n  active?: boolean;\n  onSelect?: (event: Event) => void;\n}\n\nconst NavigationMenuLink = React.forwardRef<NavigationMenuLinkElement, NavigationMenuLinkProps>(\n  (props: ScopedProps<NavigationMenuLinkProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, active, onSelect, ...linkProps } = props;\n\n    return (\n      <FocusGroupItem asChild>\n        <Primitive.a\n          data-active={active ? '' : undefined}\n          aria-current={active ? 'page' : undefined}\n          {...linkProps}\n          ref={forwardedRef}\n          onClick={composeEventHandlers(\n            props.onClick,\n            (event) => {\n              const target = event.target as HTMLElement;\n              const linkSelectEvent = new CustomEvent(LINK_SELECT, {\n                bubbles: true,\n                cancelable: true,\n              });\n              target.addEventListener(LINK_SELECT, (event) => onSelect?.(event), { once: true });\n              dispatchDiscreteCustomEvent(target, linkSelectEvent);\n\n              if (!linkSelectEvent.defaultPrevented && !event.metaKey) {\n                const rootContentDismissEvent = new CustomEvent(ROOT_CONTENT_DISMISS, {\n                  bubbles: true,\n                  cancelable: true,\n                });\n                dispatchDiscreteCustomEvent(target, rootContentDismissEvent);\n              }\n            },\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </FocusGroupItem>\n    );\n  }\n);\n\nNavigationMenuLink.displayName = LINK_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'NavigationMenuIndicator';\n\ntype NavigationMenuIndicatorElement = NavigationMenuIndicatorImplElement;\ninterface NavigationMenuIndicatorProps extends NavigationMenuIndicatorImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuIndicator = React.forwardRef<\n  NavigationMenuIndicatorElement,\n  NavigationMenuIndicatorProps\n>((props: ScopedProps<NavigationMenuIndicatorProps>, forwardedRef) => {\n  const { forceMount, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, props.__scopeNavigationMenu);\n  const isVisible = Boolean(context.value);\n\n  return context.indicatorTrack\n    ? ReactDOM.createPortal(\n        <Presence present={forceMount || isVisible}>\n          <NavigationMenuIndicatorImpl {...indicatorProps} ref={forwardedRef} />\n        </Presence>,\n        context.indicatorTrack\n      )\n    : null;\n});\n\nNavigationMenuIndicator.displayName = INDICATOR_NAME;\n\ntype NavigationMenuIndicatorImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface NavigationMenuIndicatorImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuIndicatorImpl = React.forwardRef<\n  NavigationMenuIndicatorImplElement,\n  NavigationMenuIndicatorImplProps\n>((props: ScopedProps<NavigationMenuIndicatorImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, ...indicatorProps } = props;\n  const context = useNavigationMenuContext(INDICATOR_NAME, __scopeNavigationMenu);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const [activeTrigger, setActiveTrigger] = React.useState<NavigationMenuTriggerElement | null>(\n    null\n  );\n  const [position, setPosition] = React.useState<{ size: number; offset: number } | null>(null);\n  const isHorizontal = context.orientation === 'horizontal';\n  const isVisible = Boolean(context.value);\n\n  React.useEffect(() => {\n    const items = getItems();\n    const triggerNode = items.find((item) => item.value === context.value)?.ref.current;\n    if (triggerNode) setActiveTrigger(triggerNode);\n  }, [getItems, context.value]);\n\n  /**\n   * Update position when the indicator or parent track size changes\n   */\n  const handlePositionChange = () => {\n    if (activeTrigger) {\n      setPosition({\n        size: isHorizontal ? activeTrigger.offsetWidth : activeTrigger.offsetHeight,\n        offset: isHorizontal ? activeTrigger.offsetLeft : activeTrigger.offsetTop,\n      });\n    }\n  };\n  useResizeObserver(activeTrigger, handlePositionChange);\n  useResizeObserver(context.indicatorTrack, handlePositionChange);\n\n  // We need to wait for the indicator position to be available before rendering to\n  // snap immediately into position rather than transitioning from initial\n  return position ? (\n    <Primitive.div\n      aria-hidden\n      data-state={isVisible ? 'visible' : 'hidden'}\n      data-orientation={context.orientation}\n      {...indicatorProps}\n      ref={forwardedRef}\n      style={{\n        position: 'absolute',\n        ...(isHorizontal\n          ? {\n              left: 0,\n              width: position.size + 'px',\n              transform: `translateX(${position.offset}px)`,\n            }\n          : {\n              top: 0,\n              height: position.size + 'px',\n              transform: `translateY(${position.offset}px)`,\n            }),\n        ...indicatorProps.style,\n      }}\n    />\n  ) : null;\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'NavigationMenuContent';\n\ntype NavigationMenuContentElement = NavigationMenuContentImplElement;\ninterface NavigationMenuContentProps\n  extends Omit<NavigationMenuContentImplProps, keyof NavigationMenuContentImplPrivateProps> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuContent = React.forwardRef<\n  NavigationMenuContentElement,\n  NavigationMenuContentProps\n>((props: ScopedProps<NavigationMenuContentProps>, forwardedRef) => {\n  const { forceMount, ...contentProps } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const itemContext = useNavigationMenuItemContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const composedRefs = useComposedRefs(itemContext.contentRef, forwardedRef);\n  const open = itemContext.value === context.value;\n\n  const commonProps = {\n    value: itemContext.value,\n    triggerRef: itemContext.triggerRef,\n    focusProxyRef: itemContext.focusProxyRef,\n    wasEscapeCloseRef: itemContext.wasEscapeCloseRef,\n    onContentFocusOutside: itemContext.onContentFocusOutside,\n    onRootContentClose: itemContext.onRootContentClose,\n    ...contentProps,\n  };\n\n  return !context.viewport ? (\n    <Presence present={forceMount || open}>\n      <NavigationMenuContentImpl\n        data-state={getOpenState(open)}\n        {...commonProps}\n        ref={composedRefs}\n        onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n        onPointerLeave={composeEventHandlers(\n          props.onPointerLeave,\n          whenMouse(context.onContentLeave)\n        )}\n        style={{\n          // Prevent interaction when animating out\n          pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n          ...commonProps.style,\n        }}\n      />\n    </Presence>\n  ) : (\n    <ViewportContentMounter forceMount={forceMount} {...commonProps} ref={composedRefs} />\n  );\n});\n\nNavigationMenuContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ViewportContentMounterElement = NavigationMenuContentImplElement;\ninterface ViewportContentMounterProps extends NavigationMenuContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst ViewportContentMounter = React.forwardRef<\n  ViewportContentMounterElement,\n  ViewportContentMounterProps\n>((props: ScopedProps<ViewportContentMounterProps>, forwardedRef) => {\n  const context = useNavigationMenuContext(CONTENT_NAME, props.__scopeNavigationMenu);\n  const { onViewportContentChange, onViewportContentRemove } = context;\n\n  useLayoutEffect(() => {\n    onViewportContentChange(props.value, {\n      ref: forwardedRef,\n      ...props,\n    });\n  }, [props, forwardedRef, onViewportContentChange]);\n\n  useLayoutEffect(() => {\n    return () => onViewportContentRemove(props.value);\n  }, [props.value, onViewportContentRemove]);\n\n  // Content is proxied into the viewport\n  return null;\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_CONTENT_DISMISS = 'navigationMenu.rootContentDismiss';\n\ntype MotionAttribute = 'to-start' | 'to-end' | 'from-start' | 'from-end';\ntype NavigationMenuContentImplElement = React.ComponentRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\n\ninterface NavigationMenuContentImplPrivateProps {\n  value: string;\n  triggerRef: React.RefObject<NavigationMenuTriggerElement | null>;\n  focusProxyRef: React.RefObject<FocusProxyElement | null>;\n  wasEscapeCloseRef: React.MutableRefObject<boolean>;\n  onContentFocusOutside(): void;\n  onRootContentClose(): void;\n}\ninterface NavigationMenuContentImplProps\n  extends Omit<DismissableLayerProps, 'onDismiss' | 'disableOutsidePointerEvents'>,\n    NavigationMenuContentImplPrivateProps {}\n\nconst NavigationMenuContentImpl = React.forwardRef<\n  NavigationMenuContentImplElement,\n  NavigationMenuContentImplProps\n>((props: ScopedProps<NavigationMenuContentImplProps>, forwardedRef) => {\n  const {\n    __scopeNavigationMenu,\n    value,\n    triggerRef,\n    focusProxyRef,\n    wasEscapeCloseRef,\n    onRootContentClose,\n    onContentFocusOutside,\n    ...contentProps\n  } = props;\n  const context = useNavigationMenuContext(CONTENT_NAME, __scopeNavigationMenu);\n  const ref = React.useRef<NavigationMenuContentImplElement>(null);\n  const composedRefs = useComposedRefs(ref, forwardedRef);\n  const triggerId = makeTriggerId(context.baseId, value);\n  const contentId = makeContentId(context.baseId, value);\n  const getItems = useCollection(__scopeNavigationMenu);\n  const prevMotionAttributeRef = React.useRef<MotionAttribute | null>(null);\n\n  const { onItemDismiss } = context;\n\n  React.useEffect(() => {\n    const content = ref.current;\n\n    // Bubble dismiss to the root content node and focus its trigger\n    if (context.isRootMenu && content) {\n      const handleClose = () => {\n        onItemDismiss();\n        onRootContentClose();\n        if (content.contains(document.activeElement)) triggerRef.current?.focus();\n      };\n      content.addEventListener(ROOT_CONTENT_DISMISS, handleClose);\n      return () => content.removeEventListener(ROOT_CONTENT_DISMISS, handleClose);\n    }\n  }, [context.isRootMenu, props.value, triggerRef, onItemDismiss, onRootContentClose]);\n\n  const motionAttribute = React.useMemo(() => {\n    const items = getItems();\n    const values = items.map((item) => item.value);\n    if (context.dir === 'rtl') values.reverse();\n    const index = values.indexOf(context.value);\n    const prevIndex = values.indexOf(context.previousValue);\n    const isSelected = value === context.value;\n    const wasSelected = prevIndex === values.indexOf(value);\n\n    // We only want to update selected and the last selected content\n    // this avoids animations being interrupted outside of that range\n    if (!isSelected && !wasSelected) return prevMotionAttributeRef.current;\n\n    const attribute = (() => {\n      // Don't provide a direction on the initial open\n      if (index !== prevIndex) {\n        // If we're moving to this item from another\n        if (isSelected && prevIndex !== -1) return index > prevIndex ? 'from-end' : 'from-start';\n        // If we're leaving this item for another\n        if (wasSelected && index !== -1) return index > prevIndex ? 'to-start' : 'to-end';\n      }\n      // Otherwise we're entering from closed or leaving the list\n      // entirely and should not animate in any direction\n      return null;\n    })();\n\n    prevMotionAttributeRef.current = attribute;\n    return attribute;\n  }, [context.previousValue, context.value, context.dir, getItems, value]);\n\n  return (\n    <FocusGroup asChild>\n      <DismissableLayer\n        id={contentId}\n        aria-labelledby={triggerId}\n        data-motion={motionAttribute}\n        data-orientation={context.orientation}\n        {...contentProps}\n        ref={composedRefs}\n        disableOutsidePointerEvents={false}\n        onDismiss={() => {\n          const rootContentDismissEvent = new Event(ROOT_CONTENT_DISMISS, {\n            bubbles: true,\n            cancelable: true,\n          });\n          ref.current?.dispatchEvent(rootContentDismissEvent);\n        }}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          onContentFocusOutside();\n          const target = event.target as HTMLElement;\n          // Only dismiss content when focus moves outside of the menu\n          if (context.rootNavigationMenu?.contains(target)) event.preventDefault();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          const isRootViewport = context.isRootMenu && context.viewport?.contains(target);\n          if (isTrigger || isRootViewport || !context.isRootMenu) event.preventDefault();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;\n          const isTabKey = event.key === 'Tab' && !isMetaKey;\n          if (isTabKey) {\n            const candidates = getTabbableCandidates(event.currentTarget);\n            const focusedElement = document.activeElement;\n            const index = candidates.findIndex((candidate) => candidate === focusedElement);\n            const isMovingBackwards = event.shiftKey;\n            const nextCandidates = isMovingBackwards\n              ? candidates.slice(0, index).reverse()\n              : candidates.slice(index + 1, candidates.length);\n\n            if (focusFirst(nextCandidates)) {\n              // prevent browser tab keydown because we've handled focus\n              event.preventDefault();\n            } else {\n              // If we can't focus that means we're at the edges\n              // so focus the proxy and let browser handle\n              // tab/shift+tab keypress on the proxy instead\n              focusProxyRef.current?.focus();\n            }\n          }\n        })}\n        onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (_event) => {\n          // prevent the dropdown from reopening\n          // after the escape key has been pressed\n          wasEscapeCloseRef.current = true;\n        })}\n      />\n    </FocusGroup>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * NavigationMenuViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'NavigationMenuViewport';\n\ntype NavigationMenuViewportElement = NavigationMenuViewportImplElement;\ninterface NavigationMenuViewportProps\n  extends Omit<NavigationMenuViewportImplProps, 'activeContentValue'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst NavigationMenuViewport = React.forwardRef<\n  NavigationMenuViewportElement,\n  NavigationMenuViewportProps\n>((props: ScopedProps<NavigationMenuViewportProps>, forwardedRef) => {\n  const { forceMount, ...viewportProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, props.__scopeNavigationMenu);\n  const open = Boolean(context.value);\n\n  return (\n    <Presence present={forceMount || open}>\n      <NavigationMenuViewportImpl {...viewportProps} ref={forwardedRef} />\n    </Presence>\n  );\n});\n\nNavigationMenuViewport.displayName = VIEWPORT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype NavigationMenuViewportImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface NavigationMenuViewportImplProps extends PrimitiveDivProps {}\n\nconst NavigationMenuViewportImpl = React.forwardRef<\n  NavigationMenuViewportImplElement,\n  NavigationMenuViewportImplProps\n>((props: ScopedProps<NavigationMenuViewportImplProps>, forwardedRef) => {\n  const { __scopeNavigationMenu, children, ...viewportImplProps } = props;\n  const context = useNavigationMenuContext(VIEWPORT_NAME, __scopeNavigationMenu);\n  const composedRefs = useComposedRefs(forwardedRef, context.onViewportChange);\n  const viewportContentContext = useViewportContentContext(\n    CONTENT_NAME,\n    props.__scopeNavigationMenu\n  );\n  const [size, setSize] = React.useState<{ width: number; height: number } | null>(null);\n  const [content, setContent] = React.useState<NavigationMenuContentElement | null>(null);\n  const viewportWidth = size ? size?.width + 'px' : undefined;\n  const viewportHeight = size ? size?.height + 'px' : undefined;\n  const open = Boolean(context.value);\n  // We persist the last active content value as the viewport may be animating out\n  // and we want the content to remain mounted for the lifecycle of the viewport.\n  const activeContentValue = open ? context.value : context.previousValue;\n\n  /**\n   * Update viewport size to match the active content node.\n   * We prefer offset dimensions over `getBoundingClientRect` as the latter respects CSS transform.\n   * For example, if content animates in from `scale(0.5)` the dimensions would be anything\n   * from `0.5` to `1` of the intended size.\n   */\n  const handleSizeChange = () => {\n    if (content) setSize({ width: content.offsetWidth, height: content.offsetHeight });\n  };\n  useResizeObserver(content, handleSizeChange);\n\n  return (\n    <Primitive.div\n      data-state={getOpenState(open)}\n      data-orientation={context.orientation}\n      {...viewportImplProps}\n      ref={composedRefs}\n      style={{\n        // Prevent interaction when animating out\n        pointerEvents: !open && context.isRootMenu ? 'none' : undefined,\n        ['--radix-navigation-menu-viewport-width' as any]: viewportWidth,\n        ['--radix-navigation-menu-viewport-height' as any]: viewportHeight,\n        ...viewportImplProps.style,\n      }}\n      onPointerEnter={composeEventHandlers(props.onPointerEnter, context.onContentEnter)}\n      onPointerLeave={composeEventHandlers(props.onPointerLeave, whenMouse(context.onContentLeave))}\n    >\n      {Array.from(viewportContentContext.items).map(([value, { ref, forceMount, ...props }]) => {\n        const isActive = activeContentValue === value;\n        return (\n          <Presence key={value} present={forceMount || isActive}>\n            <NavigationMenuContentImpl\n              {...props}\n              ref={composeRefs(ref, (node) => {\n                // We only want to update the stored node when another is available\n                // as we need to smoothly transition between them.\n                if (isActive && node) setContent(node);\n              })}\n            />\n          </Presence>\n        );\n      })}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst FOCUS_GROUP_NAME = 'FocusGroup';\n\ntype FocusGroupElement = React.ComponentRef<typeof Primitive.div>;\ninterface FocusGroupProps extends PrimitiveDivProps {}\n\nconst FocusGroup = React.forwardRef<FocusGroupElement, FocusGroupProps>(\n  (props: ScopedProps<FocusGroupProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const context = useNavigationMenuContext(FOCUS_GROUP_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.Provider scope={__scopeNavigationMenu}>\n        <FocusGroupCollection.Slot scope={__scopeNavigationMenu}>\n          <Primitive.div dir={context.dir} {...groupProps} ref={forwardedRef} />\n        </FocusGroupCollection.Slot>\n      </FocusGroupCollection.Provider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_KEYS = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown'];\nconst FOCUS_GROUP_ITEM_NAME = 'FocusGroupItem';\n\ntype FocusGroupItemElement = React.ComponentRef<typeof Primitive.button>;\ninterface FocusGroupItemProps extends PrimitiveButtonProps {}\n\nconst FocusGroupItem = React.forwardRef<FocusGroupItemElement, FocusGroupItemProps>(\n  (props: ScopedProps<FocusGroupItemProps>, forwardedRef) => {\n    const { __scopeNavigationMenu, ...groupProps } = props;\n    const getItems = useFocusGroupCollection(__scopeNavigationMenu);\n    const context = useNavigationMenuContext(FOCUS_GROUP_ITEM_NAME, __scopeNavigationMenu);\n\n    return (\n      <FocusGroupCollection.ItemSlot scope={__scopeNavigationMenu}>\n        <Primitive.button\n          {...groupProps}\n          ref={forwardedRef}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isFocusNavigationKey = ['Home', 'End', ...ARROW_KEYS].includes(event.key);\n            if (isFocusNavigationKey) {\n              let candidateNodes = getItems().map((item) => item.ref.current!);\n              const prevItemKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const prevKeys = [prevItemKey, 'ArrowUp', 'End'];\n              if (prevKeys.includes(event.key)) candidateNodes.reverse();\n              if (ARROW_KEYS.includes(event.key)) {\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = candidateNodes.slice(currentIndex + 1);\n              }\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n\n              // Prevent page scroll while navigating\n              event.preventDefault();\n            }\n          })}\n        />\n      </FocusGroupCollection.ItemSlot>\n    );\n  }\n);\n\n/**\n * Returns a list of potential tabbable candidates.\n *\n * NOTE: This is only a close approximation. For example it doesn't take into account cases like when\n * elements are not visible. This cannot be worked out easily by just reading a property, but rather\n * necessitate runtime knowledge (computed styles, etc). We deal with these cases separately.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n * Credit: https://github.com/discord/focus-layers/blob/master/src/util/wrapFocus.tsx#L1\n */\nfunction getTabbableCandidates(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden';\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  // we do not take into account the order of nodes with positive `tabIndex` as it\n  // hinders accessibility to have tab order different from visual order.\n  return nodes;\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const previouslyFocusedElement = document.activeElement;\n  return candidates.some((candidate) => {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === previouslyFocusedElement) return true;\n    candidate.focus();\n    return document.activeElement !== previouslyFocusedElement;\n  });\n}\n\nfunction removeFromTabOrder(candidates: HTMLElement[]) {\n  candidates.forEach((candidate) => {\n    candidate.dataset.tabindex = candidate.getAttribute('tabindex') || '';\n    candidate.setAttribute('tabindex', '-1');\n  });\n  return () => {\n    candidates.forEach((candidate) => {\n      const prevTabIndex = candidate.dataset.tabindex as string;\n      candidate.setAttribute('tabindex', prevTabIndex);\n    });\n  };\n}\n\nfunction useResizeObserver(element: HTMLElement | null, onResize: () => void) {\n  const handleResize = useCallbackRef(onResize);\n  useLayoutEffect(() => {\n    let rAF = 0;\n    if (element) {\n      /**\n       * Resize Observer will throw an often benign error that says `ResizeObserver loop\n       * completed with undelivered notifications`. This means that ResizeObserver was not\n       * able to deliver all observations within a single animation frame, so we use\n       * `requestAnimationFrame` to ensure we don't deliver unnecessary observations.\n       * Further reading: https://github.com/WICG/resize-observer/issues/38\n       */\n      const resizeObserver = new ResizeObserver(() => {\n        cancelAnimationFrame(rAF);\n        rAF = window.requestAnimationFrame(handleResize);\n      });\n      resizeObserver.observe(element);\n      return () => {\n        window.cancelAnimationFrame(rAF);\n        resizeObserver.unobserve(element);\n      };\n    }\n  }, [element, handleResize]);\n}\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction makeTriggerId(baseId: string, value: string) {\n  return `${baseId}-trigger-${value}`;\n}\n\nfunction makeContentId(baseId: string, value: string) {\n  return `${baseId}-content-${value}`;\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = NavigationMenu;\nconst Sub = NavigationMenuSub;\nconst List = NavigationMenuList;\nconst Item = NavigationMenuItem;\nconst Trigger = NavigationMenuTrigger;\nconst Link = NavigationMenuLink;\nconst Indicator = NavigationMenuIndicator;\nconst Content = NavigationMenuContent;\nconst Viewport = NavigationMenuViewport;\n\nexport {\n  createNavigationMenuScope,\n  //\n  NavigationMenu,\n  NavigationMenuSub,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuContent,\n  NavigationMenuViewport,\n  //\n  Root,\n  Sub,\n  List,\n  Item,\n  Trigger,\n  Link,\n  Indicator,\n  Content,\n  Viewport,\n};\nexport type {\n  NavigationMenuProps,\n  NavigationMenuSubProps,\n  NavigationMenuListProps,\n  NavigationMenuItemProps,\n  NavigationMenuTriggerProps,\n  NavigationMenuLinkProps,\n  NavigationMenuIndicatorProps,\n  NavigationMenuContentProps,\n  NavigationMenuViewportProps,\n};\n","import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROGRESS_NAME = 'Progress';\nconst DEFAULT_MAX = 100;\n\ntype ScopedProps<P> = P & { __scopeProgress?: Scope };\nconst [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\n\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\ntype ProgressContextValue = { value: number | null; max: number };\nconst [ProgressProvider, useProgressContext] =\n  createProgressContext<ProgressContextValue>(PROGRESS_NAME);\n\ntype ProgressElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ProgressProps extends PrimitiveDivProps {\n  value?: number | null | undefined;\n  max?: number;\n  getValueLabel?(value: number, max: number): string;\n}\n\nconst Progress = React.forwardRef<ProgressElement, ProgressProps>(\n  (props: ScopedProps<ProgressProps>, forwardedRef) => {\n    const {\n      __scopeProgress,\n      value: valueProp = null,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel,\n      ...progressProps\n    } = props;\n\n    if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {\n      console.error(getInvalidMaxError(`${maxProp}`, 'Progress'));\n    }\n\n    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n\n    if (valueProp !== null && !isValidValueNumber(valueProp, max)) {\n      console.error(getInvalidValueError(`${valueProp}`, 'Progress'));\n    }\n\n    const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = isNumber(value) ? getValueLabel(value, max) : undefined;\n\n    return (\n      <ProgressProvider scope={__scopeProgress} value={value} max={max}>\n        <Primitive.div\n          aria-valuemax={max}\n          aria-valuemin={0}\n          aria-valuenow={isNumber(value) ? value : undefined}\n          aria-valuetext={valueLabel}\n          role=\"progressbar\"\n          data-state={getProgressState(value, max)}\n          data-value={value ?? undefined}\n          data-max={max}\n          {...progressProps}\n          ref={forwardedRef}\n        />\n      </ProgressProvider>\n    );\n  }\n);\n\nProgress.displayName = PROGRESS_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ProgressIndicator';\n\ntype ProgressIndicatorElement = React.ComponentRef<typeof Primitive.div>;\ninterface ProgressIndicatorProps extends PrimitiveDivProps {}\n\nconst ProgressIndicator = React.forwardRef<ProgressIndicatorElement, ProgressIndicatorProps>(\n  (props: ScopedProps<ProgressIndicatorProps>, forwardedRef) => {\n    const { __scopeProgress, ...indicatorProps } = props;\n    const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n    return (\n      <Primitive.div\n        data-state={getProgressState(context.value, context.max)}\n        data-value={context.value ?? undefined}\n        data-max={context.max}\n        {...indicatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nProgressIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction defaultGetValueLabel(value: number, max: number) {\n  return `${Math.round((value / max) * 100)}%`;\n}\n\nfunction getProgressState(value: number | undefined | null, maxValue: number): ProgressState {\n  return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\n\nfunction isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nfunction isValidMaxNumber(max: any): max is number {\n  // prettier-ignore\n  return (\n    isNumber(max) &&\n    !isNaN(max) &&\n    max > 0\n  );\n}\n\nfunction isValidValueNumber(value: any, max: number): value is number {\n  // prettier-ignore\n  return (\n    isNumber(value) &&\n    !isNaN(value) &&\n    value <= max &&\n    value >= 0\n  );\n}\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidMaxError(propValue: string, componentName: string) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue: string, componentName: string) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` or \\`undefined\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nconst Root = Progress;\nconst Indicator = ProgressIndicator;\n\nexport {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { ProgressProps, ProgressIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Label as LabelPrimitive } from '@radix-ui/react-label';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P> = P & { __scopeForm?: Scope };\nconst [createFormContext, createFormScope] = createContextScope('Form');\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\nconst FORM_NAME = 'Form';\n\ntype ValidityMap = { [fieldName: string]: ValidityState | undefined };\ntype CustomMatcherEntriesMap = { [fieldName: string]: CustomMatcherEntry[] };\ntype CustomErrorsMap = { [fieldName: string]: Record<string, boolean> };\n\ntype ValidationContextValue = {\n  getFieldValidity(fieldName: string): ValidityState | undefined;\n  onFieldValidityChange(fieldName: string, validity: ValidityState): void;\n\n  getFieldCustomMatcherEntries(fieldName: string): CustomMatcherEntry[];\n  onFieldCustomMatcherEntryAdd(fieldName: string, matcherEntry: CustomMatcherEntry): void;\n  onFieldCustomMatcherEntryRemove(fieldName: string, matcherEntryId: string): void;\n\n  getFieldCustomErrors(fieldName: string): Record<string, boolean>;\n  onFieldCustomErrorsChange(fieldName: string, errors: Record<string, boolean>): void;\n\n  onFieldValiditionClear(fieldName: string): void;\n};\nconst [ValidationProvider, useValidationContext] =\n  createFormContext<ValidationContextValue>(FORM_NAME);\n\ntype MessageIdsMap = { [fieldName: string]: Set<string> };\n\ntype AriaDescriptionContextValue = {\n  onFieldMessageIdAdd(fieldName: string, id: string): void;\n  onFieldMessageIdRemove(fieldName: string, id: string): void;\n  getFieldDescription(fieldName: string): string | undefined;\n};\nconst [AriaDescriptionProvider, useAriaDescriptionContext] =\n  createFormContext<AriaDescriptionContextValue>(FORM_NAME);\n\ntype FormElement = React.ComponentRef<typeof Primitive.form>;\ntype PrimitiveFormProps = React.ComponentPropsWithoutRef<typeof Primitive.form>;\ninterface FormProps extends PrimitiveFormProps {\n  onClearServerErrors?(): void;\n}\n\nconst Form = React.forwardRef<FormElement, FormProps>(\n  (props: ScopedProps<FormProps>, forwardedRef) => {\n    const { __scopeForm, onClearServerErrors = () => {}, ...rootProps } = props;\n    const formRef = React.useRef<HTMLFormElement>(null);\n    const composedFormRef = useComposedRefs(forwardedRef, formRef);\n\n    // native validity per field\n    const [validityMap, setValidityMap] = React.useState<ValidityMap>({});\n    const getFieldValidity: ValidationContextValue['getFieldValidity'] = React.useCallback(\n      (fieldName) => validityMap[fieldName],\n      [validityMap]\n    );\n    const handleFieldValidityChange: ValidationContextValue['onFieldValidityChange'] =\n      React.useCallback(\n        (fieldName, validity) =>\n          setValidityMap((prevValidityMap) => ({\n            ...prevValidityMap,\n            [fieldName]: { ...(prevValidityMap[fieldName] ?? {}), ...validity },\n          })),\n        []\n      );\n    const handleFieldValiditionClear: ValidationContextValue['onFieldValiditionClear'] =\n      React.useCallback((fieldName) => {\n        setValidityMap((prevValidityMap) => ({ ...prevValidityMap, [fieldName]: undefined }));\n        setCustomErrorsMap((prevCustomErrorsMap) => ({ ...prevCustomErrorsMap, [fieldName]: {} }));\n      }, []);\n\n    // custom matcher entries per field\n    const [customMatcherEntriesMap, setCustomMatcherEntriesMap] =\n      React.useState<CustomMatcherEntriesMap>({});\n    const getFieldCustomMatcherEntries: ValidationContextValue['getFieldCustomMatcherEntries'] =\n      React.useCallback(\n        (fieldName) => customMatcherEntriesMap[fieldName] ?? [],\n        [customMatcherEntriesMap]\n      );\n    const handleFieldCustomMatcherAdd: ValidationContextValue['onFieldCustomMatcherEntryAdd'] =\n      React.useCallback((fieldName, matcherEntry) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: [...(prevCustomMatcherEntriesMap[fieldName] ?? []), matcherEntry],\n        }));\n      }, []);\n    const handleFieldCustomMatcherRemove: ValidationContextValue['onFieldCustomMatcherEntryRemove'] =\n      React.useCallback((fieldName, matcherEntryId) => {\n        setCustomMatcherEntriesMap((prevCustomMatcherEntriesMap) => ({\n          ...prevCustomMatcherEntriesMap,\n          [fieldName]: (prevCustomMatcherEntriesMap[fieldName] ?? []).filter(\n            (matcherEntry) => matcherEntry.id !== matcherEntryId\n          ),\n        }));\n      }, []);\n\n    // custom errors per field\n    const [customErrorsMap, setCustomErrorsMap] = React.useState<CustomErrorsMap>({});\n    const getFieldCustomErrors: ValidationContextValue['getFieldCustomErrors'] = React.useCallback(\n      (fieldName) => customErrorsMap[fieldName] ?? {},\n      [customErrorsMap]\n    );\n    const handleFieldCustomErrorsChange: ValidationContextValue['onFieldCustomErrorsChange'] =\n      React.useCallback((fieldName, customErrors) => {\n        setCustomErrorsMap((prevCustomErrorsMap) => ({\n          ...prevCustomErrorsMap,\n          [fieldName]: { ...(prevCustomErrorsMap[fieldName] ?? {}), ...customErrors },\n        }));\n      }, []);\n\n    // messageIds per field\n    const [messageIdsMap, setMessageIdsMap] = React.useState<MessageIdsMap>({});\n    const handleFieldMessageIdAdd: AriaDescriptionContextValue['onFieldMessageIdAdd'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]).add(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const handleFieldMessageIdRemove: AriaDescriptionContextValue['onFieldMessageIdRemove'] =\n      React.useCallback((fieldName, id) => {\n        setMessageIdsMap((prevMessageIdsMap) => {\n          const fieldDescriptionIds = new Set(prevMessageIdsMap[fieldName]);\n          fieldDescriptionIds.delete(id);\n          return { ...prevMessageIdsMap, [fieldName]: fieldDescriptionIds };\n        });\n      }, []);\n    const getFieldDescription: AriaDescriptionContextValue['getFieldDescription'] =\n      React.useCallback(\n        (fieldName) => Array.from(messageIdsMap[fieldName] ?? []).join(' ') || undefined,\n        [messageIdsMap]\n      );\n\n    return (\n      <ValidationProvider\n        scope={__scopeForm}\n        getFieldValidity={getFieldValidity}\n        onFieldValidityChange={handleFieldValidityChange}\n        getFieldCustomMatcherEntries={getFieldCustomMatcherEntries}\n        onFieldCustomMatcherEntryAdd={handleFieldCustomMatcherAdd}\n        onFieldCustomMatcherEntryRemove={handleFieldCustomMatcherRemove}\n        getFieldCustomErrors={getFieldCustomErrors}\n        onFieldCustomErrorsChange={handleFieldCustomErrorsChange}\n        onFieldValiditionClear={handleFieldValiditionClear}\n      >\n        <AriaDescriptionProvider\n          scope={__scopeForm}\n          onFieldMessageIdAdd={handleFieldMessageIdAdd}\n          onFieldMessageIdRemove={handleFieldMessageIdRemove}\n          getFieldDescription={getFieldDescription}\n        >\n          <Primitive.form\n            {...rootProps}\n            ref={composedFormRef}\n            // focus first invalid control when the form is submitted\n            onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n              const firstInvalidControl = getFirstInvalidControl(event.currentTarget);\n              if (firstInvalidControl === event.target) firstInvalidControl.focus();\n\n              // prevent default browser UI for form validation\n              event.preventDefault();\n            })}\n            // clear server errors when the form is re-submitted\n            onSubmit={composeEventHandlers(props.onSubmit, onClearServerErrors, {\n              checkForDefaultPrevented: false,\n            })}\n            // clear server errors when the form is reset\n            onReset={composeEventHandlers(props.onReset, onClearServerErrors)}\n          />\n        </AriaDescriptionProvider>\n      </ValidationProvider>\n    );\n  }\n);\n\nForm.displayName = FORM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormField\n * -----------------------------------------------------------------------------------------------*/\n\nconst FIELD_NAME = 'FormField';\n\ntype FormFieldContextValue = {\n  id: string;\n  name: string;\n  serverInvalid: boolean;\n};\nconst [FormFieldProvider, useFormFieldContext] =\n  createFormContext<FormFieldContextValue>(FIELD_NAME);\n\ntype FormFieldElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface FormFieldProps extends PrimitiveDivProps {\n  name: string;\n  serverInvalid?: boolean;\n}\n\nconst FormField = React.forwardRef<FormFieldElement, FormFieldProps>(\n  (props: ScopedProps<FormFieldProps>, forwardedRef) => {\n    const { __scopeForm, name, serverInvalid = false, ...fieldProps } = props;\n    const validationContext = useValidationContext(FIELD_NAME, __scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const id = useId();\n\n    return (\n      <FormFieldProvider scope={__scopeForm} id={id} name={name} serverInvalid={serverInvalid}>\n        <Primitive.div\n          data-valid={getValidAttribute(validity, serverInvalid)}\n          data-invalid={getInvalidAttribute(validity, serverInvalid)}\n          {...fieldProps}\n          ref={forwardedRef}\n        />\n      </FormFieldProvider>\n    );\n  }\n);\n\nFormField.displayName = FIELD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'FormLabel';\n\ntype FormLabelElement = React.ComponentRef<typeof LabelPrimitive>;\ntype LabelProps = React.ComponentPropsWithoutRef<typeof LabelPrimitive>;\ninterface FormLabelProps extends LabelProps {}\n\nconst FormLabel = React.forwardRef<FormLabelElement, FormLabelProps>(\n  (props: ScopedProps<FormLabelProps>, forwardedRef) => {\n    const { __scopeForm, ...labelProps } = props;\n    const validationContext = useValidationContext(LABEL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(LABEL_NAME, __scopeForm);\n    const htmlFor = labelProps.htmlFor || fieldContext.id;\n    const validity = validationContext.getFieldValidity(fieldContext.name);\n\n    return (\n      <LabelPrimitive\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        {...labelProps}\n        ref={forwardedRef}\n        htmlFor={htmlFor}\n      />\n    );\n  }\n);\n\nFormLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormControl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTROL_NAME = 'FormControl';\n\ntype FormControlElement = React.ComponentRef<typeof Primitive.input>;\ntype PrimitiveInputProps = React.ComponentPropsWithoutRef<typeof Primitive.input>;\ninterface FormControlProps extends PrimitiveInputProps {}\n\nconst FormControl = React.forwardRef<FormControlElement, FormControlProps>(\n  (props: ScopedProps<FormControlProps>, forwardedRef) => {\n    const { __scopeForm, ...controlProps } = props;\n\n    const validationContext = useValidationContext(CONTROL_NAME, __scopeForm);\n    const fieldContext = useFormFieldContext(CONTROL_NAME, __scopeForm);\n    const ariaDescriptionContext = useAriaDescriptionContext(CONTROL_NAME, __scopeForm);\n\n    const ref = React.useRef<FormControlElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const name = controlProps.name || fieldContext.name;\n    const id = controlProps.id || fieldContext.id;\n    const customMatcherEntries = validationContext.getFieldCustomMatcherEntries(name);\n\n    const { onFieldValidityChange, onFieldCustomErrorsChange, onFieldValiditionClear } =\n      validationContext;\n    const updateControlValidity = React.useCallback(\n      async (control: FormControlElement) => {\n        //------------------------------------------------------------------------------------------\n        // 1. first, if we have built-in errors we stop here\n\n        if (hasBuiltInError(control.validity)) {\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          return;\n        }\n\n        //------------------------------------------------------------------------------------------\n        // 2. then gather the form data to give to custom matchers for cross-comparisons\n\n        const formData = control.form ? new FormData(control.form) : new FormData();\n        const matcherArgs: CustomMatcherArgs = [control.value, formData];\n\n        //------------------------------------------------------------------------------------------\n        // 3. split sync and async custom matcher entries\n\n        const syncCustomMatcherEntries: Array<SyncCustomMatcherEntry> = [];\n        const ayncCustomMatcherEntries: Array<AsyncCustomMatcherEntry> = [];\n        customMatcherEntries.forEach((customMatcherEntry) => {\n          if (isAsyncCustomMatcherEntry(customMatcherEntry, matcherArgs)) {\n            ayncCustomMatcherEntries.push(customMatcherEntry);\n          } else if (isSyncCustomMatcherEntry(customMatcherEntry)) {\n            syncCustomMatcherEntries.push(customMatcherEntry);\n          }\n        });\n\n        //------------------------------------------------------------------------------------------\n        // 4. run sync custom matchers and update control validity / internal validity + errors\n\n        const syncCustomErrors = syncCustomMatcherEntries.map(({ id, match }) => {\n          return [id, match(...matcherArgs)] as const;\n        });\n        const syncCustomErrorsById = Object.fromEntries(syncCustomErrors);\n        const hasSyncCustomErrors = Object.values(syncCustomErrorsById).some(Boolean);\n        const hasCustomError = hasSyncCustomErrors;\n        control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n        const controlValidity = validityStateToObject(control.validity);\n        onFieldValidityChange(name, controlValidity);\n        onFieldCustomErrorsChange(name, syncCustomErrorsById);\n\n        //------------------------------------------------------------------------------------------\n        // 5. run async custom matchers and update control validity / internal validity + errors\n\n        if (!hasSyncCustomErrors && ayncCustomMatcherEntries.length > 0) {\n          const promisedCustomErrors = ayncCustomMatcherEntries.map(({ id, match }) =>\n            match(...matcherArgs).then((matches) => [id, matches] as const)\n          );\n          const asyncCustomErrors = await Promise.all(promisedCustomErrors);\n          const asyncCustomErrorsById = Object.fromEntries(asyncCustomErrors);\n          const hasAsyncCustomErrors = Object.values(asyncCustomErrorsById).some(Boolean);\n          const hasCustomError = hasAsyncCustomErrors;\n          control.setCustomValidity(hasCustomError ? DEFAULT_INVALID_MESSAGE : '');\n          const controlValidity = validityStateToObject(control.validity);\n          onFieldValidityChange(name, controlValidity);\n          onFieldCustomErrorsChange(name, asyncCustomErrorsById);\n        }\n      },\n      [customMatcherEntries, name, onFieldCustomErrorsChange, onFieldValidityChange]\n    );\n\n    React.useEffect(() => {\n      const control = ref.current;\n      if (control) {\n        // We only want validate on change (native `change` event, not React's `onChange`). This is primarily\n        // a UX decision, we don't want to validate on every keystroke and React's `onChange` is the `input` event.\n        const handleChange = () => updateControlValidity(control);\n        control.addEventListener('change', handleChange);\n        return () => control.removeEventListener('change', handleChange);\n      }\n    }, [updateControlValidity]);\n\n    const resetControlValidity = React.useCallback(() => {\n      const control = ref.current;\n      if (control) {\n        control.setCustomValidity('');\n        onFieldValiditionClear(name);\n      }\n    }, [name, onFieldValiditionClear]);\n\n    // reset validity and errors when the form is reset\n    React.useEffect(() => {\n      const form = ref.current?.form;\n      if (form) {\n        form.addEventListener('reset', resetControlValidity);\n        return () => form.removeEventListener('reset', resetControlValidity);\n      }\n    }, [resetControlValidity]);\n\n    // focus first invalid control when fields are set as invalid by server\n    React.useEffect(() => {\n      const control = ref.current;\n      const form = control?.closest('form');\n      if (form && fieldContext.serverInvalid) {\n        const firstInvalidControl = getFirstInvalidControl(form);\n        if (firstInvalidControl === control) firstInvalidControl.focus();\n      }\n    }, [fieldContext.serverInvalid]);\n\n    const validity = validationContext.getFieldValidity(name);\n\n    return (\n      <Primitive.input\n        data-valid={getValidAttribute(validity, fieldContext.serverInvalid)}\n        data-invalid={getInvalidAttribute(validity, fieldContext.serverInvalid)}\n        aria-invalid={fieldContext.serverInvalid ? true : undefined}\n        aria-describedby={ariaDescriptionContext.getFieldDescription(name)}\n        // disable default browser behaviour of showing built-in error message on hover\n        title=\"\"\n        {...controlProps}\n        ref={composedRef}\n        id={id}\n        name={name}\n        onInvalid={composeEventHandlers(props.onInvalid, (event) => {\n          const control = event.currentTarget;\n          updateControlValidity(control);\n        })}\n        onChange={composeEventHandlers(props.onChange, (_event) => {\n          // reset validity when user changes value\n          resetControlValidity();\n        })}\n      />\n    );\n  }\n);\n\nFormControl.displayName = CONTROL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormMessage\n * -----------------------------------------------------------------------------------------------*/\n\nconst _validityMatchers = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'stepMismatch',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valid',\n  'valueMissing',\n] as const;\ntype ValidityMatcher = (typeof _validityMatchers)[number];\n\nconst DEFAULT_INVALID_MESSAGE = 'This value is not valid';\nconst DEFAULT_BUILT_IN_MESSAGES: Record<ValidityMatcher, string | undefined> = {\n  badInput: DEFAULT_INVALID_MESSAGE,\n  patternMismatch: 'This value does not match the required pattern',\n  rangeOverflow: 'This value is too large',\n  rangeUnderflow: 'This value is too small',\n  stepMismatch: 'This value does not match the required step',\n  tooLong: 'This value is too long',\n  tooShort: 'This value is too short',\n  typeMismatch: 'This value does not match the required type',\n  valid: undefined,\n  valueMissing: 'This value is missing',\n};\n\nconst MESSAGE_NAME = 'FormMessage';\n\ntype FormMessageElement = FormMessageImplElement;\ninterface FormMessageProps extends Omit<FormMessageImplProps, 'name'> {\n  match?: ValidityMatcher | CustomMatcher;\n  forceMatch?: boolean;\n  name?: string;\n}\n\nconst FormMessage = React.forwardRef<FormMessageElement, FormMessageProps>(\n  (props: ScopedProps<FormMessageProps>, forwardedRef) => {\n    const { match, name: nameProp, ...messageProps } = props;\n    const fieldContext = useFormFieldContext(MESSAGE_NAME, props.__scopeForm);\n    const name = nameProp ?? fieldContext.name;\n\n    if (match === undefined) {\n      return (\n        <FormMessageImpl {...messageProps} ref={forwardedRef} name={name}>\n          {props.children || DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    } else if (typeof match === 'function') {\n      return <FormCustomMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    } else {\n      return <FormBuiltInMessage match={match} {...messageProps} ref={forwardedRef} name={name} />;\n    }\n  }\n);\n\nFormMessage.displayName = MESSAGE_NAME;\n\ntype FormBuiltInMessageElement = FormMessageImplElement;\ninterface FormBuiltInMessageProps extends FormMessageImplProps {\n  match: ValidityMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormBuiltInMessage = React.forwardRef<FormBuiltInMessageElement, FormBuiltInMessageProps>(\n  (props: ScopedProps<FormBuiltInMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const validity = validationContext.getFieldValidity(name);\n    const matches = forceMatch || validity?.[match];\n\n    if (matches) {\n      return (\n        <FormMessageImpl ref={forwardedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_BUILT_IN_MESSAGES[match]}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormCustomMessageElement = React.ComponentRef<typeof FormMessageImpl>;\ninterface FormCustomMessageProps extends React.ComponentPropsWithoutRef<typeof FormMessageImpl> {\n  match: CustomMatcher;\n  forceMatch?: boolean;\n  name: string;\n}\n\nconst FormCustomMessage = React.forwardRef<FormCustomMessageElement, FormCustomMessageProps>(\n  (props: ScopedProps<FormCustomMessageProps>, forwardedRef) => {\n    const { match, forceMatch = false, name, id: idProp, children, ...messageProps } = props;\n    const validationContext = useValidationContext(MESSAGE_NAME, messageProps.__scopeForm);\n    const ref = React.useRef<FormCustomMessageElement>(null);\n    const composedRef = useComposedRefs(forwardedRef, ref);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const customMatcherEntry = React.useMemo(() => ({ id, match }), [id, match]);\n    const { onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove } = validationContext;\n    React.useEffect(() => {\n      onFieldCustomMatcherEntryAdd(name, customMatcherEntry);\n      return () => onFieldCustomMatcherEntryRemove(name, customMatcherEntry.id);\n    }, [customMatcherEntry, name, onFieldCustomMatcherEntryAdd, onFieldCustomMatcherEntryRemove]);\n\n    const validity = validationContext.getFieldValidity(name);\n    const customErrors = validationContext.getFieldCustomErrors(name);\n    const hasMatchingCustomError = customErrors[id];\n    const matches =\n      forceMatch || (validity && !hasBuiltInError(validity) && hasMatchingCustomError);\n\n    if (matches) {\n      return (\n        <FormMessageImpl id={id} ref={composedRef} {...messageProps} name={name}>\n          {children ?? DEFAULT_INVALID_MESSAGE}\n        </FormMessageImpl>\n      );\n    }\n\n    return null;\n  }\n);\n\ntype FormMessageImplElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface FormMessageImplProps extends PrimitiveSpanProps {\n  name: string;\n}\n\nconst FormMessageImpl = React.forwardRef<FormMessageImplElement, FormMessageImplProps>(\n  (props: ScopedProps<FormMessageImplProps>, forwardedRef) => {\n    const { __scopeForm, id: idProp, name, ...messageProps } = props;\n    const ariaDescriptionContext = useAriaDescriptionContext(MESSAGE_NAME, __scopeForm);\n    const _id = useId();\n    const id = idProp ?? _id;\n\n    const { onFieldMessageIdAdd, onFieldMessageIdRemove } = ariaDescriptionContext;\n    React.useEffect(() => {\n      onFieldMessageIdAdd(name, id);\n      return () => onFieldMessageIdRemove(name, id);\n    }, [name, id, onFieldMessageIdAdd, onFieldMessageIdRemove]);\n\n    return <Primitive.span id={id} {...messageProps} ref={forwardedRef} />;\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * FormValidityState\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALIDITY_STATE_NAME = 'FormValidityState';\n\ninterface FormValidityStateProps {\n  children(validity: ValidityState | undefined): React.ReactNode;\n  name?: string;\n}\n\nconst FormValidityState = (props: ScopedProps<FormValidityStateProps>) => {\n  const { __scopeForm, name: nameProp, children } = props;\n  const validationContext = useValidationContext(VALIDITY_STATE_NAME, __scopeForm);\n  const fieldContext = useFormFieldContext(VALIDITY_STATE_NAME, __scopeForm);\n  const name = nameProp ?? fieldContext.name;\n  const validity = validationContext.getFieldValidity(name);\n  return <>{children(validity)}</>;\n};\n\nFormValidityState.displayName = VALIDITY_STATE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * FormSubmit\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUBMIT_NAME = 'FormSubmit';\n\ntype FormSubmitElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface FormSubmitProps extends PrimitiveButtonProps {}\n\nconst FormSubmit = React.forwardRef<FormSubmitElement, FormSubmitProps>(\n  (props: ScopedProps<FormSubmitProps>, forwardedRef) => {\n    const { __scopeForm, ...submitProps } = props;\n    return <Primitive.button type=\"submit\" {...submitProps} ref={forwardedRef} />;\n  }\n);\n\nFormSubmit.displayName = SUBMIT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype ValidityStateKey = keyof ValidityState;\ntype SyncCustomMatcher = (value: string, formData: FormData) => boolean;\ntype AsyncCustomMatcher = (value: string, formData: FormData) => Promise<boolean>;\ntype CustomMatcher = SyncCustomMatcher | AsyncCustomMatcher;\ntype CustomMatcherEntry = { id: string; match: CustomMatcher };\ntype SyncCustomMatcherEntry = { id: string; match: SyncCustomMatcher };\ntype AsyncCustomMatcherEntry = { id: string; match: AsyncCustomMatcher };\ntype CustomMatcherArgs = [string, FormData];\n\nfunction validityStateToObject(validity: ValidityState) {\n  const object: any = {};\n  for (const key in validity) {\n    object[key] = validity[key as ValidityStateKey];\n  }\n  return object as Record<ValidityStateKey, boolean>;\n}\n\nfunction isHTMLElement(element: any): element is HTMLElement {\n  return element instanceof HTMLElement;\n}\n\nfunction isFormControl(element: any): element is { validity: ValidityState } {\n  return 'validity' in element;\n}\n\nfunction isInvalid(control: HTMLElement) {\n  return (\n    isFormControl(control) &&\n    (control.validity.valid === false || control.getAttribute('aria-invalid') === 'true')\n  );\n}\n\nfunction getFirstInvalidControl(form: HTMLFormElement): HTMLElement | undefined {\n  const elements = form.elements;\n  const [firstInvalidControl] = Array.from(elements).filter(isHTMLElement).filter(isInvalid);\n  return firstInvalidControl;\n}\n\nfunction isAsyncCustomMatcherEntry(\n  entry: CustomMatcherEntry,\n  args: CustomMatcherArgs\n): entry is AsyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'AsyncFunction' || returnsPromise(entry.match, args);\n}\n\nfunction isSyncCustomMatcherEntry(entry: CustomMatcherEntry): entry is SyncCustomMatcherEntry {\n  return entry.match.constructor.name === 'Function';\n}\n\nfunction returnsPromise(func: Function, args: Array<unknown>) {\n  return func(...args) instanceof Promise;\n}\n\nfunction hasBuiltInError(validity: ValidityState) {\n  let error = false;\n  for (const validityKey in validity) {\n    const key = validityKey as ValidityStateKey;\n    if (key !== 'valid' && key !== 'customError' && validity[key]) {\n      error = true;\n      break;\n    }\n  }\n  return error;\n}\n\nfunction getValidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === true && !serverInvalid) return true;\n  return undefined;\n}\nfunction getInvalidAttribute(validity: ValidityState | undefined, serverInvalid: boolean) {\n  if (validity?.valid === false || serverInvalid) return true;\n  return undefined;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Form;\nconst Field = FormField;\nconst Label = FormLabel;\nconst Control = FormControl;\nconst Message = FormMessage;\nconst ValidityState = FormValidityState;\nconst Submit = FormSubmit;\n\nexport {\n  createFormScope,\n  //\n  Form,\n  FormField,\n  FormLabel,\n  FormControl,\n  FormMessage,\n  FormValidityState,\n  FormSubmit,\n  //\n  Root,\n  Field,\n  Label,\n  Control,\n  Message,\n  ValidityState,\n  Submit,\n};\n\nexport type {\n  FormProps,\n  FormFieldProps,\n  FormLabelProps,\n  FormControlProps,\n  FormMessageProps,\n  FormValidityStateProps,\n  FormSubmitProps,\n};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCard\n * -----------------------------------------------------------------------------------------------*/\n\nlet originalBodyUserSelect: string;\n\nconst HOVERCARD_NAME = 'HoverCard';\n\ntype ScopedProps<P> = P & { __scopeHoverCard?: Scope };\nconst [createHoverCardContext, createHoverCardScope] = createContextScope(HOVERCARD_NAME, [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype HoverCardContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpen(): void;\n  onClose(): void;\n  onDismiss(): void;\n  hasSelectionRef: React.MutableRefObject<boolean>;\n  isPointerDownOnContentRef: React.MutableRefObject<boolean>;\n};\n\nconst [HoverCardProvider, useHoverCardContext] =\n  createHoverCardContext<HoverCardContextValue>(HOVERCARD_NAME);\n\ninterface HoverCardProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  openDelay?: number;\n  closeDelay?: number;\n}\n\nconst HoverCard: React.FC<HoverCardProps> = (props: ScopedProps<HoverCardProps>) => {\n  const {\n    __scopeHoverCard,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    openDelay = 700,\n    closeDelay = 300,\n  } = props;\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const openTimerRef = React.useRef(0);\n  const closeTimerRef = React.useRef(0);\n  const hasSelectionRef = React.useRef(false);\n  const isPointerDownOnContentRef = React.useRef(false);\n\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: HOVERCARD_NAME,\n  });\n\n  const handleOpen = React.useCallback(() => {\n    clearTimeout(closeTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => setOpen(true), openDelay);\n  }, [openDelay, setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    clearTimeout(openTimerRef.current);\n    if (!hasSelectionRef.current && !isPointerDownOnContentRef.current) {\n      closeTimerRef.current = window.setTimeout(() => setOpen(false), closeDelay);\n    }\n  }, [closeDelay, setOpen]);\n\n  const handleDismiss = React.useCallback(() => setOpen(false), [setOpen]);\n\n  // cleanup any queued state updates on unmount\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(openTimerRef.current);\n      clearTimeout(closeTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <HoverCardProvider\n      scope={__scopeHoverCard}\n      open={open}\n      onOpenChange={setOpen}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      onDismiss={handleDismiss}\n      hasSelectionRef={hasSelectionRef}\n      isPointerDownOnContentRef={isPointerDownOnContentRef}\n    >\n      <PopperPrimitive.Root {...popperScope}>{children}</PopperPrimitive.Root>\n    </HoverCardProvider>\n  );\n};\n\nHoverCard.displayName = HOVERCARD_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'HoverCardTrigger';\n\ntype HoverCardTriggerElement = React.ComponentRef<typeof Primitive.a>;\ntype PrimitiveLinkProps = React.ComponentPropsWithoutRef<typeof Primitive.a>;\ninterface HoverCardTriggerProps extends PrimitiveLinkProps {}\n\nconst HoverCardTrigger = React.forwardRef<HoverCardTriggerElement, HoverCardTriggerProps>(\n  (props: ScopedProps<HoverCardTriggerProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...triggerProps } = props;\n    const context = useHoverCardContext(TRIGGER_NAME, __scopeHoverCard);\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.a\n          data-state={context.open ? 'open' : 'closed'}\n          {...triggerProps}\n          ref={forwardedRef}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          onFocus={composeEventHandlers(props.onFocus, context.onOpen)}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // prevent focus event on touch devices\n          onTouchStart={composeEventHandlers(props.onTouchStart, (event) => event.preventDefault())}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nHoverCardTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'HoverCardPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createHoverCardContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface HoverCardPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardPortal: React.FC<HoverCardPortalProps> = (\n  props: ScopedProps<HoverCardPortalProps>\n) => {\n  const { __scopeHoverCard, forceMount, children, container } = props;\n  const context = useHoverCardContext(PORTAL_NAME, __scopeHoverCard);\n  return (\n    <PortalProvider scope={__scopeHoverCard} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nHoverCardPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'HoverCardContent';\n\ntype HoverCardContentElement = HoverCardContentImplElement;\ninterface HoverCardContentProps extends HoverCardContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst HoverCardContent = React.forwardRef<HoverCardContentElement, HoverCardContentProps>(\n  (props: ScopedProps<HoverCardContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeHoverCard);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useHoverCardContext(CONTENT_NAME, props.__scopeHoverCard);\n    return (\n      <Presence present={forceMount || context.open}>\n        <HoverCardContentImpl\n          data-state={context.open ? 'open' : 'closed'}\n          {...contentProps}\n          onPointerEnter={composeEventHandlers(props.onPointerEnter, excludeTouch(context.onOpen))}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, excludeTouch(context.onClose))}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nHoverCardContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype HoverCardContentImplElement = React.ComponentRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface HoverCardContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  /**\n   * Event handler called when the focus moves outside of the `HoverCard`.\n   * Can be prevented.\n   */\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  /**\n   * Event handler called when an interaction happens outside the `HoverCard`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n}\n\nconst HoverCardContentImpl = React.forwardRef<\n  HoverCardContentImplElement,\n  HoverCardContentImplProps\n>((props: ScopedProps<HoverCardContentImplProps>, forwardedRef) => {\n  const {\n    __scopeHoverCard,\n    onEscapeKeyDown,\n    onPointerDownOutside,\n    onFocusOutside,\n    onInteractOutside,\n    ...contentProps\n  } = props;\n  const context = useHoverCardContext(CONTENT_NAME, __scopeHoverCard);\n  const popperScope = usePopperScope(__scopeHoverCard);\n  const ref = React.useRef<HoverCardContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [containSelection, setContainSelection] = React.useState(false);\n\n  React.useEffect(() => {\n    if (containSelection) {\n      const body = document.body;\n\n      // Safari requires prefix\n      originalBodyUserSelect = body.style.userSelect || body.style.webkitUserSelect;\n\n      body.style.userSelect = 'none';\n      body.style.webkitUserSelect = 'none';\n      return () => {\n        body.style.userSelect = originalBodyUserSelect;\n        body.style.webkitUserSelect = originalBodyUserSelect;\n      };\n    }\n  }, [containSelection]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const handlePointerUp = () => {\n        setContainSelection(false);\n        context.isPointerDownOnContentRef.current = false;\n\n        // Delay a frame to ensure we always access the latest selection\n        setTimeout(() => {\n          const hasSelection = document.getSelection()?.toString() !== '';\n          if (hasSelection) context.hasSelectionRef.current = true;\n        });\n      };\n\n      document.addEventListener('pointerup', handlePointerUp);\n      return () => {\n        document.removeEventListener('pointerup', handlePointerUp);\n        context.hasSelectionRef.current = false;\n        context.isPointerDownOnContentRef.current = false;\n      };\n    }\n  }, [context.isPointerDownOnContentRef, context.hasSelectionRef]);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const tabbables = getTabbableNodes(ref.current);\n      tabbables.forEach((tabbable) => tabbable.setAttribute('tabindex', '-1'));\n    }\n  });\n\n  return (\n    <DismissableLayer\n      asChild\n      disableOutsidePointerEvents={false}\n      onInteractOutside={onInteractOutside}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onPointerDownOutside={onPointerDownOutside}\n      onFocusOutside={composeEventHandlers(onFocusOutside, (event) => {\n        event.preventDefault();\n      })}\n      onDismiss={context.onDismiss}\n    >\n      <PopperPrimitive.Content\n        {...popperScope}\n        {...contentProps}\n        onPointerDown={composeEventHandlers(contentProps.onPointerDown, (event) => {\n          // Contain selection to current layer\n          if (event.currentTarget.contains(event.target as HTMLElement)) {\n            setContainSelection(true);\n          }\n          context.hasSelectionRef.current = false;\n          context.isPointerDownOnContentRef.current = true;\n        })}\n        ref={composedRefs}\n        style={{\n          ...contentProps.style,\n          userSelect: containSelection ? 'text' : undefined,\n          // Safari requires prefix\n          WebkitUserSelect: containSelection ? 'text' : undefined,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-hover-card-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-hover-card-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-hover-card-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-hover-card-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-hover-card-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    </DismissableLayer>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * HoverCardArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'HoverCardArrow';\n\ntype HoverCardArrowElement = React.ComponentRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface HoverCardArrowProps extends PopperArrowProps {}\n\nconst HoverCardArrow = React.forwardRef<HoverCardArrowElement, HoverCardArrowProps>(\n  (props: ScopedProps<HoverCardArrowProps>, forwardedRef) => {\n    const { __scopeHoverCard, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeHoverCard);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nHoverCardArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction excludeTouch<E>(eventHandler: () => void) {\n  return (event: React.PointerEvent<E>) =>\n    event.pointerType === 'touch' ? undefined : eventHandler();\n}\n\n/**\n * Returns a list of nodes that can be in the tab sequence.\n * @see: https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker\n */\nfunction getTabbableNodes(container: HTMLElement) {\n  const nodes: HTMLElement[] = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node: any) => {\n      // `.tabIndex` is not the same as the `tabindex` attribute. It works on the\n      // runtime's understanding of tabbability, so this automatically accounts\n      // for any kind of element that could be tabbed to.\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    },\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement);\n  return nodes;\n}\n\nconst Root = HoverCard;\nconst Trigger = HoverCardTrigger;\nconst Portal = HoverCardPortal;\nconst Content = HoverCardContent;\nconst Arrow = HoverCardArrow;\n\nexport {\n  createHoverCardScope,\n  //\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n};\nexport type {\n  HoverCardProps,\n  HoverCardTriggerProps,\n  HoverCardPortalProps,\n  HoverCardContentProps,\n  HoverCardArrowProps,\n};\n","// src/use-is-hydrated.tsx\nimport { useSyncExternalStore } from \"use-sync-external-store/shim\";\nfunction useIsHydrated() {\n  return useSyncExternalStore(\n    subscribe,\n    () => true,\n    () => false\n  );\n}\nfunction subscribe() {\n  return () => {\n  };\n}\nexport {\n  useIsHydrated\n};\n//# sourceMappingURL=index.mjs.map\n","/**\n * @license React\n * use-sync-external-store-shim.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar React = require(\"react\");\nfunction is(x, y) {\n  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\nvar objectIs = \"function\" === typeof Object.is ? Object.is : is,\n  useState = React.useState,\n  useEffect = React.useEffect,\n  useLayoutEffect = React.useLayoutEffect,\n  useDebugValue = React.useDebugValue;\nfunction useSyncExternalStore$2(subscribe, getSnapshot) {\n  var value = getSnapshot(),\n    _useState = useState({ inst: { value: value, getSnapshot: getSnapshot } }),\n    inst = _useState[0].inst,\n    forceUpdate = _useState[1];\n  useLayoutEffect(\n    function () {\n      inst.value = value;\n      inst.getSnapshot = getSnapshot;\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n    },\n    [subscribe, value, getSnapshot]\n  );\n  useEffect(\n    function () {\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      return subscribe(function () {\n        checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      });\n    },\n    [subscribe]\n  );\n  useDebugValue(value);\n  return value;\n}\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  inst = inst.value;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(inst, nextValue);\n  } catch (error) {\n    return !0;\n  }\n}\nfunction useSyncExternalStore$1(subscribe, getSnapshot) {\n  return getSnapshot();\n}\nvar shim =\n  \"undefined\" === typeof window ||\n  \"undefined\" === typeof window.document ||\n  \"undefined\" === typeof window.document.createElement\n    ? useSyncExternalStore$1\n    : useSyncExternalStore$2;\nexports.useSyncExternalStore =\n  void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n","import * as React from 'react';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Menubar\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENUBAR_NAME = 'Menubar';\n\ntype ItemData = { value: string; disabled: boolean };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  MenubarTriggerElement,\n  ItemData\n>(MENUBAR_NAME);\n\ntype ScopedProps<P> = P & { __scopeMenubar?: Scope };\nconst [createMenubarContext, createMenubarScope] = createContextScope(MENUBAR_NAME, [\n  createCollectionScope,\n  createRovingFocusGroupScope,\n]);\n\nconst useMenuScope = createMenuScope();\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype MenubarContextValue = {\n  value: string;\n  dir: Direction;\n  loop: boolean;\n  onMenuOpen(value: string): void;\n  onMenuClose(): void;\n  onMenuToggle(value: string): void;\n};\n\nconst [MenubarContextProvider, useMenubarContext] =\n  createMenubarContext<MenubarContextValue>(MENUBAR_NAME);\n\ntype MenubarElement = React.ComponentRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface MenubarProps extends PrimitiveDivProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  loop?: RovingFocusGroupProps['loop'];\n  dir?: RovingFocusGroupProps['dir'];\n}\n\nconst Menubar = React.forwardRef<MenubarElement, MenubarProps>(\n  (props: ScopedProps<MenubarProps>, forwardedRef) => {\n    const {\n      __scopeMenubar,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      loop = true,\n      dir,\n      ...menubarProps\n    } = props;\n    const direction = useDirection(dir);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue ?? '',\n      caller: MENUBAR_NAME,\n    });\n\n    // We need to manage tab stop id manually as `RovingFocusGroup` updates the stop\n    // based on focus, and in some situations our triggers won't ever be given focus\n    // (e.g. click to open and then outside to close)\n    const [currentTabStopId, setCurrentTabStopId] = React.useState<string | null>(null);\n\n    return (\n      <MenubarContextProvider\n        scope={__scopeMenubar}\n        value={value}\n        onMenuOpen={React.useCallback(\n          (value) => {\n            setValue(value);\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        onMenuClose={React.useCallback(() => setValue(''), [setValue])}\n        onMenuToggle={React.useCallback(\n          (value) => {\n            setValue((prevValue) => (prevValue ? '' : value));\n            // `openMenuOpen` and `onMenuToggle` are called exclusively so we\n            // need to update the id in either case.\n            setCurrentTabStopId(value);\n          },\n          [setValue]\n        )}\n        dir={direction}\n        loop={loop}\n      >\n        <Collection.Provider scope={__scopeMenubar}>\n          <Collection.Slot scope={__scopeMenubar}>\n            <RovingFocusGroup.Root\n              asChild\n              {...rovingFocusGroupScope}\n              orientation=\"horizontal\"\n              loop={loop}\n              dir={direction}\n              currentTabStopId={currentTabStopId}\n              onCurrentTabStopIdChange={setCurrentTabStopId}\n            >\n              <Primitive.div role=\"menubar\" {...menubarProps} ref={forwardedRef} />\n            </RovingFocusGroup.Root>\n          </Collection.Slot>\n        </Collection.Provider>\n      </MenubarContextProvider>\n    );\n  }\n);\n\nMenubar.displayName = MENUBAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENU_NAME = 'MenubarMenu';\n\ntype MenubarMenuContextValue = {\n  value: string;\n  triggerId: string;\n  triggerRef: React.RefObject<MenubarTriggerElement | null>;\n  contentId: string;\n  wasKeyboardTriggerOpenRef: React.MutableRefObject<boolean>;\n};\n\nconst [MenubarMenuProvider, useMenubarMenuContext] =\n  createMenubarContext<MenubarMenuContextValue>(MENU_NAME);\n\ninterface MenubarMenuProps {\n  value?: string;\n  children?: React.ReactNode;\n}\n\nconst MenubarMenu = (props: ScopedProps<MenubarMenuProps>) => {\n  const { __scopeMenubar, value: valueProp, ...menuProps } = props;\n  const autoValue = useId();\n  // We need to provide an initial deterministic value as `useId` will return\n  // empty string on the first render and we don't want to match our internal \"closed\" value.\n  const value = valueProp || autoValue || 'LEGACY_REACT_AUTO_VALUE';\n  const context = useMenubarContext(MENU_NAME, __scopeMenubar);\n  const menuScope = useMenuScope(__scopeMenubar);\n  const triggerRef = React.useRef<MenubarTriggerElement>(null);\n  const wasKeyboardTriggerOpenRef = React.useRef(false);\n  const open = context.value === value;\n\n  React.useEffect(() => {\n    if (!open) wasKeyboardTriggerOpenRef.current = false;\n  }, [open]);\n\n  return (\n    <MenubarMenuProvider\n      scope={__scopeMenubar}\n      value={value}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      wasKeyboardTriggerOpenRef={wasKeyboardTriggerOpenRef}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        open={open}\n        onOpenChange={(open) => {\n          // Menu only calls `onOpenChange` when dismissing so we\n          // want to close our MenuBar based on the same events.\n          if (!open) context.onMenuClose();\n        }}\n        modal={false}\n        dir={context.dir}\n        {...menuProps}\n      />\n    </MenubarMenuProvider>\n  );\n};\n\nMenubarMenu.displayName = MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'MenubarTrigger';\n\ntype MenubarTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface MenubarTriggerProps extends PrimitiveButtonProps {}\n\nconst MenubarTrigger = React.forwardRef<MenubarTriggerElement, MenubarTriggerProps>(\n  (props: ScopedProps<MenubarTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, disabled = false, ...triggerProps } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenubar);\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(TRIGGER_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(TRIGGER_NAME, __scopeMenubar);\n    const ref = React.useRef<MenubarTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, menuContext.triggerRef);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const open = context.value === menuContext.value;\n\n    return (\n      <Collection.ItemSlot scope={__scopeMenubar} value={menuContext.value} disabled={disabled}>\n        <RovingFocusGroup.Item\n          asChild\n          {...rovingFocusGroupScope}\n          focusable={!disabled}\n          tabStopId={menuContext.value}\n        >\n          <MenuPrimitive.Anchor asChild {...menuScope}>\n            <Primitive.button\n              type=\"button\"\n              role=\"menuitem\"\n              id={menuContext.triggerId}\n              aria-haspopup=\"menu\"\n              aria-expanded={open}\n              aria-controls={open ? menuContext.contentId : undefined}\n              data-highlighted={isFocused ? '' : undefined}\n              data-state={open ? 'open' : 'closed'}\n              data-disabled={disabled ? '' : undefined}\n              disabled={disabled}\n              {...triggerProps}\n              ref={composedRefs}\n              onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n                // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n                // but not when the control key is pressed (avoiding MacOS right click)\n                if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                  context.onMenuOpen(menuContext.value);\n                  // prevent trigger focusing when opening\n                  // this allows the content to be given focus without competition\n                  if (!open) event.preventDefault();\n                }\n              })}\n              onPointerEnter={composeEventHandlers(props.onPointerEnter, () => {\n                const menubarOpen = Boolean(context.value);\n                if (menubarOpen && !open) {\n                  context.onMenuOpen(menuContext.value);\n                  ref.current?.focus();\n                }\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                if (disabled) return;\n                if (['Enter', ' '].includes(event.key)) context.onMenuToggle(menuContext.value);\n                if (event.key === 'ArrowDown') context.onMenuOpen(menuContext.value);\n                // prevent keydown from scrolling window / first focused item to execute\n                // that keydown (inadvertently closing the menu)\n                if (['Enter', ' ', 'ArrowDown'].includes(event.key)) {\n                  menuContext.wasKeyboardTriggerOpenRef.current = true;\n                  event.preventDefault();\n                }\n              })}\n              onFocus={composeEventHandlers(props.onFocus, () => setIsFocused(true))}\n              onBlur={composeEventHandlers(props.onBlur, () => setIsFocused(false))}\n            />\n          </MenuPrimitive.Anchor>\n        </RovingFocusGroup.Item>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nMenubarTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'MenubarPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface MenubarPortalProps extends MenuPortalProps {}\n\nconst MenubarPortal: React.FC<MenubarPortalProps> = (props: ScopedProps<MenubarPortalProps>) => {\n  const { __scopeMenubar, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nMenubarPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'MenubarContent';\n\ntype MenubarContentElement = React.ComponentRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface MenubarContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst MenubarContent = React.forwardRef<MenubarContentElement, MenubarContentProps>(\n  (props: ScopedProps<MenubarContentProps>, forwardedRef) => {\n    const { __scopeMenubar, align = 'start', ...contentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    const context = useMenubarContext(CONTENT_NAME, __scopeMenubar);\n    const menuContext = useMenubarMenuContext(CONTENT_NAME, __scopeMenubar);\n    const getItems = useCollection(__scopeMenubar);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        id={menuContext.contentId}\n        aria-labelledby={menuContext.triggerId}\n        data-radix-menubar-content=\"\"\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        align={align}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          const menubarOpen = Boolean(context.value);\n          if (!menubarOpen && !hasInteractedOutsideRef.current) {\n            menuContext.triggerRef.current?.focus();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n          const target = event.target as HTMLElement;\n          const isMenubarTrigger = getItems().some((item) => item.ref.current?.contains(target));\n          if (isMenubarTrigger) event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, () => {\n          hasInteractedOutsideRef.current = true;\n        })}\n        onEntryFocus={(event) => {\n          if (!menuContext.wasKeyboardTriggerOpenRef.current) event.preventDefault();\n        }}\n        onKeyDown={composeEventHandlers(\n          props.onKeyDown,\n          (event) => {\n            if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {\n              const target = event.target as HTMLElement;\n              const targetIsSubTrigger = target.hasAttribute('data-radix-menubar-subtrigger');\n              const isKeyDownInsideSubMenu =\n                target.closest('[data-radix-menubar-content]') !== event.currentTarget;\n\n              const prevMenuKey = context.dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n              const isPrevKey = prevMenuKey === event.key;\n              const isNextKey = !isPrevKey;\n\n              // Prevent navigation when we're opening a submenu\n              if (isNextKey && targetIsSubTrigger) return;\n              // or we're inside a submenu and are moving backwards to close it\n              if (isKeyDownInsideSubMenu && isPrevKey) return;\n\n              const items = getItems().filter((item) => !item.disabled);\n              let candidateValues = items.map((item) => item.value);\n              if (isPrevKey) candidateValues.reverse();\n\n              const currentIndex = candidateValues.indexOf(menuContext.value);\n\n              candidateValues = context.loop\n                ? wrapArray(candidateValues, currentIndex + 1)\n                : candidateValues.slice(currentIndex + 1);\n\n              const [nextValue] = candidateValues;\n              if (nextValue) context.onMenuOpen(nextValue);\n            }\n          },\n          { checkForDefaultPrevented: false }\n        )}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'MenubarGroup';\n\ntype MenubarGroupElement = React.ComponentRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface MenubarGroupProps extends MenuGroupProps {}\n\nconst MenubarGroup = React.forwardRef<MenubarGroupElement, MenubarGroupProps>(\n  (props: ScopedProps<MenubarGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'MenubarLabel';\n\ntype MenubarLabelElement = React.ComponentRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface MenubarLabelProps extends MenuLabelProps {}\n\nconst MenubarLabel = React.forwardRef<MenubarLabelElement, MenubarLabelProps>(\n  (props: ScopedProps<MenubarLabelProps>, forwardedRef) => {\n    const { __scopeMenubar, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'MenubarItem';\n\ntype MenubarItemElement = React.ComponentRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface MenubarItemProps extends MenuItemProps {}\n\nconst MenubarItem = React.forwardRef<MenubarItemElement, MenubarItemProps>(\n  (props: ScopedProps<MenubarItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'MenubarCheckboxItem';\n\ntype MenubarCheckboxItemElement = React.ComponentRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface MenubarCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst MenubarCheckboxItem = React.forwardRef<MenubarCheckboxItemElement, MenubarCheckboxItemProps>(\n  (props: ScopedProps<MenubarCheckboxItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...checkboxItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'MenubarRadioGroup';\n\ntype MenubarRadioGroupElement = React.ComponentRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface MenubarRadioGroupProps extends MenuRadioGroupProps {}\n\nconst MenubarRadioGroup = React.forwardRef<MenubarRadioGroupElement, MenubarRadioGroupProps>(\n  (props: ScopedProps<MenubarRadioGroupProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioGroupProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'MenubarRadioItem';\n\ntype MenubarRadioItemElement = React.ComponentRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface MenubarRadioItemProps extends MenuRadioItemProps {}\n\nconst MenubarRadioItem = React.forwardRef<MenubarRadioItemElement, MenubarRadioItemProps>(\n  (props: ScopedProps<MenubarRadioItemProps>, forwardedRef) => {\n    const { __scopeMenubar, ...radioItemProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'MenubarItemIndicator';\n\ntype MenubarItemIndicatorElement = React.ComponentRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface MenubarItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst MenubarItemIndicator = React.forwardRef<\n  MenubarItemIndicatorElement,\n  MenubarItemIndicatorProps\n>((props: ScopedProps<MenubarItemIndicatorProps>, forwardedRef) => {\n  const { __scopeMenubar, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nMenubarItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'MenubarSeparator';\n\ntype MenubarSeparatorElement = React.ComponentRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface MenubarSeparatorProps extends MenuSeparatorProps {}\n\nconst MenubarSeparator = React.forwardRef<MenubarSeparatorElement, MenubarSeparatorProps>(\n  (props: ScopedProps<MenubarSeparatorProps>, forwardedRef) => {\n    const { __scopeMenubar, ...separatorProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'MenubarArrow';\n\ntype MenubarArrowElement = React.ComponentRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface MenubarArrowProps extends MenuArrowProps {}\n\nconst MenubarArrow = React.forwardRef<MenubarArrowElement, MenubarArrowProps>(\n  (props: ScopedProps<MenubarArrowProps>, forwardedRef) => {\n    const { __scopeMenubar, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nMenubarArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'MenubarSub';\n\ninterface MenubarSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst MenubarSub: React.FC<MenubarSubProps> = (props: ScopedProps<MenubarSubProps>) => {\n  const { __scopeMenubar, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeMenubar);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: SUB_NAME,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\nMenubarSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'MenubarSubTrigger';\n\ntype MenubarSubTriggerElement = React.ComponentRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface MenubarSubTriggerProps extends MenuSubTriggerProps {}\n\nconst MenubarSubTrigger = React.forwardRef<MenubarSubTriggerElement, MenubarSubTriggerProps>(\n  (props: ScopedProps<MenubarSubTriggerProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subTriggerProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n    return (\n      <MenuPrimitive.SubTrigger\n        data-radix-menubar-subtrigger=\"\"\n        {...menuScope}\n        {...subTriggerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nMenubarSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenubarSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'MenubarSubContent';\n\ntype MenubarSubContentElement = React.ComponentRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface MenubarSubContentProps extends MenuSubContentProps {}\n\nconst MenubarSubContent = React.forwardRef<MenubarSubContentElement, MenubarSubContentProps>(\n  (props: ScopedProps<MenubarSubContentProps>, forwardedRef) => {\n    const { __scopeMenubar, ...subContentProps } = props;\n    const menuScope = useMenuScope(__scopeMenubar);\n\n    return (\n      <MenuPrimitive.SubContent\n        {...menuScope}\n        data-radix-menubar-content=\"\"\n        {...subContentProps}\n        ref={forwardedRef}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-menubar-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-menubar-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-menubar-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-menubar-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-menubar-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nMenubarSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map<T>((_, index) => array[(startIndex + index) % array.length]!);\n}\n\nconst Root = Menubar;\nconst Menu = MenubarMenu;\nconst Trigger = MenubarTrigger;\nconst Portal = MenubarPortal;\nconst Content = MenubarContent;\nconst Group = MenubarGroup;\nconst Label = MenubarLabel;\nconst Item = MenubarItem;\nconst CheckboxItem = MenubarCheckboxItem;\nconst RadioGroup = MenubarRadioGroup;\nconst RadioItem = MenubarRadioItem;\nconst ItemIndicator = MenubarItemIndicator;\nconst Separator = MenubarSeparator;\nconst Arrow = MenubarArrow;\nconst Sub = MenubarSub;\nconst SubTrigger = MenubarSubTrigger;\nconst SubContent = MenubarSubContent;\n\nexport {\n  createMenubarScope,\n  //\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarPortal,\n  MenubarContent,\n  MenubarGroup,\n  MenubarLabel,\n  MenubarItem,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarItemIndicator,\n  MenubarSeparator,\n  MenubarArrow,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n  //\n  Root,\n  Menu,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  MenubarProps,\n  MenubarMenuProps,\n  MenubarTriggerProps,\n  MenubarPortalProps,\n  MenubarContentProps,\n  MenubarGroupProps,\n  MenubarLabelProps,\n  MenubarItemProps,\n  MenubarCheckboxItemProps,\n  MenubarRadioGroupProps,\n  MenubarRadioItemProps,\n  MenubarItemIndicatorProps,\n  MenubarSeparatorProps,\n  MenubarArrowProps,\n  MenubarSubProps,\n  MenubarSubTriggerProps,\n  MenubarSubContentProps,\n};\n","import React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { createCollapsibleScope } from '@radix-ui/react-collapsible';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACCORDION_NAME = 'Accordion';\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nconst [Collection, useCollection, createCollectionScope] =\n  createCollection<AccordionTriggerElement>(ACCORDION_NAME);\n\ntype ScopedProps<P> = P & { __scopeAccordion?: Scope };\nconst [createAccordionContext, createAccordionScope] = createContextScope(ACCORDION_NAME, [\n  createCollectionScope,\n  createCollapsibleScope,\n]);\nconst useCollapsibleScope = createCollapsibleScope();\n\ntype AccordionElement = AccordionImplMultipleElement | AccordionImplSingleElement;\ninterface AccordionSingleProps extends AccordionImplSingleProps {\n  type: 'single';\n}\ninterface AccordionMultipleProps extends AccordionImplMultipleProps {\n  type: 'multiple';\n}\n\nconst Accordion = React.forwardRef<AccordionElement, AccordionSingleProps | AccordionMultipleProps>(\n  (props: ScopedProps<AccordionSingleProps | AccordionMultipleProps>, forwardedRef) => {\n    const { type, ...accordionProps } = props;\n    const singleProps = accordionProps as AccordionImplSingleProps;\n    const multipleProps = accordionProps as AccordionImplMultipleProps;\n    return (\n      <Collection.Provider scope={props.__scopeAccordion}>\n        {type === 'multiple' ? (\n          <AccordionImplMultiple {...multipleProps} ref={forwardedRef} />\n        ) : (\n          <AccordionImplSingle {...singleProps} ref={forwardedRef} />\n        )}\n      </Collection.Provider>\n    );\n  }\n);\n\nAccordion.displayName = ACCORDION_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionValueContextValue = {\n  value: string[];\n  onItemOpen(value: string): void;\n  onItemClose(value: string): void;\n};\n\nconst [AccordionValueProvider, useAccordionValueContext] =\n  createAccordionContext<AccordionValueContextValue>(ACCORDION_NAME);\n\nconst [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(\n  ACCORDION_NAME,\n  { collapsible: false }\n);\n\ntype AccordionImplSingleElement = AccordionImplElement;\ninterface AccordionImplSingleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion item whose content is expanded.\n   */\n  value?: string;\n  /**\n   * The value of the item whose content is expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string;\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string): void;\n  /**\n   * Whether an accordion item can be collapsed after it has been opened.\n   * @default false\n   */\n  collapsible?: boolean;\n}\n\nconst AccordionImplSingle = React.forwardRef<AccordionImplSingleElement, AccordionImplSingleProps>(\n  (props: ScopedProps<AccordionImplSingleProps>, forwardedRef) => {\n    const {\n      value: valueProp,\n      defaultValue,\n      onValueChange = () => {},\n      collapsible = false,\n      ...accordionSingleProps\n    } = props;\n\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue ?? '',\n      onChange: onValueChange,\n      caller: ACCORDION_NAME,\n    });\n\n    return (\n      <AccordionValueProvider\n        scope={props.__scopeAccordion}\n        value={React.useMemo(() => (value ? [value] : []), [value])}\n        onItemOpen={setValue}\n        onItemClose={React.useCallback(() => collapsible && setValue(''), [collapsible, setValue])}\n      >\n        <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={collapsible}>\n          <AccordionImpl {...accordionSingleProps} ref={forwardedRef} />\n        </AccordionCollapsibleProvider>\n      </AccordionValueProvider>\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplMultipleElement = AccordionImplElement;\ninterface AccordionImplMultipleProps extends AccordionImplProps {\n  /**\n   * The controlled stateful value of the accordion items whose contents are expanded.\n   */\n  value?: string[];\n  /**\n   * The value of the items whose contents are expanded when the accordion is initially rendered. Use\n   * `defaultValue` if you do not need to control the state of an accordion.\n   */\n  defaultValue?: string[];\n  /**\n   * The callback that fires when the state of the accordion changes.\n   */\n  onValueChange?(value: string[]): void;\n}\n\nconst AccordionImplMultiple = React.forwardRef<\n  AccordionImplMultipleElement,\n  AccordionImplMultipleProps\n>((props: ScopedProps<AccordionImplMultipleProps>, forwardedRef) => {\n  const {\n    value: valueProp,\n    defaultValue,\n    onValueChange = () => {},\n    ...accordionMultipleProps\n  } = props;\n\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue ?? [],\n    onChange: onValueChange,\n    caller: ACCORDION_NAME,\n  });\n\n  const handleItemOpen = React.useCallback(\n    (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n    [setValue]\n  );\n\n  const handleItemClose = React.useCallback(\n    (itemValue: string) =>\n      setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n    [setValue]\n  );\n\n  return (\n    <AccordionValueProvider\n      scope={props.__scopeAccordion}\n      value={value}\n      onItemOpen={handleItemOpen}\n      onItemClose={handleItemClose}\n    >\n      <AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}>\n        <AccordionImpl {...accordionMultipleProps} ref={forwardedRef} />\n      </AccordionCollapsibleProvider>\n    </AccordionValueProvider>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype AccordionImplContextValue = {\n  disabled?: boolean;\n  direction: AccordionImplProps['dir'];\n  orientation: AccordionImplProps['orientation'];\n};\n\nconst [AccordionImplProvider, useAccordionContext] =\n  createAccordionContext<AccordionImplContextValue>(ACCORDION_NAME);\n\ntype AccordionImplElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface AccordionImplProps extends PrimitiveDivProps {\n  /**\n   * Whether or not an accordion is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * The layout in which the Accordion operates.\n   * @default vertical\n   */\n  orientation?: React.AriaAttributes['aria-orientation'];\n  /**\n   * The language read direction.\n   */\n  dir?: Direction;\n}\n\nconst AccordionImpl = React.forwardRef<AccordionImplElement, AccordionImplProps>(\n  (props: ScopedProps<AccordionImplProps>, forwardedRef) => {\n    const { __scopeAccordion, disabled, dir, orientation = 'vertical', ...accordionProps } = props;\n    const accordionRef = React.useRef<AccordionImplElement>(null);\n    const composedRefs = useComposedRefs(accordionRef, forwardedRef);\n    const getItems = useCollection(__scopeAccordion);\n    const direction = useDirection(dir);\n    const isDirectionLTR = direction === 'ltr';\n\n    const handleKeyDown = composeEventHandlers(props.onKeyDown, (event) => {\n      if (!ACCORDION_KEYS.includes(event.key)) return;\n      const target = event.target as HTMLElement;\n      const triggerCollection = getItems().filter((item) => !item.ref.current?.disabled);\n      const triggerIndex = triggerCollection.findIndex((item) => item.ref.current === target);\n      const triggerCount = triggerCollection.length;\n\n      if (triggerIndex === -1) return;\n\n      // Prevents page scroll while user is navigating\n      event.preventDefault();\n\n      let nextIndex = triggerIndex;\n      const homeIndex = 0;\n      const endIndex = triggerCount - 1;\n\n      const moveNext = () => {\n        nextIndex = triggerIndex + 1;\n        if (nextIndex > endIndex) {\n          nextIndex = homeIndex;\n        }\n      };\n\n      const movePrev = () => {\n        nextIndex = triggerIndex - 1;\n        if (nextIndex < homeIndex) {\n          nextIndex = endIndex;\n        }\n      };\n\n      switch (event.key) {\n        case 'Home':\n          nextIndex = homeIndex;\n          break;\n        case 'End':\n          nextIndex = endIndex;\n          break;\n        case 'ArrowRight':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              moveNext();\n            } else {\n              movePrev();\n            }\n          }\n          break;\n        case 'ArrowDown':\n          if (orientation === 'vertical') {\n            moveNext();\n          }\n          break;\n        case 'ArrowLeft':\n          if (orientation === 'horizontal') {\n            if (isDirectionLTR) {\n              movePrev();\n            } else {\n              moveNext();\n            }\n          }\n          break;\n        case 'ArrowUp':\n          if (orientation === 'vertical') {\n            movePrev();\n          }\n          break;\n      }\n\n      const clampedIndex = nextIndex % triggerCount;\n      triggerCollection[clampedIndex]!.ref.current?.focus();\n    });\n\n    return (\n      <AccordionImplProvider\n        scope={__scopeAccordion}\n        disabled={disabled}\n        direction={dir}\n        orientation={orientation}\n      >\n        <Collection.Slot scope={__scopeAccordion}>\n          <Primitive.div\n            {...accordionProps}\n            data-orientation={orientation}\n            ref={composedRefs}\n            onKeyDown={disabled ? undefined : handleKeyDown}\n          />\n        </Collection.Slot>\n      </AccordionImplProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'AccordionItem';\n\ntype AccordionItemContextValue = { open?: boolean; disabled?: boolean; triggerId: string };\nconst [AccordionItemProvider, useAccordionItemContext] =\n  createAccordionContext<AccordionItemContextValue>(ITEM_NAME);\n\ntype AccordionItemElement = React.ComponentRef<typeof CollapsiblePrimitive.Root>;\ntype CollapsibleProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Root>;\ninterface AccordionItemProps\n  extends Omit<CollapsibleProps, 'open' | 'defaultOpen' | 'onOpenChange'> {\n  /**\n   * Whether or not an accordion item is disabled from user interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * A string value for the accordion item. All items within an accordion should use a unique value.\n   */\n  value: string;\n}\n\n/**\n * `AccordionItem` contains all of the parts of a collapsible section inside of an `Accordion`.\n */\nconst AccordionItem = React.forwardRef<AccordionItemElement, AccordionItemProps>(\n  (props: ScopedProps<AccordionItemProps>, forwardedRef) => {\n    const { __scopeAccordion, value, ...accordionItemProps } = props;\n    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);\n    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    const triggerId = useId();\n    const open = (value && valueContext.value.includes(value)) || false;\n    const disabled = accordionContext.disabled || props.disabled;\n\n    return (\n      <AccordionItemProvider\n        scope={__scopeAccordion}\n        open={open}\n        disabled={disabled}\n        triggerId={triggerId}\n      >\n        <CollapsiblePrimitive.Root\n          data-orientation={accordionContext.orientation}\n          data-state={getState(open)}\n          {...collapsibleScope}\n          {...accordionItemProps}\n          ref={forwardedRef}\n          disabled={disabled}\n          open={open}\n          onOpenChange={(open) => {\n            if (open) {\n              valueContext.onItemOpen(value);\n            } else {\n              valueContext.onItemClose(value);\n            }\n          }}\n        />\n      </AccordionItemProvider>\n    );\n  }\n);\n\nAccordionItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionHeader\n * -----------------------------------------------------------------------------------------------*/\n\nconst HEADER_NAME = 'AccordionHeader';\n\ntype AccordionHeaderElement = React.ComponentRef<typeof Primitive.h3>;\ntype PrimitiveHeading3Props = React.ComponentPropsWithoutRef<typeof Primitive.h3>;\ninterface AccordionHeaderProps extends PrimitiveHeading3Props {}\n\n/**\n * `AccordionHeader` contains the content for the parts of an `AccordionItem` that will be visible\n * whether or not its content is collapsed.\n */\nconst AccordionHeader = React.forwardRef<AccordionHeaderElement, AccordionHeaderProps>(\n  (props: ScopedProps<AccordionHeaderProps>, forwardedRef) => {\n    const { __scopeAccordion, ...headerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);\n    return (\n      <Primitive.h3\n        data-orientation={accordionContext.orientation}\n        data-state={getState(itemContext.open)}\n        data-disabled={itemContext.disabled ? '' : undefined}\n        {...headerProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nAccordionHeader.displayName = HEADER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'AccordionTrigger';\n\ntype AccordionTriggerElement = React.ComponentRef<typeof CollapsiblePrimitive.Trigger>;\ntype CollapsibleTriggerProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Trigger>;\ninterface AccordionTriggerProps extends CollapsibleTriggerProps {}\n\n/**\n * `AccordionTrigger` is the trigger that toggles the collapsed state of an `AccordionItem`. It\n * should always be nested inside of an `AccordionHeader`.\n */\nconst AccordionTrigger = React.forwardRef<AccordionTriggerElement, AccordionTriggerProps>(\n  (props: ScopedProps<AccordionTriggerProps>, forwardedRef) => {\n    const { __scopeAccordion, ...triggerProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleContext = useAccordionCollapsibleContext(TRIGGER_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <Collection.ItemSlot scope={__scopeAccordion}>\n        <CollapsiblePrimitive.Trigger\n          aria-disabled={(itemContext.open && !collapsibleContext.collapsible) || undefined}\n          data-orientation={accordionContext.orientation}\n          id={itemContext.triggerId}\n          {...collapsibleScope}\n          {...triggerProps}\n          ref={forwardedRef}\n        />\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nAccordionTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AccordionContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AccordionContent';\n\ntype AccordionContentElement = React.ComponentRef<typeof CollapsiblePrimitive.Content>;\ntype CollapsibleContentProps = React.ComponentPropsWithoutRef<typeof CollapsiblePrimitive.Content>;\ninterface AccordionContentProps extends CollapsibleContentProps {}\n\n/**\n * `AccordionContent` contains the collapsible content for an `AccordionItem`.\n */\nconst AccordionContent = React.forwardRef<AccordionContentElement, AccordionContentProps>(\n  (props: ScopedProps<AccordionContentProps>, forwardedRef) => {\n    const { __scopeAccordion, ...contentProps } = props;\n    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);\n    const itemContext = useAccordionItemContext(CONTENT_NAME, __scopeAccordion);\n    const collapsibleScope = useCollapsibleScope(__scopeAccordion);\n    return (\n      <CollapsiblePrimitive.Content\n        role=\"region\"\n        aria-labelledby={itemContext.triggerId}\n        data-orientation={accordionContext.orientation}\n        {...collapsibleScope}\n        {...contentProps}\n        ref={forwardedRef}\n        style={{\n          ['--radix-accordion-content-height' as any]: 'var(--radix-collapsible-content-height)',\n          ['--radix-accordion-content-width' as any]: 'var(--radix-collapsible-content-width)',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nAccordionContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Accordion;\nconst Item = AccordionItem;\nconst Header = AccordionHeader;\nconst Trigger = AccordionTrigger;\nconst Content = AccordionContent;\n\nexport {\n  createAccordionScope,\n  //\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  //\n  Root,\n  Item,\n  Header,\n  Trigger,\n  Content,\n};\nexport type {\n  AccordionSingleProps,\n  AccordionMultipleProps,\n  AccordionItemProps,\n  AccordionHeaderProps,\n  AccordionTriggerProps,\n  AccordionContentProps,\n};\n"],"names":["INDICATOR_NAME","createContextScope","jsx","Root","Primitive","Item","useComposedRefs","composeEventHandlers","Trigger","Portal","Overlay","Content","Title","Description","window","id","value","node","duration","event","newValue","form","OneTimePasswordFieldHiddenInput","OneTimePasswordFieldInput","element","height","width","props","controlValidity","Arrow","Group","Label","CheckboxItem","RadioGroup","RadioItem","ItemIndicator","Separator","Sub","SubTrigger","SubContent","open"],"sourceRoot":"","ignoreList":[6,7,19,20]}