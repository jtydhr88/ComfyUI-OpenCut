{"version":3,"file":"static/chunks/8466.d9acc17155057af2.js","mappings":"mLCQA,EAAmB,UAAS,SAC5B,yBACA,MDVA,CCUS,KAAK,aDVe,6BAA6B,wBAAwB,6CAA6C,OAAO,gDAAgD,0CAA0C,OAAO,gDAAgD,0CAA0C,OAAO,yBAAyB,gCAAgC,iCAAiC,+CAA+C,qCAAqC,yCAAyC,2CAA2C,qDAAqD,OAAO,0BAA0B,6BAA6B,mBAAmB,oBAAoB,oCAAoC,8BAA8B,OAAO,2CAA2C,sDAAsD,yFAAyF,uDAAuD,OAAO,0CAA0C,sDAAsD,yFAAyF,sDAAsD,OAAO,yCAAyC,uDAAuD,yFAAyF,qDAAqD,wDAAwD,OAAO,4CAA4C,uDAAuD,yFAAyF,qDAAqD,wDAAwD,OAAO,ICWx3D,QARA,CACA,6BACA,wBACA,qBACA,CAKA,CAAC,ECGD,gBAAmC,oCAA+C,uBAA8B,IAAO,cAAkB,SAGzI,kBAC6B,MADO,SACP,SAC7B,KAA8B,+BAA4C,4BAA+B,eAAoB,kBAAsB,0BAAsC,iEAAuE,uCAF5N,EACP,UADO,CAC4B,uBAD5B,kCAAoE,kDAAgE,WAGxK,cAAiD,EAA3B,IAA2B,2EAAoG,iBAAmB,YAAiB,qGAAsH,IAC/S,MAdkB,GAAa,SAC/B,MAAS,CACT,CAAC,EAYD,QAbqB,SAarB,CACA,0BAEA,IADA,EACA,oBAEA,GADA,2CACA,SAA+B,4BAC/B,0BACA,wBACA,sBACA,uBACA,0BACA,mBAAgC,OAAI,qBACpC,wBACA,wBACA,6BACM,kCACN,GAAU,QAAO,kDAAmE,KACpF,gCACA,6EACA,qEACA,oCACA,qFACA,+BAAsD,OAAI,qBAC1D,2CACA,2CACA,6EAGA,2GACA,qBACA,qCACA,CAAG,CACH,sBACA,wBAGA,GAFA,2CACA,qBACA,QAGA,6BACA,0BACA,wBACA,sBACA,uBACA,uCAA2D,OAAI,qBAC/D,wBACA,wBACA,wBACA,0BACM,kCACN,GAAU,QAAO,uDACjB,4BAGA,gCACA,6EACA,qEACA,oCACA,qFACA,mDAAiF,OAAI,qBACrF,2CACA,2CACA,6EACA,oBAEA,CACA,CAAG,CACH,wBACA,wBACA,eACA,eACA,uBACA,4BACA,oCACA,+BAEA,CAAG,CACH,aACA,SACA,yBACA,WACA,sBACA,OACA,mCACA,qBACA,EACA,6CACA,mDACA,mDAEA,wCACA,0BACA,EACA,yDACA,+CACA,6DACA,6DACA,oDAEA,mDACA,uDACA,uDACA,CAAK,CACL,yBACA,sBACA,OACA,sDACA,4BACA,oDACA,6BAEA,gEACA,iCACA,gEACA,iCACA,sDACA,6BAEA,0DACA,4DACA,gBACA,cAEA,CAAK,CACL,+BACA,WACA,2BACA,+BAAyC,IAA6B,cACtE,SACA,EAAS,EAET,8CACA,CAAK,CACL,iCACA,2BACA,gDAEA,CAAK,CACL,2BACA,sBACA,wBACA,gBACA,CAAK,CACL,yBACA,sBACA,wBACA,qBAKA,eAFA,YADoB,QAAY,2BAA4D,UAAZ,QAAY,8BAA6D,SAAZ,QAAY,8BAA4D,YAAZ,QAAY,kCAAmE,UAAZ,QAAY,qCAAoE,SAAZ,QAAY,qCAC5V,cAIA,CAAK,CACL,sBACA,sBACA,wBACA,gBACA,CAAK,CACL,mBACA,sBACA,wBACA,cACA,CAAK,CACL,oBACA,sBACA,wBACA,cACA,CAAK,CACL,sBAEA,MADA,gBACA,oBACA,+CACA,CAAK,CACL,2BACA,CAAW,OAAa,IACxB,aAEA,2DACA,CAAK,CACL,6BACA,0BAAoC,QAAO,KAG3C,uBACA,cACA,mBAA4B,QAAM,QAClC,WACA,yDACA,6CACA,UACA,sCACA,gEACA,sBACA,mEACA,CAAS,IACT,CAAO,EACP,2BACM,GAAM,qCACZ,CAAK,CACL,qBACA,gBACA,MACA,iCACA,4BACA,CAAS,IAET,wBAEA,CAAK,CACL,2BACA,eACA,6BACA,2DACA,CAAK,CACL,mBACA,WACA,yBACA,WACA,sBACA,0BACA,CAAS,IAET,sBAEA,CAAK,CACL,8BACA,8CACA,CAAK,CACL,4BACA,gCACA,MAAa,QAAU,+BACvB,CAAK,CACL,mBACA,4BACA,EAAyB,OAAa,QACtC,2CACA,2BACA,SACA,CAAS,CACT,CAAO,EACP,EAAwB,OAAa,QACrC,0CACA,0BACA,SACA,CAAS,CACT,CAAO,CACP,qBAGA,eACA,2DAHA,8BAKA,MAAsB,OAAa,YACnC,sBACA,eACA,OACA,uBACA,kDACA,8DACA,CAAS,CACT,8DACO,kDACP,SACA,CAAO,QAIP,OAHA,6BACA,oBACA,WACA,CACA,CAAK,CACL,mBACA,MACA,gCACA,qBACU,GAAM,UAChB,8BAEA,mBACA,CACA,CAAK,CACL,kBACA,4BACA,OACA,iBACA,wBACA,oBACA,uBACA,mBAGQ,QACR,kBACA,wBACA,mBACA,wBACA,iBACA,wBACA,oBACA,uBACA,sBAKQ,UACR,oBACA,wBACA,iBACA,uBACA,uBAIA,mBACA,wBACA,kBACA,wBACA,iBACA,wBACA,oBACA,uBACA,sBAMA,CAAK,CACL,0BACA,gCAGA,OACA,KAHA,OAAqC,QAAmB,GAIxD,IAHA,MAAmC,QAAkB,EAIrD,CACA,CAAK,CACL,uBACA,yBACA,gCACA,0BACA,wBACA,SAAmC,QAAa,IAChD,SAAkC,QAAc,IAAO,QAAc,MACrE,qBACA,mBACA,kBACA,mBACA,oBACA,gBACA,CAAK,CACL,sBACA,wBACA,gCACA,0BACA,wBACA,SAAmC,QAAa,IAChD,SAAkC,QAAc,IAAO,QAAc,MACrE,qBACA,mBACA,kBACA,kBACA,oBACA,iBACA,CAAK,CACL,qBACA,uBACA,gCACA,0BACA,EAAyB,QAAa,IACtC,EAAyB,QAAa,IAEtC,EADyB,QAAW,GACpC,MACA,wBACA,iBACA,QAAiC,QAAc,GAC/C,KACA,IACQ,OACR,2BAEA,oBACA,mBAGA,2CACA,kBACA,mBACA,mBACA,mBACA,CAAK,CACL,wBACA,0BACA,gCACA,0BACA,EAAyB,QAAa,IACtC,EAAyB,QAAa,IAEtC,EAD0B,QAAW,GACrC,MACA,wBACA,iBACA,QAAiC,QAAc,GAC/C,KACA,IACQ,OACR,2BAEA,oBACA,mBAGA,2CACA,iBACA,mBACA,oBACA,mBACA,CAAK,CACL,uBACA,+BACA,uBACA,qBACM,QAAW,8CACjB,mBAA4B,QAAQ,2BACpC,uBACA,mCACA,CAAK,CACL,0BACA,gCACA,4BACA,QACA,SACA,EAAkB,QAAa,IAC/B,EAAmB,QAAc,IACjC,EAAqB,QAAW,GAChC,2CACK,CACL,sBACA,MACA,MAAa,QAAQ,+BAAwC,QAAU,gBACvE,CAAK,CACL,gCAEA,6CACA,YAIA,2BACA,2CACA,MAtcA,YAA8B,8BAsc9B,IA3cgC,SAIhC,KAAuC,mFAAkG,YAAiB,2BAA6C,IAAM,wBAAyC,KAAY,GAAZ,CAAY,oDAAkE,OAAW,SAAY,UAAmB,OAAU,IAAM,4DAAiF,OAAU,cAAoB,WAuc7e,MA3cgC,SAEhC,KAA6C,MAAS,iCAyctD,GAzcgH,WAAU,6BAAgC,iLAyc1J,MA3cgC,WACF,gKA2c9B,OACA,OAEA,MADA,yCACA,CACA,CAAS,GAAI,EAEb,EACA,CACA,CACA,CAAC","sources":["webpack://_N_E/../../node_modules/.bun/@primeuix+styles@1.2.3/node_modules/@primeuix/styles/dist/tooltip/index.mjs","webpack://_N_E/../../node_modules/.bun/primevue@4.3.7+e42565ebf0c83eb3/node_modules/primevue/tooltip/style/index.mjs","webpack://_N_E/../../node_modules/.bun/primevue@4.3.7+e42565ebf0c83eb3/node_modules/primevue/tooltip/index.mjs"],"sourcesContent":["var style=\"\\n    .p-tooltip {\\n        position: absolute;\\n        display: none;\\n        max-width: dt('tooltip.max.width');\\n    }\\n\\n    .p-tooltip-right,\\n    .p-tooltip-left {\\n        padding: 0 dt('tooltip.gutter');\\n    }\\n\\n    .p-tooltip-top,\\n    .p-tooltip-bottom {\\n        padding: dt('tooltip.gutter') 0;\\n    }\\n\\n    .p-tooltip-text {\\n        white-space: pre-line;\\n        word-break: break-word;\\n        background: dt('tooltip.background');\\n        color: dt('tooltip.color');\\n        padding: dt('tooltip.padding');\\n        box-shadow: dt('tooltip.shadow');\\n        border-radius: dt('tooltip.border.radius');\\n    }\\n\\n    .p-tooltip-arrow {\\n        position: absolute;\\n        width: 0;\\n        height: 0;\\n        border-color: transparent;\\n        border-style: solid;\\n    }\\n\\n    .p-tooltip-right .p-tooltip-arrow {\\n        margin-top: calc(-1 * dt('tooltip.gutter'));\\n        border-width: dt('tooltip.gutter') dt('tooltip.gutter') dt('tooltip.gutter') 0;\\n        border-right-color: dt('tooltip.background');\\n    }\\n\\n    .p-tooltip-left .p-tooltip-arrow {\\n        margin-top: calc(-1 * dt('tooltip.gutter'));\\n        border-width: dt('tooltip.gutter') 0 dt('tooltip.gutter') dt('tooltip.gutter');\\n        border-left-color: dt('tooltip.background');\\n    }\\n\\n    .p-tooltip-top .p-tooltip-arrow {\\n        margin-left: calc(-1 * dt('tooltip.gutter'));\\n        border-width: dt('tooltip.gutter') dt('tooltip.gutter') 0 dt('tooltip.gutter');\\n        border-top-color: dt('tooltip.background');\\n        border-bottom-color: dt('tooltip.background');\\n    }\\n\\n    .p-tooltip-bottom .p-tooltip-arrow {\\n        margin-left: calc(-1 * dt('tooltip.gutter'));\\n        border-width: 0 dt('tooltip.gutter') dt('tooltip.gutter') dt('tooltip.gutter');\\n        border-top-color: dt('tooltip.background');\\n        border-bottom-color: dt('tooltip.background');\\n    }\\n\";export{style};//# sourceMappingURL=index.mjs.map","import { style } from '@primeuix/styles/tooltip';\nimport BaseStyle from '@primevue/core/base/style';\n\nvar classes = {\n  root: 'p-tooltip p-component',\n  arrow: 'p-tooltip-arrow',\n  text: 'p-tooltip-text'\n};\nvar TooltipStyle = BaseStyle.extend({\n  name: 'tooltip-directive',\n  style: style,\n  classes: classes\n});\n\nexport { TooltipStyle as default };\n//# sourceMappingURL=index.mjs.map\n","import { hasClass, findSingle, getOuterWidth, getOuterHeight, getViewport, removeClass, addClass, getWindowScrollLeft, getWindowScrollTop, createElement, isExist, fadeIn, isTouchDevice, getAttribute } from '@primeuix/utils/dom';\nimport { isEmpty } from '@primeuix/utils/object';\nimport { uuid } from '@primeuix/utils/uuid';\nimport { ZIndex } from '@primeuix/utils/zindex';\nimport { ConnectedOverlayScrollHandler } from '@primevue/core/utils';\nimport BaseDirective from '@primevue/core/basedirective';\nimport TooltipStyle from 'primevue/tooltip/style';\n\nvar BaseTooltip = BaseDirective.extend({\n  style: TooltipStyle\n});\n\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = true, o = false; try { if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = true, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar Tooltip = BaseTooltip.extend('tooltip', {\n  beforeMount: function beforeMount(el, options) {\n    var _options$instance$$pr;\n    var target = this.getTarget(el);\n    target.$_ptooltipModifiers = this.getModifiers(options);\n    if (!options.value) return;else if (typeof options.value === 'string') {\n      target.$_ptooltipValue = options.value;\n      target.$_ptooltipDisabled = false;\n      target.$_ptooltipEscape = true;\n      target.$_ptooltipClass = null;\n      target.$_ptooltipFitContent = true;\n      target.$_ptooltipIdAttr = uuid('pv_id') + '_tooltip';\n      target.$_ptooltipShowDelay = 0;\n      target.$_ptooltipHideDelay = 0;\n      target.$_ptooltipAutoHide = true;\n    } else if (_typeof(options.value) === 'object' && options.value) {\n      if (isEmpty(options.value.value) || options.value.value.trim() === '') return;else {\n        target.$_ptooltipValue = options.value.value;\n        target.$_ptooltipDisabled = !!options.value.disabled === options.value.disabled ? options.value.disabled : false;\n        target.$_ptooltipEscape = !!options.value.escape === options.value.escape ? options.value.escape : true;\n        target.$_ptooltipClass = options.value[\"class\"] || '';\n        target.$_ptooltipFitContent = !!options.value.fitContent === options.value.fitContent ? options.value.fitContent : true;\n        target.$_ptooltipIdAttr = options.value.id || uuid('pv_id') + '_tooltip';\n        target.$_ptooltipShowDelay = options.value.showDelay || 0;\n        target.$_ptooltipHideDelay = options.value.hideDelay || 0;\n        target.$_ptooltipAutoHide = !!options.value.autoHide === options.value.autoHide ? options.value.autoHide : true;\n      }\n    }\n    target.$_ptooltipZIndex = (_options$instance$$pr = options.instance.$primevue) === null || _options$instance$$pr === void 0 || (_options$instance$$pr = _options$instance$$pr.config) === null || _options$instance$$pr === void 0 || (_options$instance$$pr = _options$instance$$pr.zIndex) === null || _options$instance$$pr === void 0 ? void 0 : _options$instance$$pr.tooltip;\n    this.bindEvents(target, options);\n    el.setAttribute('data-pd-tooltip', true);\n  },\n  updated: function updated(el, options) {\n    var target = this.getTarget(el);\n    target.$_ptooltipModifiers = this.getModifiers(options);\n    this.unbindEvents(target);\n    if (!options.value) {\n      return;\n    }\n    if (typeof options.value === 'string') {\n      target.$_ptooltipValue = options.value;\n      target.$_ptooltipDisabled = false;\n      target.$_ptooltipEscape = true;\n      target.$_ptooltipClass = null;\n      target.$_ptooltipIdAttr = target.$_ptooltipIdAttr || uuid('pv_id') + '_tooltip';\n      target.$_ptooltipShowDelay = 0;\n      target.$_ptooltipHideDelay = 0;\n      target.$_ptooltipAutoHide = true;\n      this.bindEvents(target, options);\n    } else if (_typeof(options.value) === 'object' && options.value) {\n      if (isEmpty(options.value.value) || options.value.value.trim() === '') {\n        this.unbindEvents(target, options);\n        return;\n      } else {\n        target.$_ptooltipValue = options.value.value;\n        target.$_ptooltipDisabled = !!options.value.disabled === options.value.disabled ? options.value.disabled : false;\n        target.$_ptooltipEscape = !!options.value.escape === options.value.escape ? options.value.escape : true;\n        target.$_ptooltipClass = options.value[\"class\"] || '';\n        target.$_ptooltipFitContent = !!options.value.fitContent === options.value.fitContent ? options.value.fitContent : true;\n        target.$_ptooltipIdAttr = options.value.id || target.$_ptooltipIdAttr || uuid('pv_id') + '_tooltip';\n        target.$_ptooltipShowDelay = options.value.showDelay || 0;\n        target.$_ptooltipHideDelay = options.value.hideDelay || 0;\n        target.$_ptooltipAutoHide = !!options.value.autoHide === options.value.autoHide ? options.value.autoHide : true;\n        this.bindEvents(target, options);\n      }\n    }\n  },\n  unmounted: function unmounted(el, options) {\n    var target = this.getTarget(el);\n    this.hide(el, 0);\n    this.remove(target);\n    this.unbindEvents(target, options);\n    if (target.$_ptooltipScrollHandler) {\n      target.$_ptooltipScrollHandler.destroy();\n      target.$_ptooltipScrollHandler = null;\n    }\n  },\n  timer: undefined,\n  methods: {\n    bindEvents: function bindEvents(el, options) {\n      var _this = this;\n      var modifiers = el.$_ptooltipModifiers;\n      if (modifiers.focus) {\n        el.$_ptooltipFocusEvent = function (event) {\n          return _this.onFocus(event, options);\n        };\n        el.$_ptooltipBlurEvent = this.onBlur.bind(this);\n        el.addEventListener('focus', el.$_ptooltipFocusEvent);\n        el.addEventListener('blur', el.$_ptooltipBlurEvent);\n      } else {\n        el.$_ptooltipMouseEnterEvent = function (event) {\n          return _this.onMouseEnter(event, options);\n        };\n        el.$_ptooltipMouseLeaveEvent = this.onMouseLeave.bind(this);\n        el.$_ptooltipClickEvent = this.onClick.bind(this);\n        el.addEventListener('mouseenter', el.$_ptooltipMouseEnterEvent);\n        el.addEventListener('mouseleave', el.$_ptooltipMouseLeaveEvent);\n        el.addEventListener('click', el.$_ptooltipClickEvent);\n      }\n      el.$_ptooltipKeydownEvent = this.onKeydown.bind(this);\n      el.addEventListener('keydown', el.$_ptooltipKeydownEvent);\n      el.$_pWindowResizeEvent = this.onWindowResize.bind(this, el);\n    },\n    unbindEvents: function unbindEvents(el) {\n      var modifiers = el.$_ptooltipModifiers;\n      if (modifiers.focus) {\n        el.removeEventListener('focus', el.$_ptooltipFocusEvent);\n        el.$_ptooltipFocusEvent = null;\n        el.removeEventListener('blur', el.$_ptooltipBlurEvent);\n        el.$_ptooltipBlurEvent = null;\n      } else {\n        el.removeEventListener('mouseenter', el.$_ptooltipMouseEnterEvent);\n        el.$_ptooltipMouseEnterEvent = null;\n        el.removeEventListener('mouseleave', el.$_ptooltipMouseLeaveEvent);\n        el.$_ptooltipMouseLeaveEvent = null;\n        el.removeEventListener('click', el.$_ptooltipClickEvent);\n        el.$_ptooltipClickEvent = null;\n      }\n      el.removeEventListener('keydown', el.$_ptooltipKeydownEvent);\n      window.removeEventListener('resize', el.$_pWindowResizeEvent);\n      if (el.$_ptooltipId) {\n        this.remove(el);\n      }\n    },\n    bindScrollListener: function bindScrollListener(el) {\n      var _this2 = this;\n      if (!el.$_ptooltipScrollHandler) {\n        el.$_ptooltipScrollHandler = new ConnectedOverlayScrollHandler(el, function () {\n          _this2.hide(el);\n        });\n      }\n      el.$_ptooltipScrollHandler.bindScrollListener();\n    },\n    unbindScrollListener: function unbindScrollListener(el) {\n      if (el.$_ptooltipScrollHandler) {\n        el.$_ptooltipScrollHandler.unbindScrollListener();\n      }\n    },\n    onMouseEnter: function onMouseEnter(event, options) {\n      var el = event.currentTarget;\n      var showDelay = el.$_ptooltipShowDelay;\n      this.show(el, options, showDelay);\n    },\n    onMouseLeave: function onMouseLeave(event) {\n      var el = event.currentTarget;\n      var hideDelay = el.$_ptooltipHideDelay;\n      var autoHide = el.$_ptooltipAutoHide;\n      if (!autoHide) {\n        var valid = getAttribute(event.target, 'data-pc-name') === 'tooltip' || getAttribute(event.target, 'data-pc-section') === 'arrow' || getAttribute(event.target, 'data-pc-section') === 'text' || getAttribute(event.relatedTarget, 'data-pc-name') === 'tooltip' || getAttribute(event.relatedTarget, 'data-pc-section') === 'arrow' || getAttribute(event.relatedTarget, 'data-pc-section') === 'text';\n        !valid && this.hide(el, hideDelay);\n      } else {\n        this.hide(el, hideDelay);\n      }\n    },\n    onFocus: function onFocus(event, options) {\n      var el = event.currentTarget;\n      var showDelay = el.$_ptooltipShowDelay;\n      this.show(el, options, showDelay);\n    },\n    onBlur: function onBlur(event) {\n      var el = event.currentTarget;\n      var hideDelay = el.$_ptooltipHideDelay;\n      this.hide(el, hideDelay);\n    },\n    onClick: function onClick(event) {\n      var el = event.currentTarget;\n      var hideDelay = el.$_ptooltipHideDelay;\n      this.hide(el, hideDelay);\n    },\n    onKeydown: function onKeydown(event) {\n      var el = event.currentTarget;\n      var hideDelay = el.$_ptooltipHideDelay;\n      event.code === 'Escape' && this.hide(event.currentTarget, hideDelay);\n    },\n    onWindowResize: function onWindowResize(el) {\n      if (!isTouchDevice()) {\n        this.hide(el);\n      }\n      window.removeEventListener('resize', el.$_pWindowResizeEvent);\n    },\n    tooltipActions: function tooltipActions(el, options) {\n      if (el.$_ptooltipDisabled || !isExist(el)) {\n        return;\n      }\n      var tooltipElement = this.create(el, options);\n      this.align(el);\n      !this.isUnstyled() && fadeIn(tooltipElement, 250);\n      var $this = this;\n      window.addEventListener('resize', el.$_pWindowResizeEvent);\n      tooltipElement.addEventListener('mouseleave', function onTooltipLeave() {\n        $this.hide(el);\n        tooltipElement.removeEventListener('mouseleave', onTooltipLeave);\n        el.removeEventListener('mouseenter', el.$_ptooltipMouseEnterEvent);\n        setTimeout(function () {\n          return el.addEventListener('mouseenter', el.$_ptooltipMouseEnterEvent);\n        }, 50);\n      });\n      this.bindScrollListener(el);\n      ZIndex.set('tooltip', tooltipElement, el.$_ptooltipZIndex);\n    },\n    show: function show(el, options, showDelay) {\n      var _this3 = this;\n      if (showDelay !== undefined) {\n        this.timer = setTimeout(function () {\n          return _this3.tooltipActions(el, options);\n        }, showDelay);\n      } else {\n        this.tooltipActions(el, options);\n      }\n    },\n    tooltipRemoval: function tooltipRemoval(el) {\n      this.remove(el);\n      this.unbindScrollListener(el);\n      window.removeEventListener('resize', el.$_pWindowResizeEvent);\n    },\n    hide: function hide(el, hideDelay) {\n      var _this4 = this;\n      clearTimeout(this.timer);\n      if (hideDelay !== undefined) {\n        setTimeout(function () {\n          return _this4.tooltipRemoval(el);\n        }, hideDelay);\n      } else {\n        this.tooltipRemoval(el);\n      }\n    },\n    getTooltipElement: function getTooltipElement(el) {\n      return document.getElementById(el.$_ptooltipId);\n    },\n    getArrowElement: function getArrowElement(el) {\n      var tooltipElement = this.getTooltipElement(el);\n      return findSingle(tooltipElement, '[data-pc-section=\"arrow\"]');\n    },\n    create: function create(el) {\n      var modifiers = el.$_ptooltipModifiers;\n      var tooltipArrow = createElement('div', {\n        \"class\": !this.isUnstyled() && this.cx('arrow'),\n        'p-bind': this.ptm('arrow', {\n          context: modifiers\n        })\n      });\n      var tooltipText = createElement('div', {\n        \"class\": !this.isUnstyled() && this.cx('text'),\n        'p-bind': this.ptm('text', {\n          context: modifiers\n        })\n      });\n      if (!el.$_ptooltipEscape) {\n        tooltipText.innerHTML = el.$_ptooltipValue;\n      } else {\n        tooltipText.innerHTML = '';\n        tooltipText.appendChild(document.createTextNode(el.$_ptooltipValue));\n      }\n      var container = createElement('div', _defineProperty(_defineProperty({\n        id: el.$_ptooltipIdAttr,\n        role: 'tooltip',\n        style: {\n          display: 'inline-block',\n          width: el.$_ptooltipFitContent ? 'fit-content' : undefined,\n          pointerEvents: !this.isUnstyled() && el.$_ptooltipAutoHide && 'none'\n        },\n        \"class\": [!this.isUnstyled() && this.cx('root'), el.$_ptooltipClass]\n      }, this.$attrSelector, ''), 'p-bind', this.ptm('root', {\n        context: modifiers\n      })), tooltipArrow, tooltipText);\n      document.body.appendChild(container);\n      el.$_ptooltipId = container.id;\n      this.$el = container;\n      return container;\n    },\n    remove: function remove(el) {\n      if (el) {\n        var tooltipElement = this.getTooltipElement(el);\n        if (tooltipElement && tooltipElement.parentElement) {\n          ZIndex.clear(tooltipElement);\n          document.body.removeChild(tooltipElement);\n        }\n        el.$_ptooltipId = null;\n      }\n    },\n    align: function align(el) {\n      var modifiers = el.$_ptooltipModifiers;\n      if (modifiers.top) {\n        this.alignTop(el);\n        if (this.isOutOfBounds(el)) {\n          this.alignBottom(el);\n          if (this.isOutOfBounds(el)) {\n            this.alignTop(el);\n          }\n        }\n      } else if (modifiers.left) {\n        this.alignLeft(el);\n        if (this.isOutOfBounds(el)) {\n          this.alignRight(el);\n          if (this.isOutOfBounds(el)) {\n            this.alignTop(el);\n            if (this.isOutOfBounds(el)) {\n              this.alignBottom(el);\n              if (this.isOutOfBounds(el)) {\n                this.alignLeft(el);\n              }\n            }\n          }\n        }\n      } else if (modifiers.bottom) {\n        this.alignBottom(el);\n        if (this.isOutOfBounds(el)) {\n          this.alignTop(el);\n          if (this.isOutOfBounds(el)) {\n            this.alignBottom(el);\n          }\n        }\n      } else {\n        this.alignRight(el);\n        if (this.isOutOfBounds(el)) {\n          this.alignLeft(el);\n          if (this.isOutOfBounds(el)) {\n            this.alignTop(el);\n            if (this.isOutOfBounds(el)) {\n              this.alignBottom(el);\n              if (this.isOutOfBounds(el)) {\n                this.alignRight(el);\n              }\n            }\n          }\n        }\n      }\n    },\n    getHostOffset: function getHostOffset(el) {\n      var offset = el.getBoundingClientRect();\n      var targetLeft = offset.left + getWindowScrollLeft();\n      var targetTop = offset.top + getWindowScrollTop();\n      return {\n        left: targetLeft,\n        top: targetTop\n      };\n    },\n    alignRight: function alignRight(el) {\n      this.preAlign(el, 'right');\n      var tooltipElement = this.getTooltipElement(el);\n      var arrowElement = this.getArrowElement(el);\n      var hostOffset = this.getHostOffset(el);\n      var left = hostOffset.left + getOuterWidth(el);\n      var top = hostOffset.top + (getOuterHeight(el) - getOuterHeight(tooltipElement)) / 2;\n      tooltipElement.style.left = left + 'px';\n      tooltipElement.style.top = top + 'px';\n      arrowElement.style.top = '50%';\n      arrowElement.style.right = null;\n      arrowElement.style.bottom = null;\n      arrowElement.style.left = '0';\n    },\n    alignLeft: function alignLeft(el) {\n      this.preAlign(el, 'left');\n      var tooltipElement = this.getTooltipElement(el);\n      var arrowElement = this.getArrowElement(el);\n      var hostOffset = this.getHostOffset(el);\n      var left = hostOffset.left - getOuterWidth(tooltipElement);\n      var top = hostOffset.top + (getOuterHeight(el) - getOuterHeight(tooltipElement)) / 2;\n      tooltipElement.style.left = left + 'px';\n      tooltipElement.style.top = top + 'px';\n      arrowElement.style.top = '50%';\n      arrowElement.style.right = '0';\n      arrowElement.style.bottom = null;\n      arrowElement.style.left = null;\n    },\n    alignTop: function alignTop(el) {\n      this.preAlign(el, 'top');\n      var tooltipElement = this.getTooltipElement(el);\n      var arrowElement = this.getArrowElement(el);\n      var tooltipWidth = getOuterWidth(tooltipElement);\n      var elementWidth = getOuterWidth(el);\n      var _getViewport = getViewport(),\n        viewportWidth = _getViewport.width;\n      var hostOffset = this.getHostOffset(el);\n      var left = hostOffset.left + (elementWidth - tooltipWidth) / 2;\n      var top = hostOffset.top - getOuterHeight(tooltipElement);\n      if (left < 0) {\n        left = 0;\n      } else if (left + tooltipWidth > viewportWidth) {\n        left = Math.floor(hostOffset.left + elementWidth - tooltipWidth);\n      }\n      tooltipElement.style.left = left + 'px';\n      tooltipElement.style.top = top + 'px';\n\n      // The center of the target relative to the tooltip\n      var elementRelativeCenter = hostOffset.left - this.getHostOffset(tooltipElement).left + elementWidth / 2;\n      arrowElement.style.top = null;\n      arrowElement.style.right = null;\n      arrowElement.style.bottom = '0';\n      arrowElement.style.left = elementRelativeCenter + 'px';\n    },\n    alignBottom: function alignBottom(el) {\n      this.preAlign(el, 'bottom');\n      var tooltipElement = this.getTooltipElement(el);\n      var arrowElement = this.getArrowElement(el);\n      var tooltipWidth = getOuterWidth(tooltipElement);\n      var elementWidth = getOuterWidth(el);\n      var _getViewport2 = getViewport(),\n        viewportWidth = _getViewport2.width;\n      var hostOffset = this.getHostOffset(el);\n      var left = hostOffset.left + (elementWidth - tooltipWidth) / 2;\n      var top = hostOffset.top + getOuterHeight(el);\n      if (left < 0) {\n        left = 0;\n      } else if (left + tooltipWidth > viewportWidth) {\n        left = Math.floor(hostOffset.left + elementWidth - tooltipWidth);\n      }\n      tooltipElement.style.left = left + 'px';\n      tooltipElement.style.top = top + 'px';\n\n      // The center of the target relative to the tooltip\n      var elementRelativeCenter = hostOffset.left - this.getHostOffset(tooltipElement).left + elementWidth / 2;\n      arrowElement.style.top = '0';\n      arrowElement.style.right = null;\n      arrowElement.style.bottom = null;\n      arrowElement.style.left = elementRelativeCenter + 'px';\n    },\n    preAlign: function preAlign(el, position) {\n      var tooltipElement = this.getTooltipElement(el);\n      tooltipElement.style.left = -999 + 'px';\n      tooltipElement.style.top = -999 + 'px';\n      removeClass(tooltipElement, \"p-tooltip-\".concat(tooltipElement.$_ptooltipPosition));\n      !this.isUnstyled() && addClass(tooltipElement, \"p-tooltip-\".concat(position));\n      tooltipElement.$_ptooltipPosition = position;\n      tooltipElement.setAttribute('data-p-position', position);\n    },\n    isOutOfBounds: function isOutOfBounds(el) {\n      var tooltipElement = this.getTooltipElement(el);\n      var offset = tooltipElement.getBoundingClientRect();\n      var targetTop = offset.top;\n      var targetLeft = offset.left;\n      var width = getOuterWidth(tooltipElement);\n      var height = getOuterHeight(tooltipElement);\n      var viewport = getViewport();\n      return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;\n    },\n    getTarget: function getTarget(el) {\n      var _findSingle;\n      return hasClass(el, 'p-inputwrapper') ? (_findSingle = findSingle(el, 'input')) !== null && _findSingle !== void 0 ? _findSingle : el : el;\n    },\n    getModifiers: function getModifiers(options) {\n      // modifiers\n      if (options.modifiers && Object.keys(options.modifiers).length) {\n        return options.modifiers;\n      }\n\n      // arg\n      if (options.arg && _typeof(options.arg) === 'object') {\n        return Object.entries(options.arg).reduce(function (acc, _ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            val = _ref2[1];\n          if (key === 'event' || key === 'position') acc[val] = true;\n          return acc;\n        }, {});\n      }\n      return {};\n    }\n  }\n});\n\nexport { Tooltip as default };\n//# sourceMappingURL=index.mjs.map\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2]}